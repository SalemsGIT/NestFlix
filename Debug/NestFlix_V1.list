
NestFlix_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013920  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08013af0  08013af0  00014af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013b98  08013b98  000151c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08013b98  08013b98  00014b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013ba0  08013ba0  000151c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013ba0  08013ba0  00014ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013ba4  08013ba4  00014ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08013ba8  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000080  08013c28  00015080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000120  08013cc8  00015120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00009638  200001c0  08013d68  000151c0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200097f8  08013d68  000157f8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000151c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003ebed  00000000  00000000  000151f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008748  00000000  00000000  00053ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000034d0  00000000  00000000  0005c528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000028c2  00000000  00000000  0005f9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037611  00000000  00000000  000622ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00047cde  00000000  00000000  000998cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012b0ec  00000000  00000000  000e15a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0020c695  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000e2ac  00000000  00000000  0020c6d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  0021a984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c0 	.word	0x200001c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013ad8 	.word	0x08013ad8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001c4 	.word	0x200001c4
 800020c:	08013ad8 	.word	0x08013ad8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr

0800054a <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800054a:	b480      	push	{r7}
 800054c:	b083      	sub	sp, #12
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
 8000552:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
	...

08000570 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4a07      	ldr	r2, [pc, #28]	@ (800059c <vApplicationGetIdleTaskMemory+0x2c>)
 8000580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	4a06      	ldr	r2, [pc, #24]	@ (80005a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2280      	movs	r2, #128	@ 0x80
 800058c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	200001dc 	.word	0x200001dc
 80005a0:	20000234 	.word	0x20000234

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f002 fc5b 	bl	8002e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f84d 	bl	800064c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005b2:	f000 f8bd 	bl	8000730 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f001 f87b 	bl	80016b0 <MX_GPIO_Init>
  MX_ADC3_Init();
 80005ba:	f000 f8eb 	bl	8000794 <MX_ADC3_Init>
  MX_CRC_Init();
 80005be:	f000 f93b 	bl	8000838 <MX_CRC_Init>
  MX_DCMI_Init();
 80005c2:	f000 f95b 	bl	800087c <MX_DCMI_Init>
  MX_DMA2D_Init();
 80005c6:	f000 f98d 	bl	80008e4 <MX_DMA2D_Init>
  MX_ETH_Init();
 80005ca:	f000 f9bd 	bl	8000948 <MX_ETH_Init>
  MX_FMC_Init();
 80005ce:	f001 f81f 	bl	8001610 <MX_FMC_Init>
  MX_I2C1_Init();
 80005d2:	f000 fa07 	bl	80009e4 <MX_I2C1_Init>
  MX_I2C3_Init();
 80005d6:	f000 fa45 	bl	8000a64 <MX_I2C3_Init>
  MX_LTDC_Init();
 80005da:	f000 fa83 	bl	8000ae4 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80005de:	f000 fb03 	bl	8000be8 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80005e2:	f000 fb2d 	bl	8000c40 <MX_RTC_Init>
  MX_SAI2_Init();
 80005e6:	f000 fbcf 	bl	8000d88 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80005ea:	f000 fc75 	bl	8000ed8 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80005ee:	f000 fc95 	bl	8000f1c <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 80005f2:	f000 fcc3 	bl	8000f7c <MX_SPI2_Init>
  MX_TIM1_Init();
 80005f6:	f000 fcff 	bl	8000ff8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005fa:	f000 fda9 	bl	8001150 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005fe:	f000 fe1d 	bl	800123c <MX_TIM3_Init>
  MX_TIM5_Init();
 8000602:	f000 fe93 	bl	800132c <MX_TIM5_Init>
  MX_TIM8_Init();
 8000606:	f000 ff09 	bl	800141c <MX_TIM8_Init>
  MX_TIM12_Init();
 800060a:	f000 ff5b 	bl	80014c4 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800060e:	f000 ff9f 	bl	8001550 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000612:	f000 ffcd 	bl	80015b0 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000616:	f00d fdf5 	bl	800e204 <MX_FATFS_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800061a:	4b0a      	ldr	r3, [pc, #40]	@ (8000644 <main+0xa0>)
 800061c:	1d3c      	adds	r4, r7, #4
 800061e:	461d      	mov	r5, r3
 8000620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000624:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000628:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f010 faad 	bl	8010b90 <osThreadCreate>
 8000636:	4603      	mov	r3, r0
 8000638:	4a03      	ldr	r2, [pc, #12]	@ (8000648 <main+0xa4>)
 800063a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800063c:	f010 fa85 	bl	8010b4a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <main+0x9c>
 8000644:	08013afc 	.word	0x08013afc
 8000648:	20000d1c 	.word	0x20000d1c

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	@ 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	2230      	movs	r2, #48	@ 0x30
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f013 f9a0 	bl	80139a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000670:	f006 fe5c 	bl	800732c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	4b2c      	ldr	r3, [pc, #176]	@ (8000728 <SystemClock_Config+0xdc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000678:	4a2b      	ldr	r2, [pc, #172]	@ (8000728 <SystemClock_Config+0xdc>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000680:	4b29      	ldr	r3, [pc, #164]	@ (8000728 <SystemClock_Config+0xdc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068c:	4b27      	ldr	r3, [pc, #156]	@ (800072c <SystemClock_Config+0xe0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a26      	ldr	r2, [pc, #152]	@ (800072c <SystemClock_Config+0xe0>)
 8000692:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b24      	ldr	r3, [pc, #144]	@ (800072c <SystemClock_Config+0xe0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80006a4:	2309      	movs	r3, #9
 80006a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006ae:	2301      	movs	r3, #1
 80006b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006bc:	2319      	movs	r3, #25
 80006be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80006c0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80006c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006ca:	2309      	movs	r3, #9
 80006cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	4618      	mov	r0, r3
 80006d4:	f006 ff4c 	bl	8007570 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006de:	f001 f9cd 	bl	8001a7c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006e2:	f006 fe33 	bl	800734c <HAL_PWREx_EnableOverDrive>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006ec:	f001 f9c6 	bl	8001a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2106      	movs	r1, #6
 800070e:	4618      	mov	r0, r3
 8000710:	f007 f9d2 	bl	8007ab8 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800071a:	f001 f9af 	bl	8001a7c <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	@ 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b0a2      	sub	sp, #136	@ 0x88
 8000734:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2284      	movs	r2, #132	@ 0x84
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f013 f92f 	bl	80139a0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8000742:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <PeriphCommonClock_Config+0x60>)
 8000744:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000746:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800074a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800074c:	2305      	movs	r3, #5
 800074e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000750:	2302      	movs	r3, #2
 8000752:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000754:	2303      	movs	r3, #3
 8000756:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000758:	2301      	movs	r3, #1
 800075a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800075c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000760:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000762:	2300      	movs	r3, #0
 8000764:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000766:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800076a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800076e:	2300      	movs	r3, #0
 8000770:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	4618      	mov	r0, r3
 8000778:	f007 fbb6 	bl	8007ee8 <HAL_RCCEx_PeriphCLKConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000782:	f001 f97b 	bl	8001a7c <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3788      	adds	r7, #136	@ 0x88
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	00b00008 	.word	0x00b00008

08000794 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800079a:	463b      	mov	r3, r7
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80007a6:	4b21      	ldr	r3, [pc, #132]	@ (800082c <MX_ADC3_Init+0x98>)
 80007a8:	4a21      	ldr	r2, [pc, #132]	@ (8000830 <MX_ADC3_Init+0x9c>)
 80007aa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007ac:	4b1f      	ldr	r3, [pc, #124]	@ (800082c <MX_ADC3_Init+0x98>)
 80007ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007b2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007b4:	4b1d      	ldr	r3, [pc, #116]	@ (800082c <MX_ADC3_Init+0x98>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ba:	4b1c      	ldr	r3, [pc, #112]	@ (800082c <MX_ADC3_Init+0x98>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80007c0:	4b1a      	ldr	r3, [pc, #104]	@ (800082c <MX_ADC3_Init+0x98>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007c6:	4b19      	ldr	r3, [pc, #100]	@ (800082c <MX_ADC3_Init+0x98>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ce:	4b17      	ldr	r3, [pc, #92]	@ (800082c <MX_ADC3_Init+0x98>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d4:	4b15      	ldr	r3, [pc, #84]	@ (800082c <MX_ADC3_Init+0x98>)
 80007d6:	4a17      	ldr	r2, [pc, #92]	@ (8000834 <MX_ADC3_Init+0xa0>)
 80007d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007da:	4b14      	ldr	r3, [pc, #80]	@ (800082c <MX_ADC3_Init+0x98>)
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80007e0:	4b12      	ldr	r3, [pc, #72]	@ (800082c <MX_ADC3_Init+0x98>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80007e6:	4b11      	ldr	r3, [pc, #68]	@ (800082c <MX_ADC3_Init+0x98>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ee:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <MX_ADC3_Init+0x98>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80007f4:	480d      	ldr	r0, [pc, #52]	@ (800082c <MX_ADC3_Init+0x98>)
 80007f6:	f002 fb87 	bl	8002f08 <HAL_ADC_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000800:	f001 f93c 	bl	8001a7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000804:	2304      	movs	r3, #4
 8000806:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000808:	2301      	movs	r3, #1
 800080a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000810:	463b      	mov	r3, r7
 8000812:	4619      	mov	r1, r3
 8000814:	4805      	ldr	r0, [pc, #20]	@ (800082c <MX_ADC3_Init+0x98>)
 8000816:	f002 fbbb 	bl	8002f90 <HAL_ADC_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000820:	f001 f92c 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	2000046c 	.word	0x2000046c
 8000830:	40012200 	.word	0x40012200
 8000834:	0f000001 	.word	0x0f000001

08000838 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800083c:	4b0d      	ldr	r3, [pc, #52]	@ (8000874 <MX_CRC_Init+0x3c>)
 800083e:	4a0e      	ldr	r2, [pc, #56]	@ (8000878 <MX_CRC_Init+0x40>)
 8000840:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000842:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <MX_CRC_Init+0x3c>)
 8000844:	2200      	movs	r2, #0
 8000846:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000848:	4b0a      	ldr	r3, [pc, #40]	@ (8000874 <MX_CRC_Init+0x3c>)
 800084a:	2200      	movs	r2, #0
 800084c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <MX_CRC_Init+0x3c>)
 8000850:	2200      	movs	r2, #0
 8000852:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000854:	4b07      	ldr	r3, [pc, #28]	@ (8000874 <MX_CRC_Init+0x3c>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800085a:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <MX_CRC_Init+0x3c>)
 800085c:	2201      	movs	r2, #1
 800085e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000860:	4804      	ldr	r0, [pc, #16]	@ (8000874 <MX_CRC_Init+0x3c>)
 8000862:	f002 fecb 	bl	80035fc <HAL_CRC_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800086c:	f001 f906 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200004b4 	.word	0x200004b4
 8000878:	40023000 	.word	0x40023000

0800087c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000880:	4b16      	ldr	r3, [pc, #88]	@ (80008dc <MX_DCMI_Init+0x60>)
 8000882:	4a17      	ldr	r2, [pc, #92]	@ (80008e0 <MX_DCMI_Init+0x64>)
 8000884:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000886:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <MX_DCMI_Init+0x60>)
 8000888:	2200      	movs	r2, #0
 800088a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800088c:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <MX_DCMI_Init+0x60>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000892:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <MX_DCMI_Init+0x60>)
 8000894:	2200      	movs	r2, #0
 8000896:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000898:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <MX_DCMI_Init+0x60>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800089e:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <MX_DCMI_Init+0x60>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80008a4:	4b0d      	ldr	r3, [pc, #52]	@ (80008dc <MX_DCMI_Init+0x60>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80008aa:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <MX_DCMI_Init+0x60>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80008b0:	4b0a      	ldr	r3, [pc, #40]	@ (80008dc <MX_DCMI_Init+0x60>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_DCMI_Init+0x60>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80008bc:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <MX_DCMI_Init+0x60>)
 80008be:	2200      	movs	r2, #0
 80008c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80008c2:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_DCMI_Init+0x60>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80008c8:	4804      	ldr	r0, [pc, #16]	@ (80008dc <MX_DCMI_Init+0x60>)
 80008ca:	f002 ff89 	bl	80037e0 <HAL_DCMI_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80008d4:	f001 f8d2 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200004d8 	.word	0x200004d8
 80008e0:	50050000 	.word	0x50050000

080008e4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008e8:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <MX_DMA2D_Init+0x5c>)
 80008ea:	4a16      	ldr	r2, [pc, #88]	@ (8000944 <MX_DMA2D_Init+0x60>)
 80008ec:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008ee:	4b14      	ldr	r3, [pc, #80]	@ (8000940 <MX_DMA2D_Init+0x5c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008f4:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <MX_DMA2D_Init+0x5c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008fa:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <MX_DMA2D_Init+0x5c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000900:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <MX_DMA2D_Init+0x5c>)
 8000902:	2200      	movs	r2, #0
 8000904:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000906:	4b0e      	ldr	r3, [pc, #56]	@ (8000940 <MX_DMA2D_Init+0x5c>)
 8000908:	2200      	movs	r2, #0
 800090a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800090c:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <MX_DMA2D_Init+0x5c>)
 800090e:	2200      	movs	r2, #0
 8000910:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000912:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <MX_DMA2D_Init+0x5c>)
 8000914:	2200      	movs	r2, #0
 8000916:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000918:	4809      	ldr	r0, [pc, #36]	@ (8000940 <MX_DMA2D_Init+0x5c>)
 800091a:	f003 f875 	bl	8003a08 <HAL_DMA2D_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000924:	f001 f8aa 	bl	8001a7c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000928:	2101      	movs	r1, #1
 800092a:	4805      	ldr	r0, [pc, #20]	@ (8000940 <MX_DMA2D_Init+0x5c>)
 800092c:	f003 f9c6 	bl	8003cbc <HAL_DMA2D_ConfigLayer>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000936:	f001 f8a1 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000528 	.word	0x20000528
 8000944:	4002b000 	.word	0x4002b000

08000948 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800094c:	4b1f      	ldr	r3, [pc, #124]	@ (80009cc <MX_ETH_Init+0x84>)
 800094e:	4a20      	ldr	r2, [pc, #128]	@ (80009d0 <MX_ETH_Init+0x88>)
 8000950:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000952:	4b20      	ldr	r3, [pc, #128]	@ (80009d4 <MX_ETH_Init+0x8c>)
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000958:	4b1e      	ldr	r3, [pc, #120]	@ (80009d4 <MX_ETH_Init+0x8c>)
 800095a:	2280      	movs	r2, #128	@ 0x80
 800095c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800095e:	4b1d      	ldr	r3, [pc, #116]	@ (80009d4 <MX_ETH_Init+0x8c>)
 8000960:	22e1      	movs	r2, #225	@ 0xe1
 8000962:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000964:	4b1b      	ldr	r3, [pc, #108]	@ (80009d4 <MX_ETH_Init+0x8c>)
 8000966:	2200      	movs	r2, #0
 8000968:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800096a:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <MX_ETH_Init+0x8c>)
 800096c:	2200      	movs	r2, #0
 800096e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000970:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <MX_ETH_Init+0x8c>)
 8000972:	2200      	movs	r2, #0
 8000974:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <MX_ETH_Init+0x84>)
 8000978:	4a16      	ldr	r2, [pc, #88]	@ (80009d4 <MX_ETH_Init+0x8c>)
 800097a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800097c:	4b13      	ldr	r3, [pc, #76]	@ (80009cc <MX_ETH_Init+0x84>)
 800097e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000982:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000984:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <MX_ETH_Init+0x84>)
 8000986:	4a14      	ldr	r2, [pc, #80]	@ (80009d8 <MX_ETH_Init+0x90>)
 8000988:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800098a:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <MX_ETH_Init+0x84>)
 800098c:	4a13      	ldr	r2, [pc, #76]	@ (80009dc <MX_ETH_Init+0x94>)
 800098e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000990:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <MX_ETH_Init+0x84>)
 8000992:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000996:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000998:	480c      	ldr	r0, [pc, #48]	@ (80009cc <MX_ETH_Init+0x84>)
 800099a:	f003 fa21 	bl	8003de0 <HAL_ETH_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80009a4:	f001 f86a 	bl	8001a7c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009a8:	2238      	movs	r2, #56	@ 0x38
 80009aa:	2100      	movs	r1, #0
 80009ac:	480c      	ldr	r0, [pc, #48]	@ (80009e0 <MX_ETH_Init+0x98>)
 80009ae:	f012 fff7 	bl	80139a0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <MX_ETH_Init+0x98>)
 80009b4:	2221      	movs	r2, #33	@ 0x21
 80009b6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009b8:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <MX_ETH_Init+0x98>)
 80009ba:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80009be:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009c0:	4b07      	ldr	r3, [pc, #28]	@ (80009e0 <MX_ETH_Init+0x98>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000568 	.word	0x20000568
 80009d0:	40028000 	.word	0x40028000
 80009d4:	20000d20 	.word	0x20000d20
 80009d8:	20000120 	.word	0x20000120
 80009dc:	20000080 	.word	0x20000080
 80009e0:	20000434 	.word	0x20000434

080009e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <MX_I2C1_Init+0x74>)
 80009ea:	4a1c      	ldr	r2, [pc, #112]	@ (8000a5c <MX_I2C1_Init+0x78>)
 80009ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <MX_I2C1_Init+0x74>)
 80009f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a60 <MX_I2C1_Init+0x7c>)
 80009f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009f4:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <MX_I2C1_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009fa:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <MX_I2C1_Init+0x74>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a00:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a06:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a12:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a1e:	480e      	ldr	r0, [pc, #56]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a20:	f006 f83e 	bl	8006aa0 <HAL_I2C_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a2a:	f001 f827 	bl	8001a7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4809      	ldr	r0, [pc, #36]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a32:	f006 f8d1 	bl	8006bd8 <HAL_I2CEx_ConfigAnalogFilter>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a3c:	f001 f81e 	bl	8001a7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a40:	2100      	movs	r1, #0
 8000a42:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a44:	f006 f913 	bl	8006c6e <HAL_I2CEx_ConfigDigitalFilter>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a4e:	f001 f815 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000618 	.word	0x20000618
 8000a5c:	40005400 	.word	0x40005400
 8000a60:	00c0eaff 	.word	0x00c0eaff

08000a64 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000adc <MX_I2C3_Init+0x78>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000a70:	4a1b      	ldr	r2, [pc, #108]	@ (8000ae0 <MX_I2C3_Init+0x7c>)
 8000a72:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000a74:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a7a:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a80:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000a86:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a92:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a9e:	480e      	ldr	r0, [pc, #56]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000aa0:	f005 fffe 	bl	8006aa0 <HAL_I2C_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000aaa:	f000 ffe7 	bl	8001a7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4809      	ldr	r0, [pc, #36]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000ab2:	f006 f891 	bl	8006bd8 <HAL_I2CEx_ConfigAnalogFilter>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000abc:	f000 ffde 	bl	8001a7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000ac4:	f006 f8d3 	bl	8006c6e <HAL_I2CEx_ConfigDigitalFilter>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000ace:	f000 ffd5 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2000066c 	.word	0x2000066c
 8000adc:	40005c00 	.word	0x40005c00
 8000ae0:	00c0eaff 	.word	0x00c0eaff

08000ae4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08e      	sub	sp, #56	@ 0x38
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2234      	movs	r2, #52	@ 0x34
 8000aee:	2100      	movs	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f012 ff55 	bl	80139a0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000af6:	4b3a      	ldr	r3, [pc, #232]	@ (8000be0 <MX_LTDC_Init+0xfc>)
 8000af8:	4a3a      	ldr	r2, [pc, #232]	@ (8000be4 <MX_LTDC_Init+0x100>)
 8000afa:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000afc:	4b38      	ldr	r3, [pc, #224]	@ (8000be0 <MX_LTDC_Init+0xfc>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b02:	4b37      	ldr	r3, [pc, #220]	@ (8000be0 <MX_LTDC_Init+0xfc>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b08:	4b35      	ldr	r3, [pc, #212]	@ (8000be0 <MX_LTDC_Init+0xfc>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b0e:	4b34      	ldr	r3, [pc, #208]	@ (8000be0 <MX_LTDC_Init+0xfc>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000b14:	4b32      	ldr	r3, [pc, #200]	@ (8000be0 <MX_LTDC_Init+0xfc>)
 8000b16:	2228      	movs	r2, #40	@ 0x28
 8000b18:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000b1a:	4b31      	ldr	r3, [pc, #196]	@ (8000be0 <MX_LTDC_Init+0xfc>)
 8000b1c:	2209      	movs	r2, #9
 8000b1e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000b20:	4b2f      	ldr	r3, [pc, #188]	@ (8000be0 <MX_LTDC_Init+0xfc>)
 8000b22:	2235      	movs	r2, #53	@ 0x35
 8000b24:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000b26:	4b2e      	ldr	r3, [pc, #184]	@ (8000be0 <MX_LTDC_Init+0xfc>)
 8000b28:	220b      	movs	r2, #11
 8000b2a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000b2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000be0 <MX_LTDC_Init+0xfc>)
 8000b2e:	f240 2215 	movw	r2, #533	@ 0x215
 8000b32:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000b34:	4b2a      	ldr	r3, [pc, #168]	@ (8000be0 <MX_LTDC_Init+0xfc>)
 8000b36:	f240 121b 	movw	r2, #283	@ 0x11b
 8000b3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8000b3c:	4b28      	ldr	r3, [pc, #160]	@ (8000be0 <MX_LTDC_Init+0xfc>)
 8000b3e:	f240 2235 	movw	r2, #565	@ 0x235
 8000b42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000b44:	4b26      	ldr	r3, [pc, #152]	@ (8000be0 <MX_LTDC_Init+0xfc>)
 8000b46:	f240 121d 	movw	r2, #285	@ 0x11d
 8000b4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b4c:	4b24      	ldr	r3, [pc, #144]	@ (8000be0 <MX_LTDC_Init+0xfc>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b54:	4b22      	ldr	r3, [pc, #136]	@ (8000be0 <MX_LTDC_Init+0xfc>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b5c:	4b20      	ldr	r3, [pc, #128]	@ (8000be0 <MX_LTDC_Init+0xfc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b64:	481e      	ldr	r0, [pc, #120]	@ (8000be0 <MX_LTDC_Init+0xfc>)
 8000b66:	f006 f8ce 	bl	8006d06 <HAL_LTDC_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000b70:	f000 ff84 	bl	8001a7c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000b78:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000b7c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000b82:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000b86:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000b8c:	23ff      	movs	r3, #255	@ 0xff
 8000b8e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000b94:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b98:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b9a:	2307      	movs	r3, #7
 8000b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000b9e:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8000ba4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8000baa:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000bae:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	@ (8000be0 <MX_LTDC_Init+0xfc>)
 8000bca:	f006 f9fb 	bl	8006fc4 <HAL_LTDC_ConfigLayer>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000bd4:	f000 ff52 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	3738      	adds	r7, #56	@ 0x38
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	200006c0 	.word	0x200006c0
 8000be4:	40016800 	.word	0x40016800

08000be8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000bec:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <MX_QUADSPI_Init+0x50>)
 8000bee:	4a13      	ldr	r2, [pc, #76]	@ (8000c3c <MX_QUADSPI_Init+0x54>)
 8000bf0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <MX_QUADSPI_Init+0x50>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <MX_QUADSPI_Init+0x50>)
 8000bfa:	2204      	movs	r2, #4
 8000bfc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <MX_QUADSPI_Init+0x50>)
 8000c00:	2210      	movs	r2, #16
 8000c02:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <MX_QUADSPI_Init+0x50>)
 8000c06:	2218      	movs	r2, #24
 8000c08:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <MX_QUADSPI_Init+0x50>)
 8000c0c:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000c10:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c12:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <MX_QUADSPI_Init+0x50>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000c18:	4b07      	ldr	r3, [pc, #28]	@ (8000c38 <MX_QUADSPI_Init+0x50>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <MX_QUADSPI_Init+0x50>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c24:	4804      	ldr	r0, [pc, #16]	@ (8000c38 <MX_QUADSPI_Init+0x50>)
 8000c26:	f006 fbe1 	bl	80073ec <HAL_QSPI_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000c30:	f000 ff24 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000768 	.word	0x20000768
 8000c3c:	a0001000 	.word	0xa0001000

08000c40 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b090      	sub	sp, #64	@ 0x40
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c56:	2300      	movs	r3, #0
 8000c58:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	2228      	movs	r2, #40	@ 0x28
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f012 fe9d 	bl	80139a0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c66:	4b46      	ldr	r3, [pc, #280]	@ (8000d80 <MX_RTC_Init+0x140>)
 8000c68:	4a46      	ldr	r2, [pc, #280]	@ (8000d84 <MX_RTC_Init+0x144>)
 8000c6a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c6c:	4b44      	ldr	r3, [pc, #272]	@ (8000d80 <MX_RTC_Init+0x140>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c72:	4b43      	ldr	r3, [pc, #268]	@ (8000d80 <MX_RTC_Init+0x140>)
 8000c74:	227f      	movs	r2, #127	@ 0x7f
 8000c76:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c78:	4b41      	ldr	r3, [pc, #260]	@ (8000d80 <MX_RTC_Init+0x140>)
 8000c7a:	22ff      	movs	r2, #255	@ 0xff
 8000c7c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c7e:	4b40      	ldr	r3, [pc, #256]	@ (8000d80 <MX_RTC_Init+0x140>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c84:	4b3e      	ldr	r3, [pc, #248]	@ (8000d80 <MX_RTC_Init+0x140>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c8a:	4b3d      	ldr	r3, [pc, #244]	@ (8000d80 <MX_RTC_Init+0x140>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c90:	483b      	ldr	r0, [pc, #236]	@ (8000d80 <MX_RTC_Init+0x140>)
 8000c92:	f007 fe59 	bl	8008948 <HAL_RTC_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000c9c:	f000 feee 	bl	8001a7c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000cba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	482f      	ldr	r0, [pc, #188]	@ (8000d80 <MX_RTC_Init+0x140>)
 8000cc4:	f007 fec2 	bl	8008a4c <HAL_RTC_SetTime>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000cce:	f000 fed5 	bl	8001a7c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000cea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4823      	ldr	r0, [pc, #140]	@ (8000d80 <MX_RTC_Init+0x140>)
 8000cf4:	f007 ff44 	bl	8008b80 <HAL_RTC_SetDate>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000cfe:	f000 febd 	bl	8001a7c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000d26:	2301      	movs	r3, #1
 8000d28:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000d2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d30:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d32:	463b      	mov	r3, r7
 8000d34:	2201      	movs	r2, #1
 8000d36:	4619      	mov	r1, r3
 8000d38:	4811      	ldr	r0, [pc, #68]	@ (8000d80 <MX_RTC_Init+0x140>)
 8000d3a:	f007 ffa5 	bl	8008c88 <HAL_RTC_SetAlarm>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000d44:	f000 fe9a 	bl	8001a7c <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000d48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d4e:	463b      	mov	r3, r7
 8000d50:	2201      	movs	r2, #1
 8000d52:	4619      	mov	r1, r3
 8000d54:	480a      	ldr	r0, [pc, #40]	@ (8000d80 <MX_RTC_Init+0x140>)
 8000d56:	f007 ff97 	bl	8008c88 <HAL_RTC_SetAlarm>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8000d60:	f000 fe8c 	bl	8001a7c <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000d64:	2202      	movs	r2, #2
 8000d66:	2100      	movs	r1, #0
 8000d68:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <MX_RTC_Init+0x140>)
 8000d6a:	f008 f957 	bl	800901c <HAL_RTCEx_SetTimeStamp>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8000d74:	f000 fe82 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	3740      	adds	r7, #64	@ 0x40
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200007b4 	.word	0x200007b4
 8000d84:	40002800 	.word	0x40002800

08000d88 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000d8c:	4b4d      	ldr	r3, [pc, #308]	@ (8000ec4 <MX_SAI2_Init+0x13c>)
 8000d8e:	4a4e      	ldr	r2, [pc, #312]	@ (8000ec8 <MX_SAI2_Init+0x140>)
 8000d90:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d92:	4b4c      	ldr	r3, [pc, #304]	@ (8000ec4 <MX_SAI2_Init+0x13c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000d98:	4b4a      	ldr	r3, [pc, #296]	@ (8000ec4 <MX_SAI2_Init+0x13c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000d9e:	4b49      	ldr	r3, [pc, #292]	@ (8000ec4 <MX_SAI2_Init+0x13c>)
 8000da0:	2240      	movs	r2, #64	@ 0x40
 8000da2:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000da4:	4b47      	ldr	r3, [pc, #284]	@ (8000ec4 <MX_SAI2_Init+0x13c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000daa:	4b46      	ldr	r3, [pc, #280]	@ (8000ec4 <MX_SAI2_Init+0x13c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000db0:	4b44      	ldr	r3, [pc, #272]	@ (8000ec4 <MX_SAI2_Init+0x13c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000db6:	4b43      	ldr	r3, [pc, #268]	@ (8000ec4 <MX_SAI2_Init+0x13c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000dbc:	4b41      	ldr	r3, [pc, #260]	@ (8000ec4 <MX_SAI2_Init+0x13c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000dc2:	4b40      	ldr	r3, [pc, #256]	@ (8000ec4 <MX_SAI2_Init+0x13c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000dc8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ec4 <MX_SAI2_Init+0x13c>)
 8000dca:	4a40      	ldr	r2, [pc, #256]	@ (8000ecc <MX_SAI2_Init+0x144>)
 8000dcc:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000dce:	4b3d      	ldr	r3, [pc, #244]	@ (8000ec4 <MX_SAI2_Init+0x13c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ec4 <MX_SAI2_Init+0x13c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000dda:	4b3a      	ldr	r3, [pc, #232]	@ (8000ec4 <MX_SAI2_Init+0x13c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000de0:	4b38      	ldr	r3, [pc, #224]	@ (8000ec4 <MX_SAI2_Init+0x13c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000de6:	4b37      	ldr	r3, [pc, #220]	@ (8000ec4 <MX_SAI2_Init+0x13c>)
 8000de8:	2208      	movs	r2, #8
 8000dea:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000dec:	4b35      	ldr	r3, [pc, #212]	@ (8000ec4 <MX_SAI2_Init+0x13c>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000df2:	4b34      	ldr	r3, [pc, #208]	@ (8000ec4 <MX_SAI2_Init+0x13c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000df8:	4b32      	ldr	r3, [pc, #200]	@ (8000ec4 <MX_SAI2_Init+0x13c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000dfe:	4b31      	ldr	r3, [pc, #196]	@ (8000ec4 <MX_SAI2_Init+0x13c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000e04:	4b2f      	ldr	r3, [pc, #188]	@ (8000ec4 <MX_SAI2_Init+0x13c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e0a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ec4 <MX_SAI2_Init+0x13c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000e10:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec4 <MX_SAI2_Init+0x13c>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000e16:	4b2b      	ldr	r3, [pc, #172]	@ (8000ec4 <MX_SAI2_Init+0x13c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000e1c:	4829      	ldr	r0, [pc, #164]	@ (8000ec4 <MX_SAI2_Init+0x13c>)
 8000e1e:	f008 f965 	bl	80090ec <HAL_SAI_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000e28:	f000 fe28 	bl	8001a7c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000e2c:	4b28      	ldr	r3, [pc, #160]	@ (8000ed0 <MX_SAI2_Init+0x148>)
 8000e2e:	4a29      	ldr	r2, [pc, #164]	@ (8000ed4 <MX_SAI2_Init+0x14c>)
 8000e30:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e32:	4b27      	ldr	r3, [pc, #156]	@ (8000ed0 <MX_SAI2_Init+0x148>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000e38:	4b25      	ldr	r3, [pc, #148]	@ (8000ed0 <MX_SAI2_Init+0x148>)
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000e3e:	4b24      	ldr	r3, [pc, #144]	@ (8000ed0 <MX_SAI2_Init+0x148>)
 8000e40:	2240      	movs	r2, #64	@ 0x40
 8000e42:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e44:	4b22      	ldr	r3, [pc, #136]	@ (8000ed0 <MX_SAI2_Init+0x148>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e4a:	4b21      	ldr	r3, [pc, #132]	@ (8000ed0 <MX_SAI2_Init+0x148>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000e50:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed0 <MX_SAI2_Init+0x148>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e56:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed0 <MX_SAI2_Init+0x148>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed0 <MX_SAI2_Init+0x148>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e62:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed0 <MX_SAI2_Init+0x148>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e68:	4b19      	ldr	r3, [pc, #100]	@ (8000ed0 <MX_SAI2_Init+0x148>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e6e:	4b18      	ldr	r3, [pc, #96]	@ (8000ed0 <MX_SAI2_Init+0x148>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e74:	4b16      	ldr	r3, [pc, #88]	@ (8000ed0 <MX_SAI2_Init+0x148>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000e7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <MX_SAI2_Init+0x148>)
 8000e7c:	2208      	movs	r2, #8
 8000e7e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000e80:	4b13      	ldr	r3, [pc, #76]	@ (8000ed0 <MX_SAI2_Init+0x148>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e86:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <MX_SAI2_Init+0x148>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e8c:	4b10      	ldr	r3, [pc, #64]	@ (8000ed0 <MX_SAI2_Init+0x148>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e92:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed0 <MX_SAI2_Init+0x148>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000e98:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed0 <MX_SAI2_Init+0x148>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <MX_SAI2_Init+0x148>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed0 <MX_SAI2_Init+0x148>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000eaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <MX_SAI2_Init+0x148>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000eb0:	4807      	ldr	r0, [pc, #28]	@ (8000ed0 <MX_SAI2_Init+0x148>)
 8000eb2:	f008 f91b 	bl	80090ec <HAL_SAI_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000ebc:	f000 fdde 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	200007d4 	.word	0x200007d4
 8000ec8:	40015c04 	.word	0x40015c04
 8000ecc:	0002ee00 	.word	0x0002ee00
 8000ed0:	20000858 	.word	0x20000858
 8000ed4:	40015c24 	.word	0x40015c24

08000ed8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000edc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f14 <MX_SDMMC1_SD_Init+0x3c>)
 8000ede:	4a0e      	ldr	r2, [pc, #56]	@ (8000f18 <MX_SDMMC1_SD_Init+0x40>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <MX_SDMMC1_SD_Init+0x3c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f14 <MX_SDMMC1_SD_Init+0x3c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000eee:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <MX_SDMMC1_SD_Init+0x3c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000ef4:	4b07      	ldr	r3, [pc, #28]	@ (8000f14 <MX_SDMMC1_SD_Init+0x3c>)
 8000ef6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000efa:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000efc:	4b05      	ldr	r3, [pc, #20]	@ (8000f14 <MX_SDMMC1_SD_Init+0x3c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000f02:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <MX_SDMMC1_SD_Init+0x3c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	200008dc 	.word	0x200008dc
 8000f18:	40012c00 	.word	0x40012c00

08000f1c <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000f20:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <MX_SPDIFRX_Init+0x5c>)
 8000f22:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8000f26:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000f28:	4b13      	ldr	r3, [pc, #76]	@ (8000f78 <MX_SPDIFRX_Init+0x5c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000f2e:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <MX_SPDIFRX_Init+0x5c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000f34:	4b10      	ldr	r3, [pc, #64]	@ (8000f78 <MX_SPDIFRX_Init+0x5c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f78 <MX_SPDIFRX_Init+0x5c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000f40:	4b0d      	ldr	r3, [pc, #52]	@ (8000f78 <MX_SPDIFRX_Init+0x5c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000f46:	4b0c      	ldr	r3, [pc, #48]	@ (8000f78 <MX_SPDIFRX_Init+0x5c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <MX_SPDIFRX_Init+0x5c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000f52:	4b09      	ldr	r3, [pc, #36]	@ (8000f78 <MX_SPDIFRX_Init+0x5c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000f58:	4b07      	ldr	r3, [pc, #28]	@ (8000f78 <MX_SPDIFRX_Init+0x5c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000f5e:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <MX_SPDIFRX_Init+0x5c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000f64:	4804      	ldr	r0, [pc, #16]	@ (8000f78 <MX_SPDIFRX_Init+0x5c>)
 8000f66:	f009 fb45 	bl	800a5f4 <HAL_SPDIFRX_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8000f70:	f000 fd84 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000960 	.word	0x20000960

08000f7c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f80:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff0 <MX_SPI2_Init+0x74>)
 8000f82:	4a1c      	ldr	r2, [pc, #112]	@ (8000ff4 <MX_SPI2_Init+0x78>)
 8000f84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f86:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff0 <MX_SPI2_Init+0x74>)
 8000f88:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f8e:	4b18      	ldr	r3, [pc, #96]	@ (8000ff0 <MX_SPI2_Init+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f94:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <MX_SPI2_Init+0x74>)
 8000f96:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000f9a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f9c:	4b14      	ldr	r3, [pc, #80]	@ (8000ff0 <MX_SPI2_Init+0x74>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fa2:	4b13      	ldr	r3, [pc, #76]	@ (8000ff0 <MX_SPI2_Init+0x74>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <MX_SPI2_Init+0x74>)
 8000faa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <MX_SPI2_Init+0x74>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff0 <MX_SPI2_Init+0x74>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <MX_SPI2_Init+0x74>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <MX_SPI2_Init+0x74>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	@ (8000ff0 <MX_SPI2_Init+0x74>)
 8000fca:	2207      	movs	r2, #7
 8000fcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fce:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <MX_SPI2_Init+0x74>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <MX_SPI2_Init+0x74>)
 8000fd6:	2208      	movs	r2, #8
 8000fd8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fda:	4805      	ldr	r0, [pc, #20]	@ (8000ff0 <MX_SPI2_Init+0x74>)
 8000fdc:	f009 fb66 	bl	800a6ac <HAL_SPI_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000fe6:	f000 fd49 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200009ac 	.word	0x200009ac
 8000ff4:	40003800 	.word	0x40003800

08000ff8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b09a      	sub	sp, #104	@ 0x68
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffe:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800100c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001018:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
 8001028:	615a      	str	r2, [r3, #20]
 800102a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	222c      	movs	r2, #44	@ 0x2c
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f012 fcb4 	bl	80139a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001038:	4b43      	ldr	r3, [pc, #268]	@ (8001148 <MX_TIM1_Init+0x150>)
 800103a:	4a44      	ldr	r2, [pc, #272]	@ (800114c <MX_TIM1_Init+0x154>)
 800103c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800103e:	4b42      	ldr	r3, [pc, #264]	@ (8001148 <MX_TIM1_Init+0x150>)
 8001040:	2200      	movs	r2, #0
 8001042:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001044:	4b40      	ldr	r3, [pc, #256]	@ (8001148 <MX_TIM1_Init+0x150>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800104a:	4b3f      	ldr	r3, [pc, #252]	@ (8001148 <MX_TIM1_Init+0x150>)
 800104c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001050:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001052:	4b3d      	ldr	r3, [pc, #244]	@ (8001148 <MX_TIM1_Init+0x150>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001058:	4b3b      	ldr	r3, [pc, #236]	@ (8001148 <MX_TIM1_Init+0x150>)
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105e:	4b3a      	ldr	r3, [pc, #232]	@ (8001148 <MX_TIM1_Init+0x150>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001064:	4838      	ldr	r0, [pc, #224]	@ (8001148 <MX_TIM1_Init+0x150>)
 8001066:	f009 fbcc 	bl	800a802 <HAL_TIM_Base_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001070:	f000 fd04 	bl	8001a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001074:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001078:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800107a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800107e:	4619      	mov	r1, r3
 8001080:	4831      	ldr	r0, [pc, #196]	@ (8001148 <MX_TIM1_Init+0x150>)
 8001082:	f009 feff 	bl	800ae84 <HAL_TIM_ConfigClockSource>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800108c:	f000 fcf6 	bl	8001a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001090:	482d      	ldr	r0, [pc, #180]	@ (8001148 <MX_TIM1_Init+0x150>)
 8001092:	f009 fc85 	bl	800a9a0 <HAL_TIM_PWM_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800109c:	f000 fcee 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010a4:	2300      	movs	r3, #0
 80010a6:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010ac:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80010b0:	4619      	mov	r1, r3
 80010b2:	4825      	ldr	r0, [pc, #148]	@ (8001148 <MX_TIM1_Init+0x150>)
 80010b4:	f00a fb76 	bl	800b7a4 <HAL_TIMEx_MasterConfigSynchronization>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80010be:	f000 fcdd 	bl	8001a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c2:	2360      	movs	r3, #96	@ 0x60
 80010c4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ca:	2300      	movs	r3, #0
 80010cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010ce:	2300      	movs	r3, #0
 80010d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010d6:	2300      	movs	r3, #0
 80010d8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010da:	2300      	movs	r3, #0
 80010dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010e2:	2200      	movs	r2, #0
 80010e4:	4619      	mov	r1, r3
 80010e6:	4818      	ldr	r0, [pc, #96]	@ (8001148 <MX_TIM1_Init+0x150>)
 80010e8:	f009 fdb8 	bl	800ac5c <HAL_TIM_PWM_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80010f2:	f000 fcc3 	bl	8001a7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800110a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800110e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001118:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800111c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	4619      	mov	r1, r3
 800112a:	4807      	ldr	r0, [pc, #28]	@ (8001148 <MX_TIM1_Init+0x150>)
 800112c:	f00a fbc8 	bl	800b8c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001136:	f000 fca1 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800113a:	4803      	ldr	r0, [pc, #12]	@ (8001148 <MX_TIM1_Init+0x150>)
 800113c:	f001 faa6 	bl	800268c <HAL_TIM_MspPostInit>

}
 8001140:	bf00      	nop
 8001142:	3768      	adds	r7, #104	@ 0x68
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000a10 	.word	0x20000a10
 800114c:	40010000 	.word	0x40010000

08001150 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08e      	sub	sp, #56	@ 0x38
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001156:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001170:	463b      	mov	r3, r7
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	611a      	str	r2, [r3, #16]
 800117e:	615a      	str	r2, [r3, #20]
 8001180:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001182:	4b2d      	ldr	r3, [pc, #180]	@ (8001238 <MX_TIM2_Init+0xe8>)
 8001184:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001188:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800118a:	4b2b      	ldr	r3, [pc, #172]	@ (8001238 <MX_TIM2_Init+0xe8>)
 800118c:	2200      	movs	r2, #0
 800118e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001190:	4b29      	ldr	r3, [pc, #164]	@ (8001238 <MX_TIM2_Init+0xe8>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001196:	4b28      	ldr	r3, [pc, #160]	@ (8001238 <MX_TIM2_Init+0xe8>)
 8001198:	f04f 32ff 	mov.w	r2, #4294967295
 800119c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119e:	4b26      	ldr	r3, [pc, #152]	@ (8001238 <MX_TIM2_Init+0xe8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a4:	4b24      	ldr	r3, [pc, #144]	@ (8001238 <MX_TIM2_Init+0xe8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011aa:	4823      	ldr	r0, [pc, #140]	@ (8001238 <MX_TIM2_Init+0xe8>)
 80011ac:	f009 fb29 	bl	800a802 <HAL_TIM_Base_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80011b6:	f000 fc61 	bl	8001a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011be:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011c4:	4619      	mov	r1, r3
 80011c6:	481c      	ldr	r0, [pc, #112]	@ (8001238 <MX_TIM2_Init+0xe8>)
 80011c8:	f009 fe5c 	bl	800ae84 <HAL_TIM_ConfigClockSource>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80011d2:	f000 fc53 	bl	8001a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011d6:	4818      	ldr	r0, [pc, #96]	@ (8001238 <MX_TIM2_Init+0xe8>)
 80011d8:	f009 fbe2 	bl	800a9a0 <HAL_TIM_PWM_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80011e2:	f000 fc4b 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	4619      	mov	r1, r3
 80011f4:	4810      	ldr	r0, [pc, #64]	@ (8001238 <MX_TIM2_Init+0xe8>)
 80011f6:	f00a fad5 	bl	800b7a4 <HAL_TIMEx_MasterConfigSynchronization>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001200:	f000 fc3c 	bl	8001a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001204:	2360      	movs	r3, #96	@ 0x60
 8001206:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	2200      	movs	r2, #0
 8001218:	4619      	mov	r1, r3
 800121a:	4807      	ldr	r0, [pc, #28]	@ (8001238 <MX_TIM2_Init+0xe8>)
 800121c:	f009 fd1e 	bl	800ac5c <HAL_TIM_PWM_ConfigChannel>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001226:	f000 fc29 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800122a:	4803      	ldr	r0, [pc, #12]	@ (8001238 <MX_TIM2_Init+0xe8>)
 800122c:	f001 fa2e 	bl	800268c <HAL_TIM_MspPostInit>

}
 8001230:	bf00      	nop
 8001232:	3738      	adds	r7, #56	@ 0x38
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000a5c 	.word	0x20000a5c

0800123c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08e      	sub	sp, #56	@ 0x38
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001242:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800125c:	463b      	mov	r3, r7
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]
 800126a:	615a      	str	r2, [r3, #20]
 800126c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800126e:	4b2d      	ldr	r3, [pc, #180]	@ (8001324 <MX_TIM3_Init+0xe8>)
 8001270:	4a2d      	ldr	r2, [pc, #180]	@ (8001328 <MX_TIM3_Init+0xec>)
 8001272:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001274:	4b2b      	ldr	r3, [pc, #172]	@ (8001324 <MX_TIM3_Init+0xe8>)
 8001276:	2200      	movs	r2, #0
 8001278:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127a:	4b2a      	ldr	r3, [pc, #168]	@ (8001324 <MX_TIM3_Init+0xe8>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001280:	4b28      	ldr	r3, [pc, #160]	@ (8001324 <MX_TIM3_Init+0xe8>)
 8001282:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001286:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001288:	4b26      	ldr	r3, [pc, #152]	@ (8001324 <MX_TIM3_Init+0xe8>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128e:	4b25      	ldr	r3, [pc, #148]	@ (8001324 <MX_TIM3_Init+0xe8>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001294:	4823      	ldr	r0, [pc, #140]	@ (8001324 <MX_TIM3_Init+0xe8>)
 8001296:	f009 fab4 	bl	800a802 <HAL_TIM_Base_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80012a0:	f000 fbec 	bl	8001a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012ae:	4619      	mov	r1, r3
 80012b0:	481c      	ldr	r0, [pc, #112]	@ (8001324 <MX_TIM3_Init+0xe8>)
 80012b2:	f009 fde7 	bl	800ae84 <HAL_TIM_ConfigClockSource>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80012bc:	f000 fbde 	bl	8001a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012c0:	4818      	ldr	r0, [pc, #96]	@ (8001324 <MX_TIM3_Init+0xe8>)
 80012c2:	f009 fb6d 	bl	800a9a0 <HAL_TIM_PWM_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80012cc:	f000 fbd6 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012d8:	f107 031c 	add.w	r3, r7, #28
 80012dc:	4619      	mov	r1, r3
 80012de:	4811      	ldr	r0, [pc, #68]	@ (8001324 <MX_TIM3_Init+0xe8>)
 80012e0:	f00a fa60 	bl	800b7a4 <HAL_TIMEx_MasterConfigSynchronization>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80012ea:	f000 fbc7 	bl	8001a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ee:	2360      	movs	r3, #96	@ 0x60
 80012f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012fe:	463b      	mov	r3, r7
 8001300:	2200      	movs	r2, #0
 8001302:	4619      	mov	r1, r3
 8001304:	4807      	ldr	r0, [pc, #28]	@ (8001324 <MX_TIM3_Init+0xe8>)
 8001306:	f009 fca9 	bl	800ac5c <HAL_TIM_PWM_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001310:	f000 fbb4 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001314:	4803      	ldr	r0, [pc, #12]	@ (8001324 <MX_TIM3_Init+0xe8>)
 8001316:	f001 f9b9 	bl	800268c <HAL_TIM_MspPostInit>

}
 800131a:	bf00      	nop
 800131c:	3738      	adds	r7, #56	@ 0x38
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000aa8 	.word	0x20000aa8
 8001328:	40000400 	.word	0x40000400

0800132c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08e      	sub	sp, #56	@ 0x38
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001332:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800134c:	463b      	mov	r3, r7
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]
 800135a:	615a      	str	r2, [r3, #20]
 800135c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800135e:	4b2d      	ldr	r3, [pc, #180]	@ (8001414 <MX_TIM5_Init+0xe8>)
 8001360:	4a2d      	ldr	r2, [pc, #180]	@ (8001418 <MX_TIM5_Init+0xec>)
 8001362:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001364:	4b2b      	ldr	r3, [pc, #172]	@ (8001414 <MX_TIM5_Init+0xe8>)
 8001366:	2200      	movs	r2, #0
 8001368:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136a:	4b2a      	ldr	r3, [pc, #168]	@ (8001414 <MX_TIM5_Init+0xe8>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001370:	4b28      	ldr	r3, [pc, #160]	@ (8001414 <MX_TIM5_Init+0xe8>)
 8001372:	f04f 32ff 	mov.w	r2, #4294967295
 8001376:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001378:	4b26      	ldr	r3, [pc, #152]	@ (8001414 <MX_TIM5_Init+0xe8>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137e:	4b25      	ldr	r3, [pc, #148]	@ (8001414 <MX_TIM5_Init+0xe8>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001384:	4823      	ldr	r0, [pc, #140]	@ (8001414 <MX_TIM5_Init+0xe8>)
 8001386:	f009 fa3c 	bl	800a802 <HAL_TIM_Base_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001390:	f000 fb74 	bl	8001a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001394:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001398:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800139a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800139e:	4619      	mov	r1, r3
 80013a0:	481c      	ldr	r0, [pc, #112]	@ (8001414 <MX_TIM5_Init+0xe8>)
 80013a2:	f009 fd6f 	bl	800ae84 <HAL_TIM_ConfigClockSource>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80013ac:	f000 fb66 	bl	8001a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80013b0:	4818      	ldr	r0, [pc, #96]	@ (8001414 <MX_TIM5_Init+0xe8>)
 80013b2:	f009 faf5 	bl	800a9a0 <HAL_TIM_PWM_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80013bc:	f000 fb5e 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4619      	mov	r1, r3
 80013ce:	4811      	ldr	r0, [pc, #68]	@ (8001414 <MX_TIM5_Init+0xe8>)
 80013d0:	f00a f9e8 	bl	800b7a4 <HAL_TIMEx_MasterConfigSynchronization>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80013da:	f000 fb4f 	bl	8001a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013de:	2360      	movs	r3, #96	@ 0x60
 80013e0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013ee:	463b      	mov	r3, r7
 80013f0:	220c      	movs	r2, #12
 80013f2:	4619      	mov	r1, r3
 80013f4:	4807      	ldr	r0, [pc, #28]	@ (8001414 <MX_TIM5_Init+0xe8>)
 80013f6:	f009 fc31 	bl	800ac5c <HAL_TIM_PWM_ConfigChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001400:	f000 fb3c 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001404:	4803      	ldr	r0, [pc, #12]	@ (8001414 <MX_TIM5_Init+0xe8>)
 8001406:	f001 f941 	bl	800268c <HAL_TIM_MspPostInit>

}
 800140a:	bf00      	nop
 800140c:	3738      	adds	r7, #56	@ 0x38
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000af4 	.word	0x20000af4
 8001418:	40000c00 	.word	0x40000c00

0800141c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001422:	f107 0310 	add.w	r3, r7, #16
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800143a:	4b20      	ldr	r3, [pc, #128]	@ (80014bc <MX_TIM8_Init+0xa0>)
 800143c:	4a20      	ldr	r2, [pc, #128]	@ (80014c0 <MX_TIM8_Init+0xa4>)
 800143e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001440:	4b1e      	ldr	r3, [pc, #120]	@ (80014bc <MX_TIM8_Init+0xa0>)
 8001442:	2200      	movs	r2, #0
 8001444:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001446:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <MX_TIM8_Init+0xa0>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800144c:	4b1b      	ldr	r3, [pc, #108]	@ (80014bc <MX_TIM8_Init+0xa0>)
 800144e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001452:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001454:	4b19      	ldr	r3, [pc, #100]	@ (80014bc <MX_TIM8_Init+0xa0>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800145a:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <MX_TIM8_Init+0xa0>)
 800145c:	2200      	movs	r2, #0
 800145e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001460:	4b16      	ldr	r3, [pc, #88]	@ (80014bc <MX_TIM8_Init+0xa0>)
 8001462:	2200      	movs	r2, #0
 8001464:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001466:	4815      	ldr	r0, [pc, #84]	@ (80014bc <MX_TIM8_Init+0xa0>)
 8001468:	f009 f9cb 	bl	800a802 <HAL_TIM_Base_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001472:	f000 fb03 	bl	8001a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001476:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800147a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	4619      	mov	r1, r3
 8001482:	480e      	ldr	r0, [pc, #56]	@ (80014bc <MX_TIM8_Init+0xa0>)
 8001484:	f009 fcfe 	bl	800ae84 <HAL_TIM_ConfigClockSource>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800148e:	f000 faf5 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	4619      	mov	r1, r3
 80014a2:	4806      	ldr	r0, [pc, #24]	@ (80014bc <MX_TIM8_Init+0xa0>)
 80014a4:	f00a f97e 	bl	800b7a4 <HAL_TIMEx_MasterConfigSynchronization>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80014ae:	f000 fae5 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	3720      	adds	r7, #32
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000b40 	.word	0x20000b40
 80014c0:	40010400 	.word	0x40010400

080014c4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
 80014d8:	615a      	str	r2, [r3, #20]
 80014da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80014dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <MX_TIM12_Init+0x84>)
 80014de:	4a1b      	ldr	r2, [pc, #108]	@ (800154c <MX_TIM12_Init+0x88>)
 80014e0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80014e2:	4b19      	ldr	r3, [pc, #100]	@ (8001548 <MX_TIM12_Init+0x84>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e8:	4b17      	ldr	r3, [pc, #92]	@ (8001548 <MX_TIM12_Init+0x84>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80014ee:	4b16      	ldr	r3, [pc, #88]	@ (8001548 <MX_TIM12_Init+0x84>)
 80014f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014f4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f6:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <MX_TIM12_Init+0x84>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fc:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <MX_TIM12_Init+0x84>)
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001502:	4811      	ldr	r0, [pc, #68]	@ (8001548 <MX_TIM12_Init+0x84>)
 8001504:	f009 fa4c 	bl	800a9a0 <HAL_TIM_PWM_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800150e:	f000 fab5 	bl	8001a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001512:	2360      	movs	r3, #96	@ 0x60
 8001514:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2200      	movs	r2, #0
 8001526:	4619      	mov	r1, r3
 8001528:	4807      	ldr	r0, [pc, #28]	@ (8001548 <MX_TIM12_Init+0x84>)
 800152a:	f009 fb97 	bl	800ac5c <HAL_TIM_PWM_ConfigChannel>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001534:	f000 faa2 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001538:	4803      	ldr	r0, [pc, #12]	@ (8001548 <MX_TIM12_Init+0x84>)
 800153a:	f001 f8a7 	bl	800268c <HAL_TIM_MspPostInit>

}
 800153e:	bf00      	nop
 8001540:	3720      	adds	r7, #32
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000b8c 	.word	0x20000b8c
 800154c:	40001800 	.word	0x40001800

08001550 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001554:	4b14      	ldr	r3, [pc, #80]	@ (80015a8 <MX_USART1_UART_Init+0x58>)
 8001556:	4a15      	ldr	r2, [pc, #84]	@ (80015ac <MX_USART1_UART_Init+0x5c>)
 8001558:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800155a:	4b13      	ldr	r3, [pc, #76]	@ (80015a8 <MX_USART1_UART_Init+0x58>)
 800155c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001560:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001562:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <MX_USART1_UART_Init+0x58>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001568:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <MX_USART1_UART_Init+0x58>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800156e:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <MX_USART1_UART_Init+0x58>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001574:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <MX_USART1_UART_Init+0x58>)
 8001576:	220c      	movs	r2, #12
 8001578:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157a:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <MX_USART1_UART_Init+0x58>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001580:	4b09      	ldr	r3, [pc, #36]	@ (80015a8 <MX_USART1_UART_Init+0x58>)
 8001582:	2200      	movs	r2, #0
 8001584:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001586:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <MX_USART1_UART_Init+0x58>)
 8001588:	2200      	movs	r2, #0
 800158a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800158c:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <MX_USART1_UART_Init+0x58>)
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001592:	4805      	ldr	r0, [pc, #20]	@ (80015a8 <MX_USART1_UART_Init+0x58>)
 8001594:	f00a fa30 	bl	800b9f8 <HAL_UART_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800159e:	f000 fa6d 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000bd8 	.word	0x20000bd8
 80015ac:	40011000 	.word	0x40011000

080015b0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80015b4:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <MX_USART6_UART_Init+0x58>)
 80015b6:	4a15      	ldr	r2, [pc, #84]	@ (800160c <MX_USART6_UART_Init+0x5c>)
 80015b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80015ba:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <MX_USART6_UART_Init+0x58>)
 80015bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015c0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80015c2:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <MX_USART6_UART_Init+0x58>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <MX_USART6_UART_Init+0x58>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <MX_USART6_UART_Init+0x58>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <MX_USART6_UART_Init+0x58>)
 80015d6:	220c      	movs	r2, #12
 80015d8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015da:	4b0b      	ldr	r3, [pc, #44]	@ (8001608 <MX_USART6_UART_Init+0x58>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e0:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <MX_USART6_UART_Init+0x58>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015e6:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <MX_USART6_UART_Init+0x58>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ec:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <MX_USART6_UART_Init+0x58>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015f2:	4805      	ldr	r0, [pc, #20]	@ (8001608 <MX_USART6_UART_Init+0x58>)
 80015f4:	f00a fa00 	bl	800b9f8 <HAL_UART_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80015fe:	f000 fa3d 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000c60 	.word	0x20000c60
 800160c:	40011400 	.word	0x40011400

08001610 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
 8001624:	615a      	str	r2, [r3, #20]
 8001626:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001628:	4b1f      	ldr	r3, [pc, #124]	@ (80016a8 <MX_FMC_Init+0x98>)
 800162a:	4a20      	ldr	r2, [pc, #128]	@ (80016ac <MX_FMC_Init+0x9c>)
 800162c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800162e:	4b1e      	ldr	r3, [pc, #120]	@ (80016a8 <MX_FMC_Init+0x98>)
 8001630:	2200      	movs	r2, #0
 8001632:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001634:	4b1c      	ldr	r3, [pc, #112]	@ (80016a8 <MX_FMC_Init+0x98>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800163a:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <MX_FMC_Init+0x98>)
 800163c:	2204      	movs	r2, #4
 800163e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001640:	4b19      	ldr	r3, [pc, #100]	@ (80016a8 <MX_FMC_Init+0x98>)
 8001642:	2210      	movs	r2, #16
 8001644:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001646:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <MX_FMC_Init+0x98>)
 8001648:	2240      	movs	r2, #64	@ 0x40
 800164a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800164c:	4b16      	ldr	r3, [pc, #88]	@ (80016a8 <MX_FMC_Init+0x98>)
 800164e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001652:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001654:	4b14      	ldr	r3, [pc, #80]	@ (80016a8 <MX_FMC_Init+0x98>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800165a:	4b13      	ldr	r3, [pc, #76]	@ (80016a8 <MX_FMC_Init+0x98>)
 800165c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001660:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001662:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <MX_FMC_Init+0x98>)
 8001664:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001668:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800166a:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <MX_FMC_Init+0x98>)
 800166c:	2200      	movs	r2, #0
 800166e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001670:	2302      	movs	r3, #2
 8001672:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001674:	2307      	movs	r3, #7
 8001676:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001678:	2304      	movs	r3, #4
 800167a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800167c:	2307      	movs	r3, #7
 800167e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001680:	2303      	movs	r3, #3
 8001682:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001684:	2302      	movs	r3, #2
 8001686:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001688:	2302      	movs	r3, #2
 800168a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	4619      	mov	r1, r3
 8001690:	4805      	ldr	r0, [pc, #20]	@ (80016a8 <MX_FMC_Init+0x98>)
 8001692:	f008 ff7a 	bl	800a58a <HAL_SDRAM_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800169c:	f000 f9ee 	bl	8001a7c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80016a0:	bf00      	nop
 80016a2:	3720      	adds	r7, #32
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000ce8 	.word	0x20000ce8
 80016ac:	a0000140 	.word	0xa0000140

080016b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b090      	sub	sp, #64	@ 0x40
 80016b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016c6:	4bb0      	ldr	r3, [pc, #704]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	4aaf      	ldr	r2, [pc, #700]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 80016cc:	f043 0310 	orr.w	r3, r3, #16
 80016d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d2:	4bad      	ldr	r3, [pc, #692]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	f003 0310 	and.w	r3, r3, #16
 80016da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016de:	4baa      	ldr	r3, [pc, #680]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	4aa9      	ldr	r2, [pc, #676]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 80016e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ea:	4ba7      	ldr	r3, [pc, #668]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80016f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	4ba4      	ldr	r3, [pc, #656]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	4aa3      	ldr	r2, [pc, #652]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	6313      	str	r3, [r2, #48]	@ 0x30
 8001702:	4ba1      	ldr	r3, [pc, #644]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	623b      	str	r3, [r7, #32]
 800170c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800170e:	4b9e      	ldr	r3, [pc, #632]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	4a9d      	ldr	r2, [pc, #628]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 8001714:	f043 0308 	orr.w	r3, r3, #8
 8001718:	6313      	str	r3, [r2, #48]	@ 0x30
 800171a:	4b9b      	ldr	r3, [pc, #620]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	61fb      	str	r3, [r7, #28]
 8001724:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001726:	4b98      	ldr	r3, [pc, #608]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	4a97      	ldr	r2, [pc, #604]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	6313      	str	r3, [r2, #48]	@ 0x30
 8001732:	4b95      	ldr	r3, [pc, #596]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	61bb      	str	r3, [r7, #24]
 800173c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800173e:	4b92      	ldr	r3, [pc, #584]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	4a91      	ldr	r2, [pc, #580]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6313      	str	r3, [r2, #48]	@ 0x30
 800174a:	4b8f      	ldr	r3, [pc, #572]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001756:	4b8c      	ldr	r3, [pc, #560]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	4a8b      	ldr	r2, [pc, #556]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 800175c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001760:	6313      	str	r3, [r2, #48]	@ 0x30
 8001762:	4b89      	ldr	r3, [pc, #548]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800176e:	4b86      	ldr	r3, [pc, #536]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	4a85      	ldr	r2, [pc, #532]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 8001774:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001778:	6313      	str	r3, [r2, #48]	@ 0x30
 800177a:	4b83      	ldr	r3, [pc, #524]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001786:	4b80      	ldr	r3, [pc, #512]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	4a7f      	ldr	r2, [pc, #508]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 800178c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001790:	6313      	str	r3, [r2, #48]	@ 0x30
 8001792:	4b7d      	ldr	r3, [pc, #500]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800179e:	4b7a      	ldr	r3, [pc, #488]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	4a79      	ldr	r2, [pc, #484]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 80017a4:	f043 0320 	orr.w	r3, r3, #32
 80017a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017aa:	4b77      	ldr	r3, [pc, #476]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	f003 0320 	and.w	r3, r3, #32
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017b6:	4b74      	ldr	r3, [pc, #464]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	4a73      	ldr	r2, [pc, #460]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 80017bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c2:	4b71      	ldr	r3, [pc, #452]	@ (8001988 <MX_GPIO_Init+0x2d8>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80017ce:	2201      	movs	r2, #1
 80017d0:	2120      	movs	r1, #32
 80017d2:	486e      	ldr	r0, [pc, #440]	@ (800198c <MX_GPIO_Init+0x2dc>)
 80017d4:	f003 f816 	bl	8004804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80017d8:	2200      	movs	r2, #0
 80017da:	210c      	movs	r1, #12
 80017dc:	486c      	ldr	r0, [pc, #432]	@ (8001990 <MX_GPIO_Init+0x2e0>)
 80017de:	f003 f811 	bl	8004804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80017e2:	2201      	movs	r2, #1
 80017e4:	2108      	movs	r1, #8
 80017e6:	486b      	ldr	r0, [pc, #428]	@ (8001994 <MX_GPIO_Init+0x2e4>)
 80017e8:	f003 f80c 	bl	8004804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80017ec:	2201      	movs	r2, #1
 80017ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017f2:	4867      	ldr	r0, [pc, #412]	@ (8001990 <MX_GPIO_Init+0x2e0>)
 80017f4:	f003 f806 	bl	8004804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80017f8:	2200      	movs	r2, #0
 80017fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017fe:	4866      	ldr	r0, [pc, #408]	@ (8001998 <MX_GPIO_Init+0x2e8>)
 8001800:	f003 f800 	bl	8004804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	21c8      	movs	r1, #200	@ 0xc8
 8001808:	4864      	ldr	r0, [pc, #400]	@ (800199c <MX_GPIO_Init+0x2ec>)
 800180a:	f002 fffb 	bl	8004804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800180e:	2308      	movs	r3, #8
 8001810:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001812:	2300      	movs	r3, #0
 8001814:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800181a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800181e:	4619      	mov	r1, r3
 8001820:	485f      	ldr	r0, [pc, #380]	@ (80019a0 <MX_GPIO_Init+0x2f0>)
 8001822:	f002 fe2b 	bl	800447c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001826:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800182a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001834:	2303      	movs	r3, #3
 8001836:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001838:	230a      	movs	r3, #10
 800183a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001840:	4619      	mov	r1, r3
 8001842:	4858      	ldr	r0, [pc, #352]	@ (80019a4 <MX_GPIO_Init+0x2f4>)
 8001844:	f002 fe1a 	bl	800447c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001848:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800184c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184e:	2300      	movs	r3, #0
 8001850:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001856:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800185a:	4619      	mov	r1, r3
 800185c:	4852      	ldr	r0, [pc, #328]	@ (80019a8 <MX_GPIO_Init+0x2f8>)
 800185e:	f002 fe0d 	bl	800447c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001862:	2340      	movs	r3, #64	@ 0x40
 8001864:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001866:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800186a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001870:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001874:	4619      	mov	r1, r3
 8001876:	4845      	ldr	r0, [pc, #276]	@ (800198c <MX_GPIO_Init+0x2dc>)
 8001878:	f002 fe00 	bl	800447c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800187c:	2320      	movs	r3, #32
 800187e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001880:	2301      	movs	r3, #1
 8001882:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800188c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001890:	4619      	mov	r1, r3
 8001892:	483e      	ldr	r0, [pc, #248]	@ (800198c <MX_GPIO_Init+0x2dc>)
 8001894:	f002 fdf2 	bl	800447c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001898:	f241 030c 	movw	r3, #4108	@ 0x100c
 800189c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189e:	2301      	movs	r3, #1
 80018a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2300      	movs	r3, #0
 80018a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018ae:	4619      	mov	r1, r3
 80018b0:	4837      	ldr	r0, [pc, #220]	@ (8001990 <MX_GPIO_Init+0x2e0>)
 80018b2:	f002 fde3 	bl	800447c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80018b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018bc:	2300      	movs	r3, #0
 80018be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80018c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018c8:	4619      	mov	r1, r3
 80018ca:	4838      	ldr	r0, [pc, #224]	@ (80019ac <MX_GPIO_Init+0x2fc>)
 80018cc:	f002 fdd6 	bl	800447c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80018d0:	2308      	movs	r3, #8
 80018d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d4:	2301      	movs	r3, #1
 80018d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	2300      	movs	r3, #0
 80018de:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80018e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018e4:	4619      	mov	r1, r3
 80018e6:	482b      	ldr	r0, [pc, #172]	@ (8001994 <MX_GPIO_Init+0x2e4>)
 80018e8:	f002 fdc8 	bl	800447c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80018ec:	2310      	movs	r3, #16
 80018ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f0:	2300      	movs	r3, #0
 80018f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018fc:	4619      	mov	r1, r3
 80018fe:	4823      	ldr	r0, [pc, #140]	@ (800198c <MX_GPIO_Init+0x2dc>)
 8001900:	f002 fdbc 	bl	800447c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001904:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001908:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800190a:	2300      	movs	r3, #0
 800190c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001912:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001916:	4619      	mov	r1, r3
 8001918:	481f      	ldr	r0, [pc, #124]	@ (8001998 <MX_GPIO_Init+0x2e8>)
 800191a:	f002 fdaf 	bl	800447c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800191e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001924:	2301      	movs	r3, #1
 8001926:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001930:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001934:	4619      	mov	r1, r3
 8001936:	4818      	ldr	r0, [pc, #96]	@ (8001998 <MX_GPIO_Init+0x2e8>)
 8001938:	f002 fda0 	bl	800447c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800193c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001942:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001946:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800194c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001950:	4619      	mov	r1, r3
 8001952:	480f      	ldr	r0, [pc, #60]	@ (8001990 <MX_GPIO_Init+0x2e0>)
 8001954:	f002 fd92 	bl	800447c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001958:	2310      	movs	r3, #16
 800195a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195c:	2302      	movs	r3, #2
 800195e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001964:	2303      	movs	r3, #3
 8001966:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001968:	230a      	movs	r3, #10
 800196a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800196c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001970:	4619      	mov	r1, r3
 8001972:	4809      	ldr	r0, [pc, #36]	@ (8001998 <MX_GPIO_Init+0x2e8>)
 8001974:	f002 fd82 	bl	800447c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001978:	23c8      	movs	r3, #200	@ 0xc8
 800197a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197c:	2301      	movs	r3, #1
 800197e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	637b      	str	r3, [r7, #52]	@ 0x34
 8001984:	e014      	b.n	80019b0 <MX_GPIO_Init+0x300>
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800
 800198c:	40020c00 	.word	0x40020c00
 8001990:	40022000 	.word	0x40022000
 8001994:	40022800 	.word	0x40022800
 8001998:	40021c00 	.word	0x40021c00
 800199c:	40021800 	.word	0x40021800
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40020400 	.word	0x40020400
 80019a8:	40022400 	.word	0x40022400
 80019ac:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019b8:	4619      	mov	r1, r3
 80019ba:	4819      	ldr	r0, [pc, #100]	@ (8001a20 <MX_GPIO_Init+0x370>)
 80019bc:	f002 fd5e 	bl	800447c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80019c0:	2305      	movs	r3, #5
 80019c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019cc:	2303      	movs	r3, #3
 80019ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019d0:	230a      	movs	r3, #10
 80019d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019d8:	4619      	mov	r1, r3
 80019da:	4812      	ldr	r0, [pc, #72]	@ (8001a24 <MX_GPIO_Init+0x374>)
 80019dc:	f002 fd4e 	bl	800447c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80019e0:	2304      	movs	r3, #4
 80019e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e4:	2300      	movs	r3, #0
 80019e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80019ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019f0:	4619      	mov	r1, r3
 80019f2:	480b      	ldr	r0, [pc, #44]	@ (8001a20 <MX_GPIO_Init+0x370>)
 80019f4:	f002 fd42 	bl	800447c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80019f8:	2328      	movs	r3, #40	@ 0x28
 80019fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a04:	2303      	movs	r3, #3
 8001a06:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a08:	230a      	movs	r3, #10
 8001a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a10:	4619      	mov	r1, r3
 8001a12:	4805      	ldr	r0, [pc, #20]	@ (8001a28 <MX_GPIO_Init+0x378>)
 8001a14:	f002 fd32 	bl	800447c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a18:	bf00      	nop
 8001a1a:	3740      	adds	r7, #64	@ 0x40
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40021800 	.word	0x40021800
 8001a24:	40020800 	.word	0x40020800
 8001a28:	40020000 	.word	0x40020000

08001a2c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001a34:	f011 fbfe 	bl	8013234 <MX_USB_HOST_Init>
  // Initialisations si besoin ici (mais normalement déjà faites dans main)

  /* Infinite loop */
  for(;;)
  {
    app_camera_loop();
 8001a38:	f001 f9f1 	bl	8002e1e <app_camera_loop>
    app_presence_loop();
 8001a3c:	f001 f9fd 	bl	8002e3a <app_presence_loop>
    app_sd_loop();
 8001a40:	f001 fa02 	bl	8002e48 <app_sd_loop>
    app_servo_loop();
 8001a44:	f001 fa07 	bl	8002e56 <app_servo_loop>
    app_comm_loop();
 8001a48:	f001 f9f0 	bl	8002e2c <app_comm_loop>

    osDelay(100); // délai de 100ms pour éviter la surcharge CPU
 8001a4c:	2064      	movs	r0, #100	@ 0x64
 8001a4e:	f00f f8eb 	bl	8010c28 <osDelay>
    app_camera_loop();
 8001a52:	bf00      	nop
 8001a54:	e7f0      	b.n	8001a38 <StartDefaultTask+0xc>
	...

08001a58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a04      	ldr	r2, [pc, #16]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d101      	bne.n	8001a6e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001a6a:	f001 fa09 	bl	8002e80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40001000 	.word	0x40001000

08001a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a80:	b672      	cpsid	i
}
 8001a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <Error_Handler+0x8>

08001a88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8e:	4b11      	ldr	r3, [pc, #68]	@ (8001ad4 <HAL_MspInit+0x4c>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a92:	4a10      	ldr	r2, [pc, #64]	@ (8001ad4 <HAL_MspInit+0x4c>)
 8001a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad4 <HAL_MspInit+0x4c>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <HAL_MspInit+0x4c>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad4 <HAL_MspInit+0x4c>)
 8001aac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ab0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ab2:	4b08      	ldr	r3, [pc, #32]	@ (8001ad4 <HAL_MspInit+0x4c>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	210f      	movs	r1, #15
 8001ac2:	f06f 0001 	mvn.w	r0, #1
 8001ac6:	f001 fd6f 	bl	80035a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800

08001ad8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	@ 0x28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a21      	ldr	r2, [pc, #132]	@ (8001b7c <HAL_ADC_MspInit+0xa4>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d13c      	bne.n	8001b74 <HAL_ADC_MspInit+0x9c>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001afa:	4b21      	ldr	r3, [pc, #132]	@ (8001b80 <HAL_ADC_MspInit+0xa8>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afe:	4a20      	ldr	r2, [pc, #128]	@ (8001b80 <HAL_ADC_MspInit+0xa8>)
 8001b00:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b06:	4b1e      	ldr	r3, [pc, #120]	@ (8001b80 <HAL_ADC_MspInit+0xa8>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b12:	4b1b      	ldr	r3, [pc, #108]	@ (8001b80 <HAL_ADC_MspInit+0xa8>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	4a1a      	ldr	r2, [pc, #104]	@ (8001b80 <HAL_ADC_MspInit+0xa8>)
 8001b18:	f043 0320 	orr.w	r3, r3, #32
 8001b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1e:	4b18      	ldr	r3, [pc, #96]	@ (8001b80 <HAL_ADC_MspInit+0xa8>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	f003 0320 	and.w	r3, r3, #32
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2a:	4b15      	ldr	r3, [pc, #84]	@ (8001b80 <HAL_ADC_MspInit+0xa8>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	4a14      	ldr	r2, [pc, #80]	@ (8001b80 <HAL_ADC_MspInit+0xa8>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b36:	4b12      	ldr	r3, [pc, #72]	@ (8001b80 <HAL_ADC_MspInit+0xa8>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001b42:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8001b46:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	4619      	mov	r1, r3
 8001b56:	480b      	ldr	r0, [pc, #44]	@ (8001b84 <HAL_ADC_MspInit+0xac>)
 8001b58:	f002 fc90 	bl	800447c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b60:	2303      	movs	r3, #3
 8001b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4806      	ldr	r0, [pc, #24]	@ (8001b88 <HAL_ADC_MspInit+0xb0>)
 8001b70:	f002 fc84 	bl	800447c <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 8001b74:	bf00      	nop
 8001b76:	3728      	adds	r7, #40	@ 0x28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40012200 	.word	0x40012200
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40021400 	.word	0x40021400
 8001b88:	40020000 	.word	0x40020000

08001b8c <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc4 <HAL_CRC_MspInit+0x38>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d10b      	bne.n	8001bb6 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc8 <HAL_CRC_MspInit+0x3c>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	4a09      	ldr	r2, [pc, #36]	@ (8001bc8 <HAL_CRC_MspInit+0x3c>)
 8001ba4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001baa:	4b07      	ldr	r3, [pc, #28]	@ (8001bc8 <HAL_CRC_MspInit+0x3c>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001bb6:	bf00      	nop
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40023000 	.word	0x40023000
 8001bc8:	40023800 	.word	0x40023800

08001bcc <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08e      	sub	sp, #56	@ 0x38
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a50      	ldr	r2, [pc, #320]	@ (8001d2c <HAL_DCMI_MspInit+0x160>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	f040 809a 	bne.w	8001d24 <HAL_DCMI_MspInit+0x158>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001bf0:	4b4f      	ldr	r3, [pc, #316]	@ (8001d30 <HAL_DCMI_MspInit+0x164>)
 8001bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bf4:	4a4e      	ldr	r2, [pc, #312]	@ (8001d30 <HAL_DCMI_MspInit+0x164>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6353      	str	r3, [r2, #52]	@ 0x34
 8001bfc:	4b4c      	ldr	r3, [pc, #304]	@ (8001d30 <HAL_DCMI_MspInit+0x164>)
 8001bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	623b      	str	r3, [r7, #32]
 8001c06:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c08:	4b49      	ldr	r3, [pc, #292]	@ (8001d30 <HAL_DCMI_MspInit+0x164>)
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0c:	4a48      	ldr	r2, [pc, #288]	@ (8001d30 <HAL_DCMI_MspInit+0x164>)
 8001c0e:	f043 0310 	orr.w	r3, r3, #16
 8001c12:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c14:	4b46      	ldr	r3, [pc, #280]	@ (8001d30 <HAL_DCMI_MspInit+0x164>)
 8001c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c18:	f003 0310 	and.w	r3, r3, #16
 8001c1c:	61fb      	str	r3, [r7, #28]
 8001c1e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c20:	4b43      	ldr	r3, [pc, #268]	@ (8001d30 <HAL_DCMI_MspInit+0x164>)
 8001c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c24:	4a42      	ldr	r2, [pc, #264]	@ (8001d30 <HAL_DCMI_MspInit+0x164>)
 8001c26:	f043 0308 	orr.w	r3, r3, #8
 8001c2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2c:	4b40      	ldr	r3, [pc, #256]	@ (8001d30 <HAL_DCMI_MspInit+0x164>)
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c30:	f003 0308 	and.w	r3, r3, #8
 8001c34:	61bb      	str	r3, [r7, #24]
 8001c36:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c38:	4b3d      	ldr	r3, [pc, #244]	@ (8001d30 <HAL_DCMI_MspInit+0x164>)
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3c:	4a3c      	ldr	r2, [pc, #240]	@ (8001d30 <HAL_DCMI_MspInit+0x164>)
 8001c3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c42:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c44:	4b3a      	ldr	r3, [pc, #232]	@ (8001d30 <HAL_DCMI_MspInit+0x164>)
 8001c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c50:	4b37      	ldr	r3, [pc, #220]	@ (8001d30 <HAL_DCMI_MspInit+0x164>)
 8001c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c54:	4a36      	ldr	r2, [pc, #216]	@ (8001d30 <HAL_DCMI_MspInit+0x164>)
 8001c56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5c:	4b34      	ldr	r3, [pc, #208]	@ (8001d30 <HAL_DCMI_MspInit+0x164>)
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c68:	4b31      	ldr	r3, [pc, #196]	@ (8001d30 <HAL_DCMI_MspInit+0x164>)
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6c:	4a30      	ldr	r2, [pc, #192]	@ (8001d30 <HAL_DCMI_MspInit+0x164>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c74:	4b2e      	ldr	r3, [pc, #184]	@ (8001d30 <HAL_DCMI_MspInit+0x164>)
 8001c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001c80:	2360      	movs	r3, #96	@ 0x60
 8001c82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c90:	230d      	movs	r3, #13
 8001c92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4826      	ldr	r0, [pc, #152]	@ (8001d34 <HAL_DCMI_MspInit+0x168>)
 8001c9c:	f002 fbee 	bl	800447c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001ca0:	2308      	movs	r3, #8
 8001ca2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001cb0:	230d      	movs	r3, #13
 8001cb2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001cb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cb8:	4619      	mov	r1, r3
 8001cba:	481f      	ldr	r0, [pc, #124]	@ (8001d38 <HAL_DCMI_MspInit+0x16c>)
 8001cbc:	f002 fbde 	bl	800447c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001cc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001cd2:	230d      	movs	r3, #13
 8001cd4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001cd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4817      	ldr	r0, [pc, #92]	@ (8001d3c <HAL_DCMI_MspInit+0x170>)
 8001cde:	f002 fbcd 	bl	800447c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001ce2:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8001ce6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001cf4:	230d      	movs	r3, #13
 8001cf6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001cf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4810      	ldr	r0, [pc, #64]	@ (8001d40 <HAL_DCMI_MspInit+0x174>)
 8001d00:	f002 fbbc 	bl	800447c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001d04:	2350      	movs	r3, #80	@ 0x50
 8001d06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	2300      	movs	r3, #0
 8001d12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d14:	230d      	movs	r3, #13
 8001d16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4809      	ldr	r0, [pc, #36]	@ (8001d44 <HAL_DCMI_MspInit+0x178>)
 8001d20:	f002 fbac 	bl	800447c <HAL_GPIO_Init>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8001d24:	bf00      	nop
 8001d26:	3738      	adds	r7, #56	@ 0x38
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	50050000 	.word	0x50050000
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40020c00 	.word	0x40020c00
 8001d3c:	40021800 	.word	0x40021800
 8001d40:	40021c00 	.word	0x40021c00
 8001d44:	40020000 	.word	0x40020000

08001d48 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0d      	ldr	r2, [pc, #52]	@ (8001d8c <HAL_DMA2D_MspInit+0x44>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d113      	bne.n	8001d82 <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d90 <HAL_DMA2D_MspInit+0x48>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8001d90 <HAL_DMA2D_MspInit+0x48>)
 8001d60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d66:	4b0a      	ldr	r3, [pc, #40]	@ (8001d90 <HAL_DMA2D_MspInit+0x48>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2105      	movs	r1, #5
 8001d76:	205a      	movs	r0, #90	@ 0x5a
 8001d78:	f001 fc16 	bl	80035a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001d7c:	205a      	movs	r0, #90	@ 0x5a
 8001d7e:	f001 fc2f 	bl	80035e0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	4002b000 	.word	0x4002b000
 8001d90:	40023800 	.word	0x40023800

08001d94 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08e      	sub	sp, #56	@ 0x38
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a3f      	ldr	r2, [pc, #252]	@ (8001eb0 <HAL_ETH_MspInit+0x11c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d178      	bne.n	8001ea8 <HAL_ETH_MspInit+0x114>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001db6:	4b3f      	ldr	r3, [pc, #252]	@ (8001eb4 <HAL_ETH_MspInit+0x120>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	4a3e      	ldr	r2, [pc, #248]	@ (8001eb4 <HAL_ETH_MspInit+0x120>)
 8001dbc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc2:	4b3c      	ldr	r3, [pc, #240]	@ (8001eb4 <HAL_ETH_MspInit+0x120>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dca:	623b      	str	r3, [r7, #32]
 8001dcc:	6a3b      	ldr	r3, [r7, #32]
 8001dce:	4b39      	ldr	r3, [pc, #228]	@ (8001eb4 <HAL_ETH_MspInit+0x120>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	4a38      	ldr	r2, [pc, #224]	@ (8001eb4 <HAL_ETH_MspInit+0x120>)
 8001dd4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dda:	4b36      	ldr	r3, [pc, #216]	@ (8001eb4 <HAL_ETH_MspInit+0x120>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001de2:	61fb      	str	r3, [r7, #28]
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	4b33      	ldr	r3, [pc, #204]	@ (8001eb4 <HAL_ETH_MspInit+0x120>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	4a32      	ldr	r2, [pc, #200]	@ (8001eb4 <HAL_ETH_MspInit+0x120>)
 8001dec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df2:	4b30      	ldr	r3, [pc, #192]	@ (8001eb4 <HAL_ETH_MspInit+0x120>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001dfa:	61bb      	str	r3, [r7, #24]
 8001dfc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb4 <HAL_ETH_MspInit+0x120>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	4a2c      	ldr	r2, [pc, #176]	@ (8001eb4 <HAL_ETH_MspInit+0x120>)
 8001e04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb4 <HAL_ETH_MspInit+0x120>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e16:	4b27      	ldr	r3, [pc, #156]	@ (8001eb4 <HAL_ETH_MspInit+0x120>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	4a26      	ldr	r2, [pc, #152]	@ (8001eb4 <HAL_ETH_MspInit+0x120>)
 8001e1c:	f043 0304 	orr.w	r3, r3, #4
 8001e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e22:	4b24      	ldr	r3, [pc, #144]	@ (8001eb4 <HAL_ETH_MspInit+0x120>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2e:	4b21      	ldr	r3, [pc, #132]	@ (8001eb4 <HAL_ETH_MspInit+0x120>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	4a20      	ldr	r2, [pc, #128]	@ (8001eb4 <HAL_ETH_MspInit+0x120>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb4 <HAL_ETH_MspInit+0x120>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001e46:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e54:	2303      	movs	r3, #3
 8001e56:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e58:	230b      	movs	r3, #11
 8001e5a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e60:	4619      	mov	r1, r3
 8001e62:	4815      	ldr	r0, [pc, #84]	@ (8001eb8 <HAL_ETH_MspInit+0x124>)
 8001e64:	f002 fb0a 	bl	800447c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001e68:	2332      	movs	r3, #50	@ 0x32
 8001e6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e74:	2303      	movs	r3, #3
 8001e76:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e78:	230b      	movs	r3, #11
 8001e7a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e80:	4619      	mov	r1, r3
 8001e82:	480e      	ldr	r0, [pc, #56]	@ (8001ebc <HAL_ETH_MspInit+0x128>)
 8001e84:	f002 fafa 	bl	800447c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001e88:	2386      	movs	r3, #134	@ 0x86
 8001e8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e94:	2303      	movs	r3, #3
 8001e96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e98:	230b      	movs	r3, #11
 8001e9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4807      	ldr	r0, [pc, #28]	@ (8001ec0 <HAL_ETH_MspInit+0x12c>)
 8001ea4:	f002 faea 	bl	800447c <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8001ea8:	bf00      	nop
 8001eaa:	3738      	adds	r7, #56	@ 0x38
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40028000 	.word	0x40028000
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40021800 	.word	0x40021800
 8001ebc:	40020800 	.word	0x40020800
 8001ec0:	40020000 	.word	0x40020000

08001ec4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b0ac      	sub	sp, #176	@ 0xb0
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001edc:	f107 0318 	add.w	r3, r7, #24
 8001ee0:	2284      	movs	r2, #132	@ 0x84
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f011 fd5b 	bl	80139a0 <memset>
  if(hi2c->Instance==I2C1)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a44      	ldr	r2, [pc, #272]	@ (8002000 <HAL_I2C_MspInit+0x13c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d13d      	bne.n	8001f70 <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ef4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ef8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001efa:	2300      	movs	r3, #0
 8001efc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001efe:	f107 0318 	add.w	r3, r7, #24
 8001f02:	4618      	mov	r0, r3
 8001f04:	f005 fff0 	bl	8007ee8 <HAL_RCCEx_PeriphCLKConfig>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001f0e:	f7ff fdb5 	bl	8001a7c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f12:	4b3c      	ldr	r3, [pc, #240]	@ (8002004 <HAL_I2C_MspInit+0x140>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	4a3b      	ldr	r2, [pc, #236]	@ (8002004 <HAL_I2C_MspInit+0x140>)
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f1e:	4b39      	ldr	r3, [pc, #228]	@ (8002004 <HAL_I2C_MspInit+0x140>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001f2a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f32:	2312      	movs	r3, #18
 8001f34:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f44:	2304      	movs	r3, #4
 8001f46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f4e:	4619      	mov	r1, r3
 8001f50:	482d      	ldr	r0, [pc, #180]	@ (8002008 <HAL_I2C_MspInit+0x144>)
 8001f52:	f002 fa93 	bl	800447c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f56:	4b2b      	ldr	r3, [pc, #172]	@ (8002004 <HAL_I2C_MspInit+0x140>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	4a2a      	ldr	r2, [pc, #168]	@ (8002004 <HAL_I2C_MspInit+0x140>)
 8001f5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f62:	4b28      	ldr	r3, [pc, #160]	@ (8002004 <HAL_I2C_MspInit+0x140>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001f6e:	e042      	b.n	8001ff6 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a25      	ldr	r2, [pc, #148]	@ (800200c <HAL_I2C_MspInit+0x148>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d13d      	bne.n	8001ff6 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001f7a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f7e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001f80:	2300      	movs	r3, #0
 8001f82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f86:	f107 0318 	add.w	r3, r7, #24
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f005 ffac 	bl	8007ee8 <HAL_RCCEx_PeriphCLKConfig>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001f96:	f7ff fd71 	bl	8001a7c <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002004 <HAL_I2C_MspInit+0x140>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9e:	4a19      	ldr	r2, [pc, #100]	@ (8002004 <HAL_I2C_MspInit+0x140>)
 8001fa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa6:	4b17      	ldr	r3, [pc, #92]	@ (8002004 <HAL_I2C_MspInit+0x140>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001fb2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001fb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fba:	2312      	movs	r3, #18
 8001fbc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001fcc:	2304      	movs	r3, #4
 8001fce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001fd2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	480d      	ldr	r0, [pc, #52]	@ (8002010 <HAL_I2C_MspInit+0x14c>)
 8001fda:	f002 fa4f 	bl	800447c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001fde:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <HAL_I2C_MspInit+0x140>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	4a08      	ldr	r2, [pc, #32]	@ (8002004 <HAL_I2C_MspInit+0x140>)
 8001fe4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001fe8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fea:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <HAL_I2C_MspInit+0x140>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
}
 8001ff6:	bf00      	nop
 8001ff8:	37b0      	adds	r7, #176	@ 0xb0
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40005400 	.word	0x40005400
 8002004:	40023800 	.word	0x40023800
 8002008:	40020400 	.word	0x40020400
 800200c:	40005c00 	.word	0x40005c00
 8002010:	40021c00 	.word	0x40021c00

08002014 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08e      	sub	sp, #56	@ 0x38
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a55      	ldr	r2, [pc, #340]	@ (8002188 <HAL_LTDC_MspInit+0x174>)
 8002032:	4293      	cmp	r3, r2
 8002034:	f040 80a3 	bne.w	800217e <HAL_LTDC_MspInit+0x16a>
  {
    /* USER CODE BEGIN LTDC_MspInit 0 */

    /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002038:	4b54      	ldr	r3, [pc, #336]	@ (800218c <HAL_LTDC_MspInit+0x178>)
 800203a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800203c:	4a53      	ldr	r2, [pc, #332]	@ (800218c <HAL_LTDC_MspInit+0x178>)
 800203e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002042:	6453      	str	r3, [r2, #68]	@ 0x44
 8002044:	4b51      	ldr	r3, [pc, #324]	@ (800218c <HAL_LTDC_MspInit+0x178>)
 8002046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002048:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800204c:	623b      	str	r3, [r7, #32]
 800204e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002050:	4b4e      	ldr	r3, [pc, #312]	@ (800218c <HAL_LTDC_MspInit+0x178>)
 8002052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002054:	4a4d      	ldr	r2, [pc, #308]	@ (800218c <HAL_LTDC_MspInit+0x178>)
 8002056:	f043 0310 	orr.w	r3, r3, #16
 800205a:	6313      	str	r3, [r2, #48]	@ 0x30
 800205c:	4b4b      	ldr	r3, [pc, #300]	@ (800218c <HAL_LTDC_MspInit+0x178>)
 800205e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002060:	f003 0310 	and.w	r3, r3, #16
 8002064:	61fb      	str	r3, [r7, #28]
 8002066:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002068:	4b48      	ldr	r3, [pc, #288]	@ (800218c <HAL_LTDC_MspInit+0x178>)
 800206a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206c:	4a47      	ldr	r2, [pc, #284]	@ (800218c <HAL_LTDC_MspInit+0x178>)
 800206e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002072:	6313      	str	r3, [r2, #48]	@ 0x30
 8002074:	4b45      	ldr	r3, [pc, #276]	@ (800218c <HAL_LTDC_MspInit+0x178>)
 8002076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002078:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002080:	4b42      	ldr	r3, [pc, #264]	@ (800218c <HAL_LTDC_MspInit+0x178>)
 8002082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002084:	4a41      	ldr	r2, [pc, #260]	@ (800218c <HAL_LTDC_MspInit+0x178>)
 8002086:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800208a:	6313      	str	r3, [r2, #48]	@ 0x30
 800208c:	4b3f      	ldr	r3, [pc, #252]	@ (800218c <HAL_LTDC_MspInit+0x178>)
 800208e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002098:	4b3c      	ldr	r3, [pc, #240]	@ (800218c <HAL_LTDC_MspInit+0x178>)
 800209a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209c:	4a3b      	ldr	r2, [pc, #236]	@ (800218c <HAL_LTDC_MspInit+0x178>)
 800209e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80020a4:	4b39      	ldr	r3, [pc, #228]	@ (800218c <HAL_LTDC_MspInit+0x178>)
 80020a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80020b0:	4b36      	ldr	r3, [pc, #216]	@ (800218c <HAL_LTDC_MspInit+0x178>)
 80020b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b4:	4a35      	ldr	r2, [pc, #212]	@ (800218c <HAL_LTDC_MspInit+0x178>)
 80020b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80020bc:	4b33      	ldr	r3, [pc, #204]	@ (800218c <HAL_LTDC_MspInit+0x178>)
 80020be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80020c8:	2310      	movs	r3, #16
 80020ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020cc:	2302      	movs	r3, #2
 80020ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d4:	2300      	movs	r3, #0
 80020d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020d8:	230e      	movs	r3, #14
 80020da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80020dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020e0:	4619      	mov	r1, r3
 80020e2:	482b      	ldr	r0, [pc, #172]	@ (8002190 <HAL_LTDC_MspInit+0x17c>)
 80020e4:	f002 f9ca 	bl	800447c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80020e8:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80020ec:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ee:	2302      	movs	r3, #2
 80020f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	2300      	movs	r3, #0
 80020f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020fa:	230e      	movs	r3, #14
 80020fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80020fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002102:	4619      	mov	r1, r3
 8002104:	4823      	ldr	r0, [pc, #140]	@ (8002194 <HAL_LTDC_MspInit+0x180>)
 8002106:	f002 f9b9 	bl	800447c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800210a:	23f7      	movs	r3, #247	@ 0xf7
 800210c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210e:	2302      	movs	r3, #2
 8002110:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002116:	2300      	movs	r3, #0
 8002118:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800211a:	230e      	movs	r3, #14
 800211c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800211e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002122:	4619      	mov	r1, r3
 8002124:	481c      	ldr	r0, [pc, #112]	@ (8002198 <HAL_LTDC_MspInit+0x184>)
 8002126:	f002 f9a9 	bl	800447c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800212a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800212e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002138:	2300      	movs	r3, #0
 800213a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800213c:	2309      	movs	r3, #9
 800213e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002140:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002144:	4619      	mov	r1, r3
 8002146:	4815      	ldr	r0, [pc, #84]	@ (800219c <HAL_LTDC_MspInit+0x188>)
 8002148:	f002 f998 	bl	800447c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800214c:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8002150:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002152:	2302      	movs	r3, #2
 8002154:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215a:	2300      	movs	r3, #0
 800215c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800215e:	230e      	movs	r3, #14
 8002160:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002162:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002166:	4619      	mov	r1, r3
 8002168:	480d      	ldr	r0, [pc, #52]	@ (80021a0 <HAL_LTDC_MspInit+0x18c>)
 800216a:	f002 f987 	bl	800447c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800216e:	2200      	movs	r2, #0
 8002170:	2105      	movs	r1, #5
 8002172:	2058      	movs	r0, #88	@ 0x58
 8002174:	f001 fa18 	bl	80035a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002178:	2058      	movs	r0, #88	@ 0x58
 800217a:	f001 fa31 	bl	80035e0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 800217e:	bf00      	nop
 8002180:	3738      	adds	r7, #56	@ 0x38
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40016800 	.word	0x40016800
 800218c:	40023800 	.word	0x40023800
 8002190:	40021000 	.word	0x40021000
 8002194:	40022400 	.word	0x40022400
 8002198:	40022800 	.word	0x40022800
 800219c:	40021800 	.word	0x40021800
 80021a0:	40022000 	.word	0x40022000

080021a4 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08c      	sub	sp, #48	@ 0x30
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 031c 	add.w	r3, r7, #28
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a3b      	ldr	r2, [pc, #236]	@ (80022b0 <HAL_QSPI_MspInit+0x10c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d170      	bne.n	80022a8 <HAL_QSPI_MspInit+0x104>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80021c6:	4b3b      	ldr	r3, [pc, #236]	@ (80022b4 <HAL_QSPI_MspInit+0x110>)
 80021c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ca:	4a3a      	ldr	r2, [pc, #232]	@ (80022b4 <HAL_QSPI_MspInit+0x110>)
 80021cc:	f043 0302 	orr.w	r3, r3, #2
 80021d0:	6393      	str	r3, [r2, #56]	@ 0x38
 80021d2:	4b38      	ldr	r3, [pc, #224]	@ (80022b4 <HAL_QSPI_MspInit+0x110>)
 80021d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	61bb      	str	r3, [r7, #24]
 80021dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021de:	4b35      	ldr	r3, [pc, #212]	@ (80022b4 <HAL_QSPI_MspInit+0x110>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	4a34      	ldr	r2, [pc, #208]	@ (80022b4 <HAL_QSPI_MspInit+0x110>)
 80021e4:	f043 0310 	orr.w	r3, r3, #16
 80021e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ea:	4b32      	ldr	r3, [pc, #200]	@ (80022b4 <HAL_QSPI_MspInit+0x110>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	f003 0310 	and.w	r3, r3, #16
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f6:	4b2f      	ldr	r3, [pc, #188]	@ (80022b4 <HAL_QSPI_MspInit+0x110>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	4a2e      	ldr	r2, [pc, #184]	@ (80022b4 <HAL_QSPI_MspInit+0x110>)
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	6313      	str	r3, [r2, #48]	@ 0x30
 8002202:	4b2c      	ldr	r3, [pc, #176]	@ (80022b4 <HAL_QSPI_MspInit+0x110>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800220e:	4b29      	ldr	r3, [pc, #164]	@ (80022b4 <HAL_QSPI_MspInit+0x110>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	4a28      	ldr	r2, [pc, #160]	@ (80022b4 <HAL_QSPI_MspInit+0x110>)
 8002214:	f043 0308 	orr.w	r3, r3, #8
 8002218:	6313      	str	r3, [r2, #48]	@ 0x30
 800221a:	4b26      	ldr	r3, [pc, #152]	@ (80022b4 <HAL_QSPI_MspInit+0x110>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002226:	2304      	movs	r3, #4
 8002228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222a:	2302      	movs	r3, #2
 800222c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002232:	2303      	movs	r3, #3
 8002234:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002236:	2309      	movs	r3, #9
 8002238:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800223a:	f107 031c 	add.w	r3, r7, #28
 800223e:	4619      	mov	r1, r3
 8002240:	481d      	ldr	r0, [pc, #116]	@ (80022b8 <HAL_QSPI_MspInit+0x114>)
 8002242:	f002 f91b 	bl	800447c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002246:	2340      	movs	r3, #64	@ 0x40
 8002248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224a:	2302      	movs	r3, #2
 800224c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002252:	2303      	movs	r3, #3
 8002254:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002256:	230a      	movs	r3, #10
 8002258:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800225a:	f107 031c 	add.w	r3, r7, #28
 800225e:	4619      	mov	r1, r3
 8002260:	4816      	ldr	r0, [pc, #88]	@ (80022bc <HAL_QSPI_MspInit+0x118>)
 8002262:	f002 f90b 	bl	800447c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002266:	2304      	movs	r3, #4
 8002268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226a:	2302      	movs	r3, #2
 800226c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002272:	2303      	movs	r3, #3
 8002274:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002276:	2309      	movs	r3, #9
 8002278:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227a:	f107 031c 	add.w	r3, r7, #28
 800227e:	4619      	mov	r1, r3
 8002280:	480e      	ldr	r0, [pc, #56]	@ (80022bc <HAL_QSPI_MspInit+0x118>)
 8002282:	f002 f8fb 	bl	800447c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002286:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800228a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002294:	2303      	movs	r3, #3
 8002296:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002298:	2309      	movs	r3, #9
 800229a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800229c:	f107 031c 	add.w	r3, r7, #28
 80022a0:	4619      	mov	r1, r3
 80022a2:	4807      	ldr	r0, [pc, #28]	@ (80022c0 <HAL_QSPI_MspInit+0x11c>)
 80022a4:	f002 f8ea 	bl	800447c <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80022a8:	bf00      	nop
 80022aa:	3730      	adds	r7, #48	@ 0x30
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	a0001000 	.word	0xa0001000
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40020400 	.word	0x40020400
 80022c0:	40020c00 	.word	0x40020c00

080022c4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b0a4      	sub	sp, #144	@ 0x90
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022cc:	f107 030c 	add.w	r3, r7, #12
 80022d0:	2284      	movs	r2, #132	@ 0x84
 80022d2:	2100      	movs	r1, #0
 80022d4:	4618      	mov	r0, r3
 80022d6:	f011 fb63 	bl	80139a0 <memset>
  if(hrtc->Instance==RTC)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a0e      	ldr	r2, [pc, #56]	@ (8002318 <HAL_RTC_MspInit+0x54>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d114      	bne.n	800230e <HAL_RTC_MspInit+0x4a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022e4:	2320      	movs	r3, #32
 80022e6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80022e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ee:	f107 030c 	add.w	r3, r7, #12
 80022f2:	4618      	mov	r0, r3
 80022f4:	f005 fdf8 	bl	8007ee8 <HAL_RCCEx_PeriphCLKConfig>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80022fe:	f7ff fbbd 	bl	8001a7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002302:	4b06      	ldr	r3, [pc, #24]	@ (800231c <HAL_RTC_MspInit+0x58>)
 8002304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002306:	4a05      	ldr	r2, [pc, #20]	@ (800231c <HAL_RTC_MspInit+0x58>)
 8002308:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800230c:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800230e:	bf00      	nop
 8002310:	3790      	adds	r7, #144	@ 0x90
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40002800 	.word	0x40002800
 800231c:	40023800 	.word	0x40023800

08002320 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	@ 0x28
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a25      	ldr	r2, [pc, #148]	@ (80023d4 <HAL_SD_MspInit+0xb4>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d144      	bne.n	80023cc <HAL_SD_MspInit+0xac>
  {
    /* USER CODE BEGIN SDMMC1_MspInit 0 */

    /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002342:	4b25      	ldr	r3, [pc, #148]	@ (80023d8 <HAL_SD_MspInit+0xb8>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002346:	4a24      	ldr	r2, [pc, #144]	@ (80023d8 <HAL_SD_MspInit+0xb8>)
 8002348:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800234c:	6453      	str	r3, [r2, #68]	@ 0x44
 800234e:	4b22      	ldr	r3, [pc, #136]	@ (80023d8 <HAL_SD_MspInit+0xb8>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002352:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800235a:	4b1f      	ldr	r3, [pc, #124]	@ (80023d8 <HAL_SD_MspInit+0xb8>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235e:	4a1e      	ldr	r2, [pc, #120]	@ (80023d8 <HAL_SD_MspInit+0xb8>)
 8002360:	f043 0304 	orr.w	r3, r3, #4
 8002364:	6313      	str	r3, [r2, #48]	@ 0x30
 8002366:	4b1c      	ldr	r3, [pc, #112]	@ (80023d8 <HAL_SD_MspInit+0xb8>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002372:	4b19      	ldr	r3, [pc, #100]	@ (80023d8 <HAL_SD_MspInit+0xb8>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002376:	4a18      	ldr	r2, [pc, #96]	@ (80023d8 <HAL_SD_MspInit+0xb8>)
 8002378:	f043 0308 	orr.w	r3, r3, #8
 800237c:	6313      	str	r3, [r2, #48]	@ 0x30
 800237e:	4b16      	ldr	r3, [pc, #88]	@ (80023d8 <HAL_SD_MspInit+0xb8>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800238a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800238e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	2302      	movs	r3, #2
 8002392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002398:	2303      	movs	r3, #3
 800239a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800239c:	230c      	movs	r3, #12
 800239e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	4619      	mov	r1, r3
 80023a6:	480d      	ldr	r0, [pc, #52]	@ (80023dc <HAL_SD_MspInit+0xbc>)
 80023a8:	f002 f868 	bl	800447c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80023ac:	2304      	movs	r3, #4
 80023ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b8:	2303      	movs	r3, #3
 80023ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80023bc:	230c      	movs	r3, #12
 80023be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	4619      	mov	r1, r3
 80023c6:	4806      	ldr	r0, [pc, #24]	@ (80023e0 <HAL_SD_MspInit+0xc0>)
 80023c8:	f002 f858 	bl	800447c <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80023cc:	bf00      	nop
 80023ce:	3728      	adds	r7, #40	@ 0x28
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40012c00 	.word	0x40012c00
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40020800 	.word	0x40020800
 80023e0:	40020c00 	.word	0x40020c00

080023e4 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b0aa      	sub	sp, #168	@ 0xa8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ec:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023fc:	f107 0310 	add.w	r3, r7, #16
 8002400:	2284      	movs	r2, #132	@ 0x84
 8002402:	2100      	movs	r1, #0
 8002404:	4618      	mov	r0, r3
 8002406:	f011 facb 	bl	80139a0 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8002412:	d143      	bne.n	800249c <HAL_SPDIFRX_MspInit+0xb8>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8002414:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002418:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 800241a:	2364      	movs	r3, #100	@ 0x64
 800241c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800241e:	2302      	movs	r3, #2
 8002420:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002422:	2302      	movs	r3, #2
 8002424:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8002426:	2302      	movs	r3, #2
 8002428:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 800242a:	2301      	movs	r3, #1
 800242c:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800242e:	f107 0310 	add.w	r3, r7, #16
 8002432:	4618      	mov	r0, r3
 8002434:	f005 fd58 	bl	8007ee8 <HAL_RCCEx_PeriphCLKConfig>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 800243e:	f7ff fb1d 	bl	8001a7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002442:	4b18      	ldr	r3, [pc, #96]	@ (80024a4 <HAL_SPDIFRX_MspInit+0xc0>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002446:	4a17      	ldr	r2, [pc, #92]	@ (80024a4 <HAL_SPDIFRX_MspInit+0xc0>)
 8002448:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800244c:	6413      	str	r3, [r2, #64]	@ 0x40
 800244e:	4b15      	ldr	r3, [pc, #84]	@ (80024a4 <HAL_SPDIFRX_MspInit+0xc0>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002452:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800245a:	4b12      	ldr	r3, [pc, #72]	@ (80024a4 <HAL_SPDIFRX_MspInit+0xc0>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245e:	4a11      	ldr	r2, [pc, #68]	@ (80024a4 <HAL_SPDIFRX_MspInit+0xc0>)
 8002460:	f043 0308 	orr.w	r3, r3, #8
 8002464:	6313      	str	r3, [r2, #48]	@ 0x30
 8002466:	4b0f      	ldr	r3, [pc, #60]	@ (80024a4 <HAL_SPDIFRX_MspInit+0xc0>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002472:	2380      	movs	r3, #128	@ 0x80
 8002474:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002478:	2302      	movs	r3, #2
 800247a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	2300      	movs	r3, #0
 8002480:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002484:	2300      	movs	r3, #0
 8002486:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800248a:	2308      	movs	r3, #8
 800248c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002490:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002494:	4619      	mov	r1, r3
 8002496:	4804      	ldr	r0, [pc, #16]	@ (80024a8 <HAL_SPDIFRX_MspInit+0xc4>)
 8002498:	f001 fff0 	bl	800447c <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 800249c:	bf00      	nop
 800249e:	37a8      	adds	r7, #168	@ 0xa8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40020c00 	.word	0x40020c00

080024ac <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08a      	sub	sp, #40	@ 0x28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b4:	f107 0314 	add.w	r3, r7, #20
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a25      	ldr	r2, [pc, #148]	@ (8002560 <HAL_SPI_MspInit+0xb4>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d144      	bne.n	8002558 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024ce:	4b25      	ldr	r3, [pc, #148]	@ (8002564 <HAL_SPI_MspInit+0xb8>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	4a24      	ldr	r2, [pc, #144]	@ (8002564 <HAL_SPI_MspInit+0xb8>)
 80024d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024da:	4b22      	ldr	r3, [pc, #136]	@ (8002564 <HAL_SPI_MspInit+0xb8>)
 80024dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80024e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002564 <HAL_SPI_MspInit+0xb8>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ea:	4a1e      	ldr	r2, [pc, #120]	@ (8002564 <HAL_SPI_MspInit+0xb8>)
 80024ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002564 <HAL_SPI_MspInit+0xb8>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fe:	4b19      	ldr	r3, [pc, #100]	@ (8002564 <HAL_SPI_MspInit+0xb8>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	4a18      	ldr	r2, [pc, #96]	@ (8002564 <HAL_SPI_MspInit+0xb8>)
 8002504:	f043 0302 	orr.w	r3, r3, #2
 8002508:	6313      	str	r3, [r2, #48]	@ 0x30
 800250a:	4b16      	ldr	r3, [pc, #88]	@ (8002564 <HAL_SPI_MspInit+0xb8>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002516:	2302      	movs	r3, #2
 8002518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251a:	2302      	movs	r3, #2
 800251c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002522:	2300      	movs	r3, #0
 8002524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002526:	2305      	movs	r3, #5
 8002528:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800252a:	f107 0314 	add.w	r3, r7, #20
 800252e:	4619      	mov	r1, r3
 8002530:	480d      	ldr	r0, [pc, #52]	@ (8002568 <HAL_SPI_MspInit+0xbc>)
 8002532:	f001 ffa3 	bl	800447c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002536:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800253a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253c:	2302      	movs	r3, #2
 800253e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002544:	2300      	movs	r3, #0
 8002546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002548:	2305      	movs	r3, #5
 800254a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	4619      	mov	r1, r3
 8002552:	4806      	ldr	r0, [pc, #24]	@ (800256c <HAL_SPI_MspInit+0xc0>)
 8002554:	f001 ff92 	bl	800447c <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002558:	bf00      	nop
 800255a:	3728      	adds	r7, #40	@ 0x28
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40003800 	.word	0x40003800
 8002564:	40023800 	.word	0x40023800
 8002568:	40022000 	.word	0x40022000
 800256c:	40020400 	.word	0x40020400

08002570 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002570:	b480      	push	{r7}
 8002572:	b089      	sub	sp, #36	@ 0x24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a2e      	ldr	r2, [pc, #184]	@ (8002638 <HAL_TIM_Base_MspInit+0xc8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d10c      	bne.n	800259c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002582:	4b2e      	ldr	r3, [pc, #184]	@ (800263c <HAL_TIM_Base_MspInit+0xcc>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002586:	4a2d      	ldr	r2, [pc, #180]	@ (800263c <HAL_TIM_Base_MspInit+0xcc>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	6453      	str	r3, [r2, #68]	@ 0x44
 800258e:	4b2b      	ldr	r3, [pc, #172]	@ (800263c <HAL_TIM_Base_MspInit+0xcc>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	61fb      	str	r3, [r7, #28]
 8002598:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 800259a:	e046      	b.n	800262a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025a4:	d10c      	bne.n	80025c0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025a6:	4b25      	ldr	r3, [pc, #148]	@ (800263c <HAL_TIM_Base_MspInit+0xcc>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	4a24      	ldr	r2, [pc, #144]	@ (800263c <HAL_TIM_Base_MspInit+0xcc>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025b2:	4b22      	ldr	r3, [pc, #136]	@ (800263c <HAL_TIM_Base_MspInit+0xcc>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	61bb      	str	r3, [r7, #24]
 80025bc:	69bb      	ldr	r3, [r7, #24]
}
 80025be:	e034      	b.n	800262a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002640 <HAL_TIM_Base_MspInit+0xd0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d10c      	bne.n	80025e4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025ca:	4b1c      	ldr	r3, [pc, #112]	@ (800263c <HAL_TIM_Base_MspInit+0xcc>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ce:	4a1b      	ldr	r2, [pc, #108]	@ (800263c <HAL_TIM_Base_MspInit+0xcc>)
 80025d0:	f043 0302 	orr.w	r3, r3, #2
 80025d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025d6:	4b19      	ldr	r3, [pc, #100]	@ (800263c <HAL_TIM_Base_MspInit+0xcc>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	697b      	ldr	r3, [r7, #20]
}
 80025e2:	e022      	b.n	800262a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a16      	ldr	r2, [pc, #88]	@ (8002644 <HAL_TIM_Base_MspInit+0xd4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d10c      	bne.n	8002608 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80025ee:	4b13      	ldr	r3, [pc, #76]	@ (800263c <HAL_TIM_Base_MspInit+0xcc>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f2:	4a12      	ldr	r2, [pc, #72]	@ (800263c <HAL_TIM_Base_MspInit+0xcc>)
 80025f4:	f043 0308 	orr.w	r3, r3, #8
 80025f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025fa:	4b10      	ldr	r3, [pc, #64]	@ (800263c <HAL_TIM_Base_MspInit+0xcc>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	693b      	ldr	r3, [r7, #16]
}
 8002606:	e010      	b.n	800262a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a0e      	ldr	r2, [pc, #56]	@ (8002648 <HAL_TIM_Base_MspInit+0xd8>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d10b      	bne.n	800262a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002612:	4b0a      	ldr	r3, [pc, #40]	@ (800263c <HAL_TIM_Base_MspInit+0xcc>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002616:	4a09      	ldr	r2, [pc, #36]	@ (800263c <HAL_TIM_Base_MspInit+0xcc>)
 8002618:	f043 0302 	orr.w	r3, r3, #2
 800261c:	6453      	str	r3, [r2, #68]	@ 0x44
 800261e:	4b07      	ldr	r3, [pc, #28]	@ (800263c <HAL_TIM_Base_MspInit+0xcc>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
}
 800262a:	bf00      	nop
 800262c:	3724      	adds	r7, #36	@ 0x24
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40010000 	.word	0x40010000
 800263c:	40023800 	.word	0x40023800
 8002640:	40000400 	.word	0x40000400
 8002644:	40000c00 	.word	0x40000c00
 8002648:	40010400 	.word	0x40010400

0800264c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0a      	ldr	r2, [pc, #40]	@ (8002684 <HAL_TIM_PWM_MspInit+0x38>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d10b      	bne.n	8002676 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM12_MspInit 0 */

    /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800265e:	4b0a      	ldr	r3, [pc, #40]	@ (8002688 <HAL_TIM_PWM_MspInit+0x3c>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002662:	4a09      	ldr	r2, [pc, #36]	@ (8002688 <HAL_TIM_PWM_MspInit+0x3c>)
 8002664:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002668:	6413      	str	r3, [r2, #64]	@ 0x40
 800266a:	4b07      	ldr	r3, [pc, #28]	@ (8002688 <HAL_TIM_PWM_MspInit+0x3c>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM12_MspInit 1 */

  }

}
 8002676:	bf00      	nop
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40001800 	.word	0x40001800
 8002688:	40023800 	.word	0x40023800

0800268c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08c      	sub	sp, #48	@ 0x30
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	f107 031c 	add.w	r3, r7, #28
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a56      	ldr	r2, [pc, #344]	@ (8002804 <HAL_TIM_MspPostInit+0x178>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d11d      	bne.n	80026ea <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ae:	4b56      	ldr	r3, [pc, #344]	@ (8002808 <HAL_TIM_MspPostInit+0x17c>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b2:	4a55      	ldr	r2, [pc, #340]	@ (8002808 <HAL_TIM_MspPostInit+0x17c>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ba:	4b53      	ldr	r3, [pc, #332]	@ (8002808 <HAL_TIM_MspPostInit+0x17c>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	61bb      	str	r3, [r7, #24]
 80026c4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80026c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026cc:	2302      	movs	r3, #2
 80026ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d4:	2300      	movs	r3, #0
 80026d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026d8:	2301      	movs	r3, #1
 80026da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80026dc:	f107 031c 	add.w	r3, r7, #28
 80026e0:	4619      	mov	r1, r3
 80026e2:	484a      	ldr	r0, [pc, #296]	@ (800280c <HAL_TIM_MspPostInit+0x180>)
 80026e4:	f001 feca 	bl	800447c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80026e8:	e087      	b.n	80027fa <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026f2:	d11d      	bne.n	8002730 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f4:	4b44      	ldr	r3, [pc, #272]	@ (8002808 <HAL_TIM_MspPostInit+0x17c>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f8:	4a43      	ldr	r2, [pc, #268]	@ (8002808 <HAL_TIM_MspPostInit+0x17c>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002700:	4b41      	ldr	r3, [pc, #260]	@ (8002808 <HAL_TIM_MspPostInit+0x17c>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800270c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002712:	2302      	movs	r3, #2
 8002714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271a:	2300      	movs	r3, #0
 800271c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800271e:	2301      	movs	r3, #1
 8002720:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002722:	f107 031c 	add.w	r3, r7, #28
 8002726:	4619      	mov	r1, r3
 8002728:	4838      	ldr	r0, [pc, #224]	@ (800280c <HAL_TIM_MspPostInit+0x180>)
 800272a:	f001 fea7 	bl	800447c <HAL_GPIO_Init>
}
 800272e:	e064      	b.n	80027fa <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a36      	ldr	r2, [pc, #216]	@ (8002810 <HAL_TIM_MspPostInit+0x184>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d11c      	bne.n	8002774 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800273a:	4b33      	ldr	r3, [pc, #204]	@ (8002808 <HAL_TIM_MspPostInit+0x17c>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273e:	4a32      	ldr	r2, [pc, #200]	@ (8002808 <HAL_TIM_MspPostInit+0x17c>)
 8002740:	f043 0302 	orr.w	r3, r3, #2
 8002744:	6313      	str	r3, [r2, #48]	@ 0x30
 8002746:	4b30      	ldr	r3, [pc, #192]	@ (8002808 <HAL_TIM_MspPostInit+0x17c>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	613b      	str	r3, [r7, #16]
 8002750:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002752:	2310      	movs	r3, #16
 8002754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002756:	2302      	movs	r3, #2
 8002758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	2300      	movs	r3, #0
 800275c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275e:	2300      	movs	r3, #0
 8002760:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002762:	2302      	movs	r3, #2
 8002764:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002766:	f107 031c 	add.w	r3, r7, #28
 800276a:	4619      	mov	r1, r3
 800276c:	4829      	ldr	r0, [pc, #164]	@ (8002814 <HAL_TIM_MspPostInit+0x188>)
 800276e:	f001 fe85 	bl	800447c <HAL_GPIO_Init>
}
 8002772:	e042      	b.n	80027fa <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a27      	ldr	r2, [pc, #156]	@ (8002818 <HAL_TIM_MspPostInit+0x18c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d11c      	bne.n	80027b8 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800277e:	4b22      	ldr	r3, [pc, #136]	@ (8002808 <HAL_TIM_MspPostInit+0x17c>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	4a21      	ldr	r2, [pc, #132]	@ (8002808 <HAL_TIM_MspPostInit+0x17c>)
 8002784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002788:	6313      	str	r3, [r2, #48]	@ 0x30
 800278a:	4b1f      	ldr	r3, [pc, #124]	@ (8002808 <HAL_TIM_MspPostInit+0x17c>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002796:	2301      	movs	r3, #1
 8002798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a2:	2300      	movs	r3, #0
 80027a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80027a6:	2302      	movs	r3, #2
 80027a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80027aa:	f107 031c 	add.w	r3, r7, #28
 80027ae:	4619      	mov	r1, r3
 80027b0:	481a      	ldr	r0, [pc, #104]	@ (800281c <HAL_TIM_MspPostInit+0x190>)
 80027b2:	f001 fe63 	bl	800447c <HAL_GPIO_Init>
}
 80027b6:	e020      	b.n	80027fa <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a18      	ldr	r2, [pc, #96]	@ (8002820 <HAL_TIM_MspPostInit+0x194>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d11b      	bne.n	80027fa <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80027c2:	4b11      	ldr	r3, [pc, #68]	@ (8002808 <HAL_TIM_MspPostInit+0x17c>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	4a10      	ldr	r2, [pc, #64]	@ (8002808 <HAL_TIM_MspPostInit+0x17c>)
 80027c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002808 <HAL_TIM_MspPostInit+0x17c>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80027da:	2340      	movs	r3, #64	@ 0x40
 80027dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027de:	2302      	movs	r3, #2
 80027e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e6:	2300      	movs	r3, #0
 80027e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80027ea:	2309      	movs	r3, #9
 80027ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80027ee:	f107 031c 	add.w	r3, r7, #28
 80027f2:	4619      	mov	r1, r3
 80027f4:	480b      	ldr	r0, [pc, #44]	@ (8002824 <HAL_TIM_MspPostInit+0x198>)
 80027f6:	f001 fe41 	bl	800447c <HAL_GPIO_Init>
}
 80027fa:	bf00      	nop
 80027fc:	3730      	adds	r7, #48	@ 0x30
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40010000 	.word	0x40010000
 8002808:	40023800 	.word	0x40023800
 800280c:	40020000 	.word	0x40020000
 8002810:	40000400 	.word	0x40000400
 8002814:	40020400 	.word	0x40020400
 8002818:	40000c00 	.word	0x40000c00
 800281c:	40022000 	.word	0x40022000
 8002820:	40001800 	.word	0x40001800
 8002824:	40021c00 	.word	0x40021c00

08002828 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b0ae      	sub	sp, #184	@ 0xb8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002830:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002840:	f107 0320 	add.w	r3, r7, #32
 8002844:	2284      	movs	r2, #132	@ 0x84
 8002846:	2100      	movs	r1, #0
 8002848:	4618      	mov	r0, r3
 800284a:	f011 f8a9 	bl	80139a0 <memset>
  if(huart->Instance==USART1)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a53      	ldr	r2, [pc, #332]	@ (80029a0 <HAL_UART_MspInit+0x178>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d15d      	bne.n	8002914 <HAL_UART_MspInit+0xec>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002858:	2340      	movs	r3, #64	@ 0x40
 800285a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800285c:	2300      	movs	r3, #0
 800285e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002860:	f107 0320 	add.w	r3, r7, #32
 8002864:	4618      	mov	r0, r3
 8002866:	f005 fb3f 	bl	8007ee8 <HAL_RCCEx_PeriphCLKConfig>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002870:	f7ff f904 	bl	8001a7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002874:	4b4b      	ldr	r3, [pc, #300]	@ (80029a4 <HAL_UART_MspInit+0x17c>)
 8002876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002878:	4a4a      	ldr	r2, [pc, #296]	@ (80029a4 <HAL_UART_MspInit+0x17c>)
 800287a:	f043 0310 	orr.w	r3, r3, #16
 800287e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002880:	4b48      	ldr	r3, [pc, #288]	@ (80029a4 <HAL_UART_MspInit+0x17c>)
 8002882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	61fb      	str	r3, [r7, #28]
 800288a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800288c:	4b45      	ldr	r3, [pc, #276]	@ (80029a4 <HAL_UART_MspInit+0x17c>)
 800288e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002890:	4a44      	ldr	r2, [pc, #272]	@ (80029a4 <HAL_UART_MspInit+0x17c>)
 8002892:	f043 0302 	orr.w	r3, r3, #2
 8002896:	6313      	str	r3, [r2, #48]	@ 0x30
 8002898:	4b42      	ldr	r3, [pc, #264]	@ (80029a4 <HAL_UART_MspInit+0x17c>)
 800289a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	61bb      	str	r3, [r7, #24]
 80028a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a4:	4b3f      	ldr	r3, [pc, #252]	@ (80029a4 <HAL_UART_MspInit+0x17c>)
 80028a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a8:	4a3e      	ldr	r2, [pc, #248]	@ (80029a4 <HAL_UART_MspInit+0x17c>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80028b0:	4b3c      	ldr	r3, [pc, #240]	@ (80029a4 <HAL_UART_MspInit+0x17c>)
 80028b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80028bc:	2380      	movs	r3, #128	@ 0x80
 80028be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c2:	2302      	movs	r3, #2
 80028c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ce:	2300      	movs	r3, #0
 80028d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028d4:	2307      	movs	r3, #7
 80028d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80028da:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80028de:	4619      	mov	r1, r3
 80028e0:	4831      	ldr	r0, [pc, #196]	@ (80029a8 <HAL_UART_MspInit+0x180>)
 80028e2:	f001 fdcb 	bl	800447c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80028e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ee:	2302      	movs	r3, #2
 80028f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fa:	2300      	movs	r3, #0
 80028fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002900:	2307      	movs	r3, #7
 8002902:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002906:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800290a:	4619      	mov	r1, r3
 800290c:	4827      	ldr	r0, [pc, #156]	@ (80029ac <HAL_UART_MspInit+0x184>)
 800290e:	f001 fdb5 	bl	800447c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8002912:	e040      	b.n	8002996 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a25      	ldr	r2, [pc, #148]	@ (80029b0 <HAL_UART_MspInit+0x188>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d13b      	bne.n	8002996 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800291e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002922:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002924:	2300      	movs	r3, #0
 8002926:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002928:	f107 0320 	add.w	r3, r7, #32
 800292c:	4618      	mov	r0, r3
 800292e:	f005 fadb 	bl	8007ee8 <HAL_RCCEx_PeriphCLKConfig>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <HAL_UART_MspInit+0x114>
      Error_Handler();
 8002938:	f7ff f8a0 	bl	8001a7c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800293c:	4b19      	ldr	r3, [pc, #100]	@ (80029a4 <HAL_UART_MspInit+0x17c>)
 800293e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002940:	4a18      	ldr	r2, [pc, #96]	@ (80029a4 <HAL_UART_MspInit+0x17c>)
 8002942:	f043 0320 	orr.w	r3, r3, #32
 8002946:	6453      	str	r3, [r2, #68]	@ 0x44
 8002948:	4b16      	ldr	r3, [pc, #88]	@ (80029a4 <HAL_UART_MspInit+0x17c>)
 800294a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294c:	f003 0320 	and.w	r3, r3, #32
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002954:	4b13      	ldr	r3, [pc, #76]	@ (80029a4 <HAL_UART_MspInit+0x17c>)
 8002956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002958:	4a12      	ldr	r2, [pc, #72]	@ (80029a4 <HAL_UART_MspInit+0x17c>)
 800295a:	f043 0304 	orr.w	r3, r3, #4
 800295e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002960:	4b10      	ldr	r3, [pc, #64]	@ (80029a4 <HAL_UART_MspInit+0x17c>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800296c:	23c0      	movs	r3, #192	@ 0xc0
 800296e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002972:	2302      	movs	r3, #2
 8002974:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002978:	2300      	movs	r3, #0
 800297a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800297e:	2303      	movs	r3, #3
 8002980:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002984:	2308      	movs	r3, #8
 8002986:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800298a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800298e:	4619      	mov	r1, r3
 8002990:	4808      	ldr	r0, [pc, #32]	@ (80029b4 <HAL_UART_MspInit+0x18c>)
 8002992:	f001 fd73 	bl	800447c <HAL_GPIO_Init>
}
 8002996:	bf00      	nop
 8002998:	37b8      	adds	r7, #184	@ 0xb8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40011000 	.word	0x40011000
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40020400 	.word	0x40020400
 80029ac:	40020000 	.word	0x40020000
 80029b0:	40011400 	.word	0x40011400
 80029b4:	40020800 	.word	0x40020800

080029b8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80029be:	1d3b      	adds	r3, r7, #4
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80029cc:	4b3a      	ldr	r3, [pc, #232]	@ (8002ab8 <HAL_FMC_MspInit+0x100>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d16d      	bne.n	8002ab0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80029d4:	4b38      	ldr	r3, [pc, #224]	@ (8002ab8 <HAL_FMC_MspInit+0x100>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80029da:	4b38      	ldr	r3, [pc, #224]	@ (8002abc <HAL_FMC_MspInit+0x104>)
 80029dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029de:	4a37      	ldr	r2, [pc, #220]	@ (8002abc <HAL_FMC_MspInit+0x104>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	6393      	str	r3, [r2, #56]	@ 0x38
 80029e6:	4b35      	ldr	r3, [pc, #212]	@ (8002abc <HAL_FMC_MspInit+0x104>)
 80029e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80029f2:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80029f6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f8:	2302      	movs	r3, #2
 80029fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a00:	2303      	movs	r3, #3
 8002a02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a04:	230c      	movs	r3, #12
 8002a06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a08:	1d3b      	adds	r3, r7, #4
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	482c      	ldr	r0, [pc, #176]	@ (8002ac0 <HAL_FMC_MspInit+0x108>)
 8002a0e:	f001 fd35 	bl	800447c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002a12:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002a16:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a20:	2303      	movs	r3, #3
 8002a22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a24:	230c      	movs	r3, #12
 8002a26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a28:	1d3b      	adds	r3, r7, #4
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4825      	ldr	r0, [pc, #148]	@ (8002ac4 <HAL_FMC_MspInit+0x10c>)
 8002a2e:	f001 fd25 	bl	800447c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002a32:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002a36:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a40:	2303      	movs	r3, #3
 8002a42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a44:	230c      	movs	r3, #12
 8002a46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a48:	1d3b      	adds	r3, r7, #4
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	481e      	ldr	r0, [pc, #120]	@ (8002ac8 <HAL_FMC_MspInit+0x110>)
 8002a4e:	f001 fd15 	bl	800447c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002a52:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002a56:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a60:	2303      	movs	r3, #3
 8002a62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a64:	230c      	movs	r3, #12
 8002a66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a68:	1d3b      	adds	r3, r7, #4
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4817      	ldr	r0, [pc, #92]	@ (8002acc <HAL_FMC_MspInit+0x114>)
 8002a6e:	f001 fd05 	bl	800447c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002a72:	2328      	movs	r3, #40	@ 0x28
 8002a74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a76:	2302      	movs	r3, #2
 8002a78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a82:	230c      	movs	r3, #12
 8002a84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a86:	1d3b      	adds	r3, r7, #4
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4811      	ldr	r0, [pc, #68]	@ (8002ad0 <HAL_FMC_MspInit+0x118>)
 8002a8c:	f001 fcf6 	bl	800447c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002a90:	2308      	movs	r3, #8
 8002a92:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a94:	2302      	movs	r3, #2
 8002a96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002aa0:	230c      	movs	r3, #12
 8002aa2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002aa4:	1d3b      	adds	r3, r7, #4
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	480a      	ldr	r0, [pc, #40]	@ (8002ad4 <HAL_FMC_MspInit+0x11c>)
 8002aaa:	f001 fce7 	bl	800447c <HAL_GPIO_Init>
 8002aae:	e000      	b.n	8002ab2 <HAL_FMC_MspInit+0xfa>
    return;
 8002ab0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20000d28 	.word	0x20000d28
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	40021800 	.word	0x40021800
 8002ac8:	40020c00 	.word	0x40020c00
 8002acc:	40021400 	.word	0x40021400
 8002ad0:	40021c00 	.word	0x40021c00
 8002ad4:	40020800 	.word	0x40020800

08002ad8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002ae0:	f7ff ff6a 	bl	80029b8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08a      	sub	sp, #40	@ 0x28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a2b      	ldr	r2, [pc, #172]	@ (8002ba8 <HAL_SAI_MspInit+0xbc>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d124      	bne.n	8002b48 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002afe:	4b2b      	ldr	r3, [pc, #172]	@ (8002bac <HAL_SAI_MspInit+0xc0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10b      	bne.n	8002b1e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002b06:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb0 <HAL_SAI_MspInit+0xc4>)
 8002b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0a:	4a29      	ldr	r2, [pc, #164]	@ (8002bb0 <HAL_SAI_MspInit+0xc4>)
 8002b0c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b10:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b12:	4b27      	ldr	r3, [pc, #156]	@ (8002bb0 <HAL_SAI_MspInit+0xc4>)
 8002b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002b1e:	4b23      	ldr	r3, [pc, #140]	@ (8002bac <HAL_SAI_MspInit+0xc0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	3301      	adds	r3, #1
 8002b24:	4a21      	ldr	r2, [pc, #132]	@ (8002bac <HAL_SAI_MspInit+0xc0>)
 8002b26:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002b28:	23f0      	movs	r3, #240	@ 0xf0
 8002b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b34:	2300      	movs	r3, #0
 8002b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002b38:	230a      	movs	r3, #10
 8002b3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002b3c:	f107 0314 	add.w	r3, r7, #20
 8002b40:	4619      	mov	r1, r3
 8002b42:	481c      	ldr	r0, [pc, #112]	@ (8002bb4 <HAL_SAI_MspInit+0xc8>)
 8002b44:	f001 fc9a 	bl	800447c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a1a      	ldr	r2, [pc, #104]	@ (8002bb8 <HAL_SAI_MspInit+0xcc>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d125      	bne.n	8002b9e <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002b52:	4b16      	ldr	r3, [pc, #88]	@ (8002bac <HAL_SAI_MspInit+0xc0>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10b      	bne.n	8002b72 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002b5a:	4b15      	ldr	r3, [pc, #84]	@ (8002bb0 <HAL_SAI_MspInit+0xc4>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5e:	4a14      	ldr	r2, [pc, #80]	@ (8002bb0 <HAL_SAI_MspInit+0xc4>)
 8002b60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b64:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b66:	4b12      	ldr	r3, [pc, #72]	@ (8002bb0 <HAL_SAI_MspInit+0xc4>)
 8002b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002b72:	4b0e      	ldr	r3, [pc, #56]	@ (8002bac <HAL_SAI_MspInit+0xc0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	3301      	adds	r3, #1
 8002b78:	4a0c      	ldr	r2, [pc, #48]	@ (8002bac <HAL_SAI_MspInit+0xc0>)
 8002b7a:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002b7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b82:	2302      	movs	r3, #2
 8002b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002b8e:	230a      	movs	r3, #10
 8002b90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002b92:	f107 0314 	add.w	r3, r7, #20
 8002b96:	4619      	mov	r1, r3
 8002b98:	4808      	ldr	r0, [pc, #32]	@ (8002bbc <HAL_SAI_MspInit+0xd0>)
 8002b9a:	f001 fc6f 	bl	800447c <HAL_GPIO_Init>

    }
}
 8002b9e:	bf00      	nop
 8002ba0:	3728      	adds	r7, #40	@ 0x28
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40015c04 	.word	0x40015c04
 8002bac:	20000d2c 	.word	0x20000d2c
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40022000 	.word	0x40022000
 8002bb8:	40015c24 	.word	0x40015c24
 8002bbc:	40021800 	.word	0x40021800

08002bc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08e      	sub	sp, #56	@ 0x38
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002bd0:	4b33      	ldr	r3, [pc, #204]	@ (8002ca0 <HAL_InitTick+0xe0>)
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd4:	4a32      	ldr	r2, [pc, #200]	@ (8002ca0 <HAL_InitTick+0xe0>)
 8002bd6:	f043 0310 	orr.w	r3, r3, #16
 8002bda:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bdc:	4b30      	ldr	r3, [pc, #192]	@ (8002ca0 <HAL_InitTick+0xe0>)
 8002bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002be8:	f107 0210 	add.w	r2, r7, #16
 8002bec:	f107 0314 	add.w	r3, r7, #20
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f005 f946 	bl	8007e84 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d103      	bne.n	8002c0a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002c02:	f005 f917 	bl	8007e34 <HAL_RCC_GetPCLK1Freq>
 8002c06:	6378      	str	r0, [r7, #52]	@ 0x34
 8002c08:	e004      	b.n	8002c14 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002c0a:	f005 f913 	bl	8007e34 <HAL_RCC_GetPCLK1Freq>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c16:	4a23      	ldr	r2, [pc, #140]	@ (8002ca4 <HAL_InitTick+0xe4>)
 8002c18:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1c:	0c9b      	lsrs	r3, r3, #18
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002c22:	4b21      	ldr	r3, [pc, #132]	@ (8002ca8 <HAL_InitTick+0xe8>)
 8002c24:	4a21      	ldr	r2, [pc, #132]	@ (8002cac <HAL_InitTick+0xec>)
 8002c26:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002c28:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca8 <HAL_InitTick+0xe8>)
 8002c2a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002c2e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002c30:	4a1d      	ldr	r2, [pc, #116]	@ (8002ca8 <HAL_InitTick+0xe8>)
 8002c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c34:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002c36:	4b1c      	ldr	r3, [pc, #112]	@ (8002ca8 <HAL_InitTick+0xe8>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca8 <HAL_InitTick+0xe8>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c42:	4b19      	ldr	r3, [pc, #100]	@ (8002ca8 <HAL_InitTick+0xe8>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002c48:	4817      	ldr	r0, [pc, #92]	@ (8002ca8 <HAL_InitTick+0xe8>)
 8002c4a:	f007 fdda 	bl	800a802 <HAL_TIM_Base_Init>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002c54:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d11b      	bne.n	8002c94 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002c5c:	4812      	ldr	r0, [pc, #72]	@ (8002ca8 <HAL_InitTick+0xe8>)
 8002c5e:	f007 fe27 	bl	800a8b0 <HAL_TIM_Base_Start_IT>
 8002c62:	4603      	mov	r3, r0
 8002c64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002c68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d111      	bne.n	8002c94 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c70:	2036      	movs	r0, #54	@ 0x36
 8002c72:	f000 fcb5 	bl	80035e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b0f      	cmp	r3, #15
 8002c7a:	d808      	bhi.n	8002c8e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	2036      	movs	r0, #54	@ 0x36
 8002c82:	f000 fc91 	bl	80035a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c86:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb0 <HAL_InitTick+0xf0>)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	e002      	b.n	8002c94 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002c94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3738      	adds	r7, #56	@ 0x38
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	431bde83 	.word	0x431bde83
 8002ca8:	20000d30 	.word	0x20000d30
 8002cac:	40001000 	.word	0x40001000
 8002cb0:	20000004 	.word	0x20000004

08002cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cb8:	bf00      	nop
 8002cba:	e7fd      	b.n	8002cb8 <NMI_Handler+0x4>

08002cbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cc0:	bf00      	nop
 8002cc2:	e7fd      	b.n	8002cc0 <HardFault_Handler+0x4>

08002cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cc8:	bf00      	nop
 8002cca:	e7fd      	b.n	8002cc8 <MemManage_Handler+0x4>

08002ccc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cd0:	bf00      	nop
 8002cd2:	e7fd      	b.n	8002cd0 <BusFault_Handler+0x4>

08002cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cd8:	bf00      	nop
 8002cda:	e7fd      	b.n	8002cd8 <UsageFault_Handler+0x4>

08002cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
	...

08002cec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002cf0:	4802      	ldr	r0, [pc, #8]	@ (8002cfc <TIM6_DAC_IRQHandler+0x10>)
 8002cf2:	f007 feac 	bl	800aa4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000d30 	.word	0x20000d30

08002d00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002d04:	4802      	ldr	r0, [pc, #8]	@ (8002d10 <OTG_FS_IRQHandler+0x10>)
 8002d06:	f002 f877 	bl	8004df8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	200092d0 	.word	0x200092d0

08002d14 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002d18:	4802      	ldr	r0, [pc, #8]	@ (8002d24 <LTDC_IRQHandler+0x10>)
 8002d1a:	f004 f891 	bl	8006e40 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	200006c0 	.word	0x200006c0

08002d28 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002d2c:	4802      	ldr	r0, [pc, #8]	@ (8002d38 <DMA2D_IRQHandler+0x10>)
 8002d2e:	f000 feb5 	bl	8003a9c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	20000528 	.word	0x20000528

08002d3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d44:	4a14      	ldr	r2, [pc, #80]	@ (8002d98 <_sbrk+0x5c>)
 8002d46:	4b15      	ldr	r3, [pc, #84]	@ (8002d9c <_sbrk+0x60>)
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d50:	4b13      	ldr	r3, [pc, #76]	@ (8002da0 <_sbrk+0x64>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d102      	bne.n	8002d5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d58:	4b11      	ldr	r3, [pc, #68]	@ (8002da0 <_sbrk+0x64>)
 8002d5a:	4a12      	ldr	r2, [pc, #72]	@ (8002da4 <_sbrk+0x68>)
 8002d5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d5e:	4b10      	ldr	r3, [pc, #64]	@ (8002da0 <_sbrk+0x64>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d207      	bcs.n	8002d7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d6c:	f010 fe30 	bl	80139d0 <__errno>
 8002d70:	4603      	mov	r3, r0
 8002d72:	220c      	movs	r2, #12
 8002d74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d76:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7a:	e009      	b.n	8002d90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d7c:	4b08      	ldr	r3, [pc, #32]	@ (8002da0 <_sbrk+0x64>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d82:	4b07      	ldr	r3, [pc, #28]	@ (8002da0 <_sbrk+0x64>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4413      	add	r3, r2
 8002d8a:	4a05      	ldr	r2, [pc, #20]	@ (8002da0 <_sbrk+0x64>)
 8002d8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	20050000 	.word	0x20050000
 8002d9c:	00000400 	.word	0x00000400
 8002da0:	20000d7c 	.word	0x20000d7c
 8002da4:	200097f8 	.word	0x200097f8

08002da8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dac:	4b06      	ldr	r3, [pc, #24]	@ (8002dc8 <SystemInit+0x20>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db2:	4a05      	ldr	r2, [pc, #20]	@ (8002dc8 <SystemInit+0x20>)
 8002db4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002db8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dbc:	bf00      	nop
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	e000ed00 	.word	0xe000ed00

08002dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002dcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002dd0:	f7ff ffea 	bl	8002da8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002dd4:	480c      	ldr	r0, [pc, #48]	@ (8002e08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002dd6:	490d      	ldr	r1, [pc, #52]	@ (8002e0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8002e10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ddc:	e002      	b.n	8002de4 <LoopCopyDataInit>

08002dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002de2:	3304      	adds	r3, #4

08002de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002de8:	d3f9      	bcc.n	8002dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dea:	4a0a      	ldr	r2, [pc, #40]	@ (8002e14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002dec:	4c0a      	ldr	r4, [pc, #40]	@ (8002e18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002df0:	e001      	b.n	8002df6 <LoopFillZerobss>

08002df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002df4:	3204      	adds	r2, #4

08002df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002df8:	d3fb      	bcc.n	8002df2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002dfa:	f010 fdef 	bl	80139dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dfe:	f7fd fbd1 	bl	80005a4 <main>
  bx  lr    
 8002e02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e04:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e0c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002e10:	08013ba8 	.word	0x08013ba8
  ldr r2, =_sbss
 8002e14:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 8002e18:	200097f8 	.word	0x200097f8

08002e1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e1c:	e7fe      	b.n	8002e1c <ADC_IRQHandler>

08002e1e <app_camera_loop>:

void app_camera_init(void) {
    // Initialisation de la caméra (DCMI, configuration, etc.)
}

void app_camera_loop(void) {
 8002e1e:	b480      	push	{r7}
 8002e20:	af00      	add	r7, sp, #0
    // Capture d'image ou détection auto
}
 8002e22:	bf00      	nop
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <app_comm_loop>:

void app_comm_init(void) {
    // Initialisation ESP32 ou UART
}

void app_comm_loop(void) {
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
    // Gestion des messages entrées/sorties (Wi-Fi, BT)
}
 8002e30:	bf00      	nop
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <app_presence_loop>:

void app_presence_init(void) {
    // Config du capteur (GPIO, interruption si besoin)
}

void app_presence_loop(void) {
 8002e3a:	b480      	push	{r7}
 8002e3c:	af00      	add	r7, sp, #0
    // Lecture du GPIO, mise à jour de presence_state
}
 8002e3e:	bf00      	nop
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <app_sd_loop>:

void app_sd_init(void) {
    // Mount SD card, vérifier présence
}

void app_sd_loop(void) {
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
    // Maintenance SD, refresh, logs etc
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <app_servo_loop>:

void app_servo_close_door(void) {
    // Angle fermé
}

void app_servo_loop(void) {
 8002e56:	b480      	push	{r7}
 8002e58:	af00      	add	r7, sp, #0
    // Optionnel : timer de fermeture, sécurité, etc.
}
 8002e5a:	bf00      	nop
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e68:	2003      	movs	r0, #3
 8002e6a:	f000 fb92 	bl	8003592 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e6e:	2000      	movs	r0, #0
 8002e70:	f7ff fea6 	bl	8002bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e74:	f7fe fe08 	bl	8001a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e84:	4b06      	ldr	r3, [pc, #24]	@ (8002ea0 <HAL_IncTick+0x20>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ea4 <HAL_IncTick+0x24>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4413      	add	r3, r2
 8002e90:	4a04      	ldr	r2, [pc, #16]	@ (8002ea4 <HAL_IncTick+0x24>)
 8002e92:	6013      	str	r3, [r2, #0]
}
 8002e94:	bf00      	nop
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	20000008 	.word	0x20000008
 8002ea4:	20000d80 	.word	0x20000d80

08002ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8002eac:	4b03      	ldr	r3, [pc, #12]	@ (8002ebc <HAL_GetTick+0x14>)
 8002eae:	681b      	ldr	r3, [r3, #0]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	20000d80 	.word	0x20000d80

08002ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ec8:	f7ff ffee 	bl	8002ea8 <HAL_GetTick>
 8002ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed8:	d005      	beq.n	8002ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eda:	4b0a      	ldr	r3, [pc, #40]	@ (8002f04 <HAL_Delay+0x44>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ee6:	bf00      	nop
 8002ee8:	f7ff ffde 	bl	8002ea8 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d8f7      	bhi.n	8002ee8 <HAL_Delay+0x28>
  {
  }
}
 8002ef8:	bf00      	nop
 8002efa:	bf00      	nop
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20000008 	.word	0x20000008

08002f08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e031      	b.n	8002f82 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d109      	bne.n	8002f3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fe fdd6 	bl	8001ad8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3e:	f003 0310 	and.w	r3, r3, #16
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d116      	bne.n	8002f74 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f4a:	4b10      	ldr	r3, [pc, #64]	@ (8002f8c <HAL_ADC_Init+0x84>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	f043 0202 	orr.w	r2, r3, #2
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f974 	bl	8003244 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f66:	f023 0303 	bic.w	r3, r3, #3
 8002f6a:	f043 0201 	orr.w	r2, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f72:	e001      	b.n	8002f78 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	ffffeefd 	.word	0xffffeefd

08002f90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x1c>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e13a      	b.n	8003222 <HAL_ADC_ConfigChannel+0x292>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2b09      	cmp	r3, #9
 8002fba:	d93a      	bls.n	8003032 <HAL_ADC_ConfigChannel+0xa2>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002fc4:	d035      	beq.n	8003032 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68d9      	ldr	r1, [r3, #12]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	4413      	add	r3, r2
 8002fda:	3b1e      	subs	r3, #30
 8002fdc:	2207      	movs	r2, #7
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	400a      	ands	r2, r1
 8002fea:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a8f      	ldr	r2, [pc, #572]	@ (8003230 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d10a      	bne.n	800300c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68d9      	ldr	r1, [r3, #12]
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	061a      	lsls	r2, r3, #24
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800300a:	e039      	b.n	8003080 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68d9      	ldr	r1, [r3, #12]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	b29b      	uxth	r3, r3
 800301c:	4618      	mov	r0, r3
 800301e:	4603      	mov	r3, r0
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4403      	add	r3, r0
 8003024:	3b1e      	subs	r3, #30
 8003026:	409a      	lsls	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003030:	e026      	b.n	8003080 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6919      	ldr	r1, [r3, #16]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	b29b      	uxth	r3, r3
 800303e:	461a      	mov	r2, r3
 8003040:	4613      	mov	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4413      	add	r3, r2
 8003046:	f003 031f 	and.w	r3, r3, #31
 800304a:	2207      	movs	r2, #7
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43da      	mvns	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	400a      	ands	r2, r1
 8003058:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6919      	ldr	r1, [r3, #16]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	b29b      	uxth	r3, r3
 800306a:	4618      	mov	r0, r3
 800306c:	4603      	mov	r3, r0
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	4403      	add	r3, r0
 8003072:	f003 031f 	and.w	r3, r3, #31
 8003076:	409a      	lsls	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b06      	cmp	r3, #6
 8003086:	d824      	bhi.n	80030d2 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	3b05      	subs	r3, #5
 800309a:	221f      	movs	r2, #31
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43da      	mvns	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	400a      	ands	r2, r1
 80030a8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	4618      	mov	r0, r3
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	3b05      	subs	r3, #5
 80030c4:	fa00 f203 	lsl.w	r2, r0, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80030d0:	e04c      	b.n	800316c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b0c      	cmp	r3, #12
 80030d8:	d824      	bhi.n	8003124 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	3b23      	subs	r3, #35	@ 0x23
 80030ec:	221f      	movs	r2, #31
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43da      	mvns	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	400a      	ands	r2, r1
 80030fa:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	b29b      	uxth	r3, r3
 8003108:	4618      	mov	r0, r3
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	3b23      	subs	r3, #35	@ 0x23
 8003116:	fa00 f203 	lsl.w	r2, r0, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	631a      	str	r2, [r3, #48]	@ 0x30
 8003122:	e023      	b.n	800316c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	3b41      	subs	r3, #65	@ 0x41
 8003136:	221f      	movs	r2, #31
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43da      	mvns	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	400a      	ands	r2, r1
 8003144:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	b29b      	uxth	r3, r3
 8003152:	4618      	mov	r0, r3
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	3b41      	subs	r3, #65	@ 0x41
 8003160:	fa00 f203 	lsl.w	r2, r0, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a30      	ldr	r2, [pc, #192]	@ (8003234 <HAL_ADC_ConfigChannel+0x2a4>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d10a      	bne.n	800318c <HAL_ADC_ConfigChannel+0x1fc>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800317e:	d105      	bne.n	800318c <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003180:	4b2d      	ldr	r3, [pc, #180]	@ (8003238 <HAL_ADC_ConfigChannel+0x2a8>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4a2c      	ldr	r2, [pc, #176]	@ (8003238 <HAL_ADC_ConfigChannel+0x2a8>)
 8003186:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800318a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a28      	ldr	r2, [pc, #160]	@ (8003234 <HAL_ADC_ConfigChannel+0x2a4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d10f      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x226>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b12      	cmp	r3, #18
 800319c:	d10b      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800319e:	4b26      	ldr	r3, [pc, #152]	@ (8003238 <HAL_ADC_ConfigChannel+0x2a8>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	4a25      	ldr	r2, [pc, #148]	@ (8003238 <HAL_ADC_ConfigChannel+0x2a8>)
 80031a4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80031a8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80031aa:	4b23      	ldr	r3, [pc, #140]	@ (8003238 <HAL_ADC_ConfigChannel+0x2a8>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	4a22      	ldr	r2, [pc, #136]	@ (8003238 <HAL_ADC_ConfigChannel+0x2a8>)
 80031b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031b4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a1e      	ldr	r2, [pc, #120]	@ (8003234 <HAL_ADC_ConfigChannel+0x2a4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d12b      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x288>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003230 <HAL_ADC_ConfigChannel+0x2a0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d003      	beq.n	80031d2 <HAL_ADC_ConfigChannel+0x242>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b11      	cmp	r3, #17
 80031d0:	d122      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80031d2:	4b19      	ldr	r3, [pc, #100]	@ (8003238 <HAL_ADC_ConfigChannel+0x2a8>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	4a18      	ldr	r2, [pc, #96]	@ (8003238 <HAL_ADC_ConfigChannel+0x2a8>)
 80031d8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80031dc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80031de:	4b16      	ldr	r3, [pc, #88]	@ (8003238 <HAL_ADC_ConfigChannel+0x2a8>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	4a15      	ldr	r2, [pc, #84]	@ (8003238 <HAL_ADC_ConfigChannel+0x2a8>)
 80031e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031e8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a10      	ldr	r2, [pc, #64]	@ (8003230 <HAL_ADC_ConfigChannel+0x2a0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d111      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80031f4:	4b11      	ldr	r3, [pc, #68]	@ (800323c <HAL_ADC_ConfigChannel+0x2ac>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a11      	ldr	r2, [pc, #68]	@ (8003240 <HAL_ADC_ConfigChannel+0x2b0>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	0c9a      	lsrs	r2, r3, #18
 8003200:	4613      	mov	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800320a:	e002      	b.n	8003212 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	3b01      	subs	r3, #1
 8003210:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1f9      	bne.n	800320c <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	10000012 	.word	0x10000012
 8003234:	40012000 	.word	0x40012000
 8003238:	40012300 	.word	0x40012300
 800323c:	20000000 	.word	0x20000000
 8003240:	431bde83 	.word	0x431bde83

08003244 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800324c:	4b78      	ldr	r3, [pc, #480]	@ (8003430 <ADC_Init+0x1ec>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	4a77      	ldr	r2, [pc, #476]	@ (8003430 <ADC_Init+0x1ec>)
 8003252:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003256:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003258:	4b75      	ldr	r3, [pc, #468]	@ (8003430 <ADC_Init+0x1ec>)
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	4973      	ldr	r1, [pc, #460]	@ (8003430 <ADC_Init+0x1ec>)
 8003262:	4313      	orrs	r3, r2
 8003264:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003274:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6859      	ldr	r1, [r3, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	021a      	lsls	r2, r3, #8
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003298:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6859      	ldr	r1, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6899      	ldr	r1, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d2:	4a58      	ldr	r2, [pc, #352]	@ (8003434 <ADC_Init+0x1f0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d022      	beq.n	800331e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80032e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6899      	ldr	r1, [r3, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003308:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6899      	ldr	r1, [r3, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	609a      	str	r2, [r3, #8]
 800331c:	e00f      	b.n	800333e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800332c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800333c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0202 	bic.w	r2, r2, #2
 800334c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6899      	ldr	r1, [r3, #8]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	005a      	lsls	r2, r3, #1
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d01b      	beq.n	80033a4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800337a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800338a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6859      	ldr	r1, [r3, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003396:	3b01      	subs	r3, #1
 8003398:	035a      	lsls	r2, r3, #13
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	e007      	b.n	80033b4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80033c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	051a      	lsls	r2, r3, #20
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80033e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6899      	ldr	r1, [r3, #8]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80033f6:	025a      	lsls	r2, r3, #9
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800340e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6899      	ldr	r1, [r3, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	029a      	lsls	r2, r3, #10
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	609a      	str	r2, [r3, #8]
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	40012300 	.word	0x40012300
 8003434:	0f000001 	.word	0x0f000001

08003438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003448:	4b0b      	ldr	r3, [pc, #44]	@ (8003478 <__NVIC_SetPriorityGrouping+0x40>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003454:	4013      	ands	r3, r2
 8003456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003460:	4b06      	ldr	r3, [pc, #24]	@ (800347c <__NVIC_SetPriorityGrouping+0x44>)
 8003462:	4313      	orrs	r3, r2
 8003464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003466:	4a04      	ldr	r2, [pc, #16]	@ (8003478 <__NVIC_SetPriorityGrouping+0x40>)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	60d3      	str	r3, [r2, #12]
}
 800346c:	bf00      	nop
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	e000ed00 	.word	0xe000ed00
 800347c:	05fa0000 	.word	0x05fa0000

08003480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003484:	4b04      	ldr	r3, [pc, #16]	@ (8003498 <__NVIC_GetPriorityGrouping+0x18>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	0a1b      	lsrs	r3, r3, #8
 800348a:	f003 0307 	and.w	r3, r3, #7
}
 800348e:	4618      	mov	r0, r3
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	e000ed00 	.word	0xe000ed00

0800349c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	db0b      	blt.n	80034c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ae:	79fb      	ldrb	r3, [r7, #7]
 80034b0:	f003 021f 	and.w	r2, r3, #31
 80034b4:	4907      	ldr	r1, [pc, #28]	@ (80034d4 <__NVIC_EnableIRQ+0x38>)
 80034b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ba:	095b      	lsrs	r3, r3, #5
 80034bc:	2001      	movs	r0, #1
 80034be:	fa00 f202 	lsl.w	r2, r0, r2
 80034c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	e000e100 	.word	0xe000e100

080034d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	6039      	str	r1, [r7, #0]
 80034e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	db0a      	blt.n	8003502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	490c      	ldr	r1, [pc, #48]	@ (8003524 <__NVIC_SetPriority+0x4c>)
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	0112      	lsls	r2, r2, #4
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	440b      	add	r3, r1
 80034fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003500:	e00a      	b.n	8003518 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	b2da      	uxtb	r2, r3
 8003506:	4908      	ldr	r1, [pc, #32]	@ (8003528 <__NVIC_SetPriority+0x50>)
 8003508:	79fb      	ldrb	r3, [r7, #7]
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	3b04      	subs	r3, #4
 8003510:	0112      	lsls	r2, r2, #4
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	440b      	add	r3, r1
 8003516:	761a      	strb	r2, [r3, #24]
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	e000e100 	.word	0xe000e100
 8003528:	e000ed00 	.word	0xe000ed00

0800352c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800352c:	b480      	push	{r7}
 800352e:	b089      	sub	sp, #36	@ 0x24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f1c3 0307 	rsb	r3, r3, #7
 8003546:	2b04      	cmp	r3, #4
 8003548:	bf28      	it	cs
 800354a:	2304      	movcs	r3, #4
 800354c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	3304      	adds	r3, #4
 8003552:	2b06      	cmp	r3, #6
 8003554:	d902      	bls.n	800355c <NVIC_EncodePriority+0x30>
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	3b03      	subs	r3, #3
 800355a:	e000      	b.n	800355e <NVIC_EncodePriority+0x32>
 800355c:	2300      	movs	r3, #0
 800355e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003560:	f04f 32ff 	mov.w	r2, #4294967295
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43da      	mvns	r2, r3
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	401a      	ands	r2, r3
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003574:	f04f 31ff 	mov.w	r1, #4294967295
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	fa01 f303 	lsl.w	r3, r1, r3
 800357e:	43d9      	mvns	r1, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003584:	4313      	orrs	r3, r2
         );
}
 8003586:	4618      	mov	r0, r3
 8003588:	3724      	adds	r7, #36	@ 0x24
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff ff4c 	bl	8003438 <__NVIC_SetPriorityGrouping>
}
 80035a0:	bf00      	nop
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035ba:	f7ff ff61 	bl	8003480 <__NVIC_GetPriorityGrouping>
 80035be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	68b9      	ldr	r1, [r7, #8]
 80035c4:	6978      	ldr	r0, [r7, #20]
 80035c6:	f7ff ffb1 	bl	800352c <NVIC_EncodePriority>
 80035ca:	4602      	mov	r2, r0
 80035cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035d0:	4611      	mov	r1, r2
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff ff80 	bl	80034d8 <__NVIC_SetPriority>
}
 80035d8:	bf00      	nop
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff ff54 	bl	800349c <__NVIC_EnableIRQ>
}
 80035f4:	bf00      	nop
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e054      	b.n	80036b8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	7f5b      	ldrb	r3, [r3, #29]
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d105      	bne.n	8003624 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7fe fab4 	bl	8001b8c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	791b      	ldrb	r3, [r3, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10c      	bne.n	800364c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a22      	ldr	r2, [pc, #136]	@ (80036c0 <HAL_CRC_Init+0xc4>)
 8003638:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0218 	bic.w	r2, r2, #24
 8003648:	609a      	str	r2, [r3, #8]
 800364a:	e00c      	b.n	8003666 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6899      	ldr	r1, [r3, #8]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	461a      	mov	r2, r3
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f834 	bl	80036c4 <HAL_CRCEx_Polynomial_Set>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e028      	b.n	80036b8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	795b      	ldrb	r3, [r3, #5]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d105      	bne.n	800367a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f04f 32ff 	mov.w	r2, #4294967295
 8003676:	611a      	str	r2, [r3, #16]
 8003678:	e004      	b.n	8003684 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6912      	ldr	r2, [r2, #16]
 8003682:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695a      	ldr	r2, [r3, #20]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	699a      	ldr	r2, [r3, #24]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	04c11db7 	.word	0x04c11db7

080036c4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80036d4:	231f      	movs	r3, #31
 80036d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d102      	bne.n	80036e8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	75fb      	strb	r3, [r7, #23]
 80036e6:	e063      	b.n	80037b0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80036e8:	bf00      	nop
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1e5a      	subs	r2, r3, #1
 80036ee:	613a      	str	r2, [r7, #16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d009      	beq.n	8003708 <HAL_CRCEx_Polynomial_Set+0x44>
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f003 031f 	and.w	r3, r3, #31
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0f0      	beq.n	80036ea <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b18      	cmp	r3, #24
 800370c:	d846      	bhi.n	800379c <HAL_CRCEx_Polynomial_Set+0xd8>
 800370e:	a201      	add	r2, pc, #4	@ (adr r2, 8003714 <HAL_CRCEx_Polynomial_Set+0x50>)
 8003710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003714:	080037a3 	.word	0x080037a3
 8003718:	0800379d 	.word	0x0800379d
 800371c:	0800379d 	.word	0x0800379d
 8003720:	0800379d 	.word	0x0800379d
 8003724:	0800379d 	.word	0x0800379d
 8003728:	0800379d 	.word	0x0800379d
 800372c:	0800379d 	.word	0x0800379d
 8003730:	0800379d 	.word	0x0800379d
 8003734:	08003791 	.word	0x08003791
 8003738:	0800379d 	.word	0x0800379d
 800373c:	0800379d 	.word	0x0800379d
 8003740:	0800379d 	.word	0x0800379d
 8003744:	0800379d 	.word	0x0800379d
 8003748:	0800379d 	.word	0x0800379d
 800374c:	0800379d 	.word	0x0800379d
 8003750:	0800379d 	.word	0x0800379d
 8003754:	08003785 	.word	0x08003785
 8003758:	0800379d 	.word	0x0800379d
 800375c:	0800379d 	.word	0x0800379d
 8003760:	0800379d 	.word	0x0800379d
 8003764:	0800379d 	.word	0x0800379d
 8003768:	0800379d 	.word	0x0800379d
 800376c:	0800379d 	.word	0x0800379d
 8003770:	0800379d 	.word	0x0800379d
 8003774:	08003779 	.word	0x08003779
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	2b06      	cmp	r3, #6
 800377c:	d913      	bls.n	80037a6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003782:	e010      	b.n	80037a6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	2b07      	cmp	r3, #7
 8003788:	d90f      	bls.n	80037aa <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800378e:	e00c      	b.n	80037aa <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	2b0f      	cmp	r3, #15
 8003794:	d90b      	bls.n	80037ae <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800379a:	e008      	b.n	80037ae <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	75fb      	strb	r3, [r7, #23]
        break;
 80037a0:	e006      	b.n	80037b0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80037a2:	bf00      	nop
 80037a4:	e004      	b.n	80037b0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80037a6:	bf00      	nop
 80037a8:	e002      	b.n	80037b0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80037aa:	bf00      	nop
 80037ac:	e000      	b.n	80037b0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80037ae:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80037b0:	7dfb      	ldrb	r3, [r7, #23]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10d      	bne.n	80037d2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f023 0118 	bic.w	r1, r3, #24
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80037d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	371c      	adds	r7, #28
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e069      	b.n	80038c6 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d102      	bne.n	8003804 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fe f9e4 	bl	8001bcc <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6819      	ldr	r1, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	4b2a      	ldr	r3, [pc, #168]	@ (80038d0 <HAL_DCMI_Init+0xf0>)
 8003826:	400b      	ands	r3, r1
 8003828:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6819      	ldr	r1, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800383e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800384a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003856:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003862:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003868:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800386e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b10      	cmp	r3, #16
 800387e:	d112      	bne.n	80038a6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	7f1b      	ldrb	r3, [r3, #28]
 8003884:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	7f5b      	ldrb	r3, [r3, #29]
 800388a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800388c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	7f9b      	ldrb	r3, [r3, #30]
 8003892:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003894:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	7fdb      	ldrb	r3, [r3, #31]
 800389c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80038a2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80038a4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f042 021e 	orr.w	r2, r2, #30
 80038b4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	ffe0f007 	.word	0xffe0f007

080038d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_DMA_Start_IT+0x26>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e048      	b.n	800398c <HAL_DMA_Start_IT+0xb8>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b01      	cmp	r3, #1
 800390c:	d137      	bne.n	800397e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2202      	movs	r2, #2
 8003912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 f842 	bl	80039ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800392c:	223f      	movs	r2, #63	@ 0x3f
 800392e:	409a      	lsls	r2, r3
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0216 	orr.w	r2, r2, #22
 8003942:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695a      	ldr	r2, [r3, #20]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003952:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003958:	2b00      	cmp	r3, #0
 800395a:	d007      	beq.n	800396c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0208 	orr.w	r2, r2, #8
 800396a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0201 	orr.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	e005      	b.n	800398a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003986:	2302      	movs	r3, #2
 8003988:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800398a:	7dfb      	ldrb	r3, [r7, #23]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
 80039b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80039c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b40      	cmp	r3, #64	@ 0x40
 80039d8:	d108      	bne.n	80039ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039ea:	e007      	b.n	80039fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	60da      	str	r2, [r3, #12]
}
 80039fc:	bf00      	nop
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e039      	b.n	8003a8e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d106      	bne.n	8003a34 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7fe f98a 	bl	8001d48 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a58:	f023 0107 	bic.w	r1, r3, #7
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a98 <HAL_DMA2D_Init+0x90>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	68d1      	ldr	r1, [r2, #12]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6812      	ldr	r2, [r2, #0]
 8003a7a:	430b      	orrs	r3, r1
 8003a7c:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	ffffc000 	.word	0xffffc000

08003a9c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d026      	beq.n	8003b0c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d021      	beq.n	8003b0c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ad6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003adc:	f043 0201 	orr.w	r2, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2204      	movs	r2, #4
 8003af0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f003 0320 	and.w	r3, r3, #32
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d026      	beq.n	8003b64 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d021      	beq.n	8003b64 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b2e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2220      	movs	r2, #32
 8003b36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b3c:	f043 0202 	orr.w	r2, r3, #2
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2204      	movs	r2, #4
 8003b48:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d026      	beq.n	8003bbc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d021      	beq.n	8003bbc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b86:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2208      	movs	r2, #8
 8003b8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b94:	f043 0204 	orr.w	r2, r3, #4
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2204      	movs	r2, #4
 8003ba0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d013      	beq.n	8003bee <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00e      	beq.n	8003bee <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bde:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2204      	movs	r2, #4
 8003be6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f853 	bl	8003c94 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d024      	beq.n	8003c42 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d01f      	beq.n	8003c42 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003c10:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2202      	movs	r2, #2
 8003c18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f003 0310 	and.w	r3, r3, #16
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d01f      	beq.n	8003c8c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d01a      	beq.n	8003c8c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c64:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2210      	movs	r2, #16
 8003c6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f80e 	bl	8003ca8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003c8c:	bf00      	nop
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d101      	bne.n	8003cdc <HAL_DMA2D_ConfigLayer+0x20>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	e079      	b.n	8003dd0 <HAL_DMA2D_ConfigLayer+0x114>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	011b      	lsls	r3, r3, #4
 8003cf0:	3318      	adds	r3, #24
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	041b      	lsls	r3, r3, #16
 8003d02:	4313      	orrs	r3, r2
 8003d04:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003d06:	4b35      	ldr	r3, [pc, #212]	@ (8003ddc <HAL_DMA2D_ConfigLayer+0x120>)
 8003d08:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b0a      	cmp	r3, #10
 8003d10:	d003      	beq.n	8003d1a <HAL_DMA2D_ConfigLayer+0x5e>
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b09      	cmp	r3, #9
 8003d18:	d107      	bne.n	8003d2a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	e005      	b.n	8003d36 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	061b      	lsls	r3, r3, #24
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d120      	bne.n	8003d7e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	43db      	mvns	r3, r3
 8003d46:	ea02 0103 	and.w	r1, r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b0a      	cmp	r3, #10
 8003d64:	d003      	beq.n	8003d6e <HAL_DMA2D_ConfigLayer+0xb2>
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b09      	cmp	r3, #9
 8003d6c:	d127      	bne.n	8003dbe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003d7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d7c:	e01f      	b.n	8003dbe <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	69da      	ldr	r2, [r3, #28]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	43db      	mvns	r3, r3
 8003d88:	ea02 0103 	and.w	r1, r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	6812      	ldr	r2, [r2, #0]
 8003d9e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2b0a      	cmp	r3, #10
 8003da6:	d003      	beq.n	8003db0 <HAL_DMA2D_ConfigLayer+0xf4>
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b09      	cmp	r3, #9
 8003dae:	d106      	bne.n	8003dbe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003dbc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	371c      	adds	r7, #28
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	ff03000f 	.word	0xff03000f

08003de0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e086      	b.n	8003f00 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d106      	bne.n	8003e0a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7fd ffc5 	bl	8001d94 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e0a:	4b3f      	ldr	r3, [pc, #252]	@ (8003f08 <HAL_ETH_Init+0x128>)
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0e:	4a3e      	ldr	r2, [pc, #248]	@ (8003f08 <HAL_ETH_Init+0x128>)
 8003e10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e14:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e16:	4b3c      	ldr	r3, [pc, #240]	@ (8003f08 <HAL_ETH_Init+0x128>)
 8003e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e1e:	60bb      	str	r3, [r7, #8]
 8003e20:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003e22:	4b3a      	ldr	r3, [pc, #232]	@ (8003f0c <HAL_ETH_Init+0x12c>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	4a39      	ldr	r2, [pc, #228]	@ (8003f0c <HAL_ETH_Init+0x12c>)
 8003e28:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003e2c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003e2e:	4b37      	ldr	r3, [pc, #220]	@ (8003f0c <HAL_ETH_Init+0x12c>)
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	4935      	ldr	r1, [pc, #212]	@ (8003f0c <HAL_ETH_Init+0x12c>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003e3c:	4b33      	ldr	r3, [pc, #204]	@ (8003f0c <HAL_ETH_Init+0x12c>)
 8003e3e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6812      	ldr	r2, [r2, #0]
 8003e4e:	f043 0301 	orr.w	r3, r3, #1
 8003e52:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e56:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e58:	f7ff f826 	bl	8002ea8 <HAL_GetTick>
 8003e5c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003e5e:	e011      	b.n	8003e84 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003e60:	f7ff f822 	bl	8002ea8 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003e6e:	d909      	bls.n	8003e84 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2204      	movs	r2, #4
 8003e74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	22e0      	movs	r2, #224	@ 0xe0
 8003e7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e03d      	b.n	8003f00 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1e4      	bne.n	8003e60 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f97a 	bl	8004190 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 fa25 	bl	80042ec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fa7b 	bl	800439e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	461a      	mov	r2, r3
 8003eae:	2100      	movs	r1, #0
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f9e3 	bl	800427c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003ec4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8003f10 <HAL_ETH_Init+0x130>)
 8003ed4:	430b      	orrs	r3, r1
 8003ed6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8003eea:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2210      	movs	r2, #16
 8003efa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	40013800 	.word	0x40013800
 8003f10:	00020060 	.word	0x00020060

08003f14 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4b53      	ldr	r3, [pc, #332]	@ (8004078 <ETH_SetMACConfig+0x164>)
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	7b9b      	ldrb	r3, [r3, #14]
 8003f32:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	7c12      	ldrb	r2, [r2, #16]
 8003f38:	2a00      	cmp	r2, #0
 8003f3a:	d102      	bne.n	8003f42 <ETH_SetMACConfig+0x2e>
 8003f3c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003f40:	e000      	b.n	8003f44 <ETH_SetMACConfig+0x30>
 8003f42:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003f44:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	7c52      	ldrb	r2, [r2, #17]
 8003f4a:	2a00      	cmp	r2, #0
 8003f4c:	d102      	bne.n	8003f54 <ETH_SetMACConfig+0x40>
 8003f4e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003f52:	e000      	b.n	8003f56 <ETH_SetMACConfig+0x42>
 8003f54:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003f56:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003f5c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	7fdb      	ldrb	r3, [r3, #31]
 8003f62:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003f64:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003f6a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	7f92      	ldrb	r2, [r2, #30]
 8003f70:	2a00      	cmp	r2, #0
 8003f72:	d102      	bne.n	8003f7a <ETH_SetMACConfig+0x66>
 8003f74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f78:	e000      	b.n	8003f7c <ETH_SetMACConfig+0x68>
 8003f7a:	2200      	movs	r2, #0
                        macconf->Speed |
 8003f7c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	7f1b      	ldrb	r3, [r3, #28]
 8003f82:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003f84:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003f8a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	791b      	ldrb	r3, [r3, #4]
 8003f90:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003f92:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003f9a:	2a00      	cmp	r2, #0
 8003f9c:	d102      	bne.n	8003fa4 <ETH_SetMACConfig+0x90>
 8003f9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fa2:	e000      	b.n	8003fa6 <ETH_SetMACConfig+0x92>
 8003fa4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003fa6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	7bdb      	ldrb	r3, [r3, #15]
 8003fac:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003fae:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003fb4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fbc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003fd6:	2001      	movs	r0, #1
 8003fd8:	f7fe ff72 	bl	8002ec0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ffa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004002:	2a00      	cmp	r2, #0
 8004004:	d101      	bne.n	800400a <ETH_SetMACConfig+0xf6>
 8004006:	2280      	movs	r2, #128	@ 0x80
 8004008:	e000      	b.n	800400c <ETH_SetMACConfig+0xf8>
 800400a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800400c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004012:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800401a:	2a01      	cmp	r2, #1
 800401c:	d101      	bne.n	8004022 <ETH_SetMACConfig+0x10e>
 800401e:	2208      	movs	r2, #8
 8004020:	e000      	b.n	8004024 <ETH_SetMACConfig+0x110>
 8004022:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004024:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800402c:	2a01      	cmp	r2, #1
 800402e:	d101      	bne.n	8004034 <ETH_SetMACConfig+0x120>
 8004030:	2204      	movs	r2, #4
 8004032:	e000      	b.n	8004036 <ETH_SetMACConfig+0x122>
 8004034:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004036:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800403e:	2a01      	cmp	r2, #1
 8004040:	d101      	bne.n	8004046 <ETH_SetMACConfig+0x132>
 8004042:	2202      	movs	r2, #2
 8004044:	e000      	b.n	8004048 <ETH_SetMACConfig+0x134>
 8004046:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004048:	4313      	orrs	r3, r2
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	4313      	orrs	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004060:	2001      	movs	r0, #1
 8004062:	f7fe ff2d 	bl	8002ec0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	619a      	str	r2, [r3, #24]
}
 800406e:	bf00      	nop
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	fd20810f 	.word	0xfd20810f

0800407c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	4b3d      	ldr	r3, [pc, #244]	@ (800418c <ETH_SetDMAConfig+0x110>)
 8004096:	4013      	ands	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	7b1b      	ldrb	r3, [r3, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d102      	bne.n	80040a8 <ETH_SetDMAConfig+0x2c>
 80040a2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80040a6:	e000      	b.n	80040aa <ETH_SetDMAConfig+0x2e>
 80040a8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	7b5b      	ldrb	r3, [r3, #13]
 80040ae:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80040b0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	7f52      	ldrb	r2, [r2, #29]
 80040b6:	2a00      	cmp	r2, #0
 80040b8:	d102      	bne.n	80040c0 <ETH_SetDMAConfig+0x44>
 80040ba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80040be:	e000      	b.n	80040c2 <ETH_SetDMAConfig+0x46>
 80040c0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80040c2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	7b9b      	ldrb	r3, [r3, #14]
 80040c8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80040ca:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80040d0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	7f1b      	ldrb	r3, [r3, #28]
 80040d6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80040d8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	7f9b      	ldrb	r3, [r3, #30]
 80040de:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80040e0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80040e6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80040ee:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80040f0:	4313      	orrs	r3, r2
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004100:	461a      	mov	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004112:	2001      	movs	r0, #1
 8004114:	f7fe fed4 	bl	8002ec0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004120:	461a      	mov	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	791b      	ldrb	r3, [r3, #4]
 800412a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004130:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004136:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800413c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004144:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004146:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800414e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004154:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6812      	ldr	r2, [r2, #0]
 800415a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800415e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004162:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004170:	2001      	movs	r0, #1
 8004172:	f7fe fea5 	bl	8002ec0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800417e:	461a      	mov	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6013      	str	r3, [r2, #0]
}
 8004184:	bf00      	nop
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	f8de3f23 	.word	0xf8de3f23

08004190 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b0a6      	sub	sp, #152	@ 0x98
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004198:	2301      	movs	r3, #1
 800419a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800419e:	2301      	movs	r3, #1
 80041a0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80041a4:	2300      	movs	r3, #0
 80041a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80041a8:	2300      	movs	r3, #0
 80041aa:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80041ae:	2301      	movs	r3, #1
 80041b0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80041b4:	2300      	movs	r3, #0
 80041b6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80041ba:	2301      	movs	r3, #1
 80041bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80041c0:	2301      	movs	r3, #1
 80041c2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80041c6:	2300      	movs	r3, #0
 80041c8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80041cc:	2300      	movs	r3, #0
 80041ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80041d2:	2300      	movs	r3, #0
 80041d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80041d6:	2300      	movs	r3, #0
 80041d8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80041e0:	2300      	movs	r3, #0
 80041e2:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80041e6:	2300      	movs	r3, #0
 80041e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80041ec:	2300      	movs	r3, #0
 80041ee:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80041f2:	2300      	movs	r3, #0
 80041f4:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80041f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80041fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80041fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004202:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004204:	2300      	movs	r3, #0
 8004206:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800420a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800420e:	4619      	mov	r1, r3
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff fe7f 	bl	8003f14 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004216:	2301      	movs	r3, #1
 8004218:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800421a:	2301      	movs	r3, #1
 800421c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800421e:	2301      	movs	r3, #1
 8004220:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004224:	2301      	movs	r3, #1
 8004226:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004228:	2300      	movs	r3, #0
 800422a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800422c:	2300      	movs	r3, #0
 800422e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004232:	2300      	movs	r3, #0
 8004234:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004238:	2300      	movs	r3, #0
 800423a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800423c:	2301      	movs	r3, #1
 800423e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004242:	2301      	movs	r3, #1
 8004244:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004246:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800424a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800424c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004250:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004252:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004256:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004258:	2301      	movs	r3, #1
 800425a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800425e:	2300      	movs	r3, #0
 8004260:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004262:	2300      	movs	r3, #0
 8004264:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004266:	f107 0308 	add.w	r3, r7, #8
 800426a:	4619      	mov	r1, r3
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff ff05 	bl	800407c <ETH_SetDMAConfig>
}
 8004272:	bf00      	nop
 8004274:	3798      	adds	r7, #152	@ 0x98
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
	...

0800427c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3305      	adds	r3, #5
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	021b      	lsls	r3, r3, #8
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	3204      	adds	r2, #4
 8004294:	7812      	ldrb	r2, [r2, #0]
 8004296:	4313      	orrs	r3, r2
 8004298:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	4b11      	ldr	r3, [pc, #68]	@ (80042e4 <ETH_MACAddressConfig+0x68>)
 800429e:	4413      	add	r3, r2
 80042a0:	461a      	mov	r2, r3
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	3303      	adds	r3, #3
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	061a      	lsls	r2, r3, #24
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	3302      	adds	r3, #2
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	041b      	lsls	r3, r3, #16
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3301      	adds	r3, #1
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	021b      	lsls	r3, r3, #8
 80042c0:	4313      	orrs	r3, r2
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	7812      	ldrb	r2, [r2, #0]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	4b06      	ldr	r3, [pc, #24]	@ (80042e8 <ETH_MACAddressConfig+0x6c>)
 80042ce:	4413      	add	r3, r2
 80042d0:	461a      	mov	r2, r3
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	6013      	str	r3, [r2, #0]
}
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40028040 	.word	0x40028040
 80042e8:	40028044 	.word	0x40028044

080042ec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80042f4:	2300      	movs	r3, #0
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	e03e      	b.n	8004378 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68d9      	ldr	r1, [r3, #12]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4613      	mov	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	440b      	add	r3, r1
 800430a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2200      	movs	r2, #0
 8004310:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2200      	movs	r2, #0
 8004316:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2200      	movs	r2, #0
 800431c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2200      	movs	r2, #0
 8004322:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004324:	68b9      	ldr	r1, [r7, #8]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	3206      	adds	r2, #6
 800432c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b02      	cmp	r3, #2
 8004340:	d80c      	bhi.n	800435c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68d9      	ldr	r1, [r3, #12]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	4613      	mov	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	440b      	add	r3, r1
 8004354:	461a      	mov	r2, r3
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	60da      	str	r2, [r3, #12]
 800435a:	e004      	b.n	8004366 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	461a      	mov	r2, r3
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	3301      	adds	r3, #1
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2b03      	cmp	r3, #3
 800437c:	d9bd      	bls.n	80042fa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68da      	ldr	r2, [r3, #12]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004390:	611a      	str	r2, [r3, #16]
}
 8004392:	bf00      	nop
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800439e:	b480      	push	{r7}
 80043a0:	b085      	sub	sp, #20
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	e048      	b.n	800443e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6919      	ldr	r1, [r3, #16]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	4613      	mov	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	440b      	add	r3, r1
 80043bc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2200      	movs	r2, #0
 80043c8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2200      	movs	r2, #0
 80043ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2200      	movs	r2, #0
 80043d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2200      	movs	r2, #0
 80043da:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2200      	movs	r2, #0
 80043e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80043e8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004402:	68b9      	ldr	r1, [r7, #8]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	3212      	adds	r2, #18
 800440a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2b02      	cmp	r3, #2
 8004412:	d80c      	bhi.n	800442e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6919      	ldr	r1, [r3, #16]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	4613      	mov	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	440b      	add	r3, r1
 8004426:	461a      	mov	r2, r3
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	60da      	str	r2, [r3, #12]
 800442c:	e004      	b.n	8004438 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	461a      	mov	r2, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	3301      	adds	r3, #1
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b03      	cmp	r3, #3
 8004442:	d9b3      	bls.n	80043ac <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	691a      	ldr	r2, [r3, #16]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800446e:	60da      	str	r2, [r3, #12]
}
 8004470:	bf00      	nop
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800447c:	b480      	push	{r7}
 800447e:	b089      	sub	sp, #36	@ 0x24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004486:	2300      	movs	r3, #0
 8004488:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800448a:	2300      	movs	r3, #0
 800448c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800448e:	2300      	movs	r3, #0
 8004490:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004492:	2300      	movs	r3, #0
 8004494:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004496:	2300      	movs	r3, #0
 8004498:	61fb      	str	r3, [r7, #28]
 800449a:	e175      	b.n	8004788 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800449c:	2201      	movs	r2, #1
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	4013      	ands	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	f040 8164 	bne.w	8004782 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f003 0303 	and.w	r3, r3, #3
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d005      	beq.n	80044d2 <HAL_GPIO_Init+0x56>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d130      	bne.n	8004534 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	2203      	movs	r2, #3
 80044de:	fa02 f303 	lsl.w	r3, r2, r3
 80044e2:	43db      	mvns	r3, r3
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	4013      	ands	r3, r2
 80044e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004508:	2201      	movs	r2, #1
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	43db      	mvns	r3, r3
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	4013      	ands	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	091b      	lsrs	r3, r3, #4
 800451e:	f003 0201 	and.w	r2, r3, #1
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4313      	orrs	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f003 0303 	and.w	r3, r3, #3
 800453c:	2b03      	cmp	r3, #3
 800453e:	d017      	beq.n	8004570 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	2203      	movs	r2, #3
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	43db      	mvns	r3, r3
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	4013      	ands	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	4313      	orrs	r3, r2
 8004568:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f003 0303 	and.w	r3, r3, #3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d123      	bne.n	80045c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	08da      	lsrs	r2, r3, #3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3208      	adds	r2, #8
 8004584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	220f      	movs	r2, #15
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	43db      	mvns	r3, r3
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4013      	ands	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	691a      	ldr	r2, [r3, #16]
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	08da      	lsrs	r2, r3, #3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	3208      	adds	r2, #8
 80045be:	69b9      	ldr	r1, [r7, #24]
 80045c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	2203      	movs	r2, #3
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	43db      	mvns	r3, r3
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	4013      	ands	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f003 0203 	and.w	r2, r3, #3
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 80be 	beq.w	8004782 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004606:	4b66      	ldr	r3, [pc, #408]	@ (80047a0 <HAL_GPIO_Init+0x324>)
 8004608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800460a:	4a65      	ldr	r2, [pc, #404]	@ (80047a0 <HAL_GPIO_Init+0x324>)
 800460c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004610:	6453      	str	r3, [r2, #68]	@ 0x44
 8004612:	4b63      	ldr	r3, [pc, #396]	@ (80047a0 <HAL_GPIO_Init+0x324>)
 8004614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004616:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800461e:	4a61      	ldr	r2, [pc, #388]	@ (80047a4 <HAL_GPIO_Init+0x328>)
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	089b      	lsrs	r3, r3, #2
 8004624:	3302      	adds	r3, #2
 8004626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800462a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	220f      	movs	r2, #15
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	43db      	mvns	r3, r3
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	4013      	ands	r3, r2
 8004640:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a58      	ldr	r2, [pc, #352]	@ (80047a8 <HAL_GPIO_Init+0x32c>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d037      	beq.n	80046ba <HAL_GPIO_Init+0x23e>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a57      	ldr	r2, [pc, #348]	@ (80047ac <HAL_GPIO_Init+0x330>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d031      	beq.n	80046b6 <HAL_GPIO_Init+0x23a>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a56      	ldr	r2, [pc, #344]	@ (80047b0 <HAL_GPIO_Init+0x334>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d02b      	beq.n	80046b2 <HAL_GPIO_Init+0x236>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a55      	ldr	r2, [pc, #340]	@ (80047b4 <HAL_GPIO_Init+0x338>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d025      	beq.n	80046ae <HAL_GPIO_Init+0x232>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a54      	ldr	r2, [pc, #336]	@ (80047b8 <HAL_GPIO_Init+0x33c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d01f      	beq.n	80046aa <HAL_GPIO_Init+0x22e>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a53      	ldr	r2, [pc, #332]	@ (80047bc <HAL_GPIO_Init+0x340>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d019      	beq.n	80046a6 <HAL_GPIO_Init+0x22a>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a52      	ldr	r2, [pc, #328]	@ (80047c0 <HAL_GPIO_Init+0x344>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d013      	beq.n	80046a2 <HAL_GPIO_Init+0x226>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a51      	ldr	r2, [pc, #324]	@ (80047c4 <HAL_GPIO_Init+0x348>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00d      	beq.n	800469e <HAL_GPIO_Init+0x222>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a50      	ldr	r2, [pc, #320]	@ (80047c8 <HAL_GPIO_Init+0x34c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d007      	beq.n	800469a <HAL_GPIO_Init+0x21e>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a4f      	ldr	r2, [pc, #316]	@ (80047cc <HAL_GPIO_Init+0x350>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d101      	bne.n	8004696 <HAL_GPIO_Init+0x21a>
 8004692:	2309      	movs	r3, #9
 8004694:	e012      	b.n	80046bc <HAL_GPIO_Init+0x240>
 8004696:	230a      	movs	r3, #10
 8004698:	e010      	b.n	80046bc <HAL_GPIO_Init+0x240>
 800469a:	2308      	movs	r3, #8
 800469c:	e00e      	b.n	80046bc <HAL_GPIO_Init+0x240>
 800469e:	2307      	movs	r3, #7
 80046a0:	e00c      	b.n	80046bc <HAL_GPIO_Init+0x240>
 80046a2:	2306      	movs	r3, #6
 80046a4:	e00a      	b.n	80046bc <HAL_GPIO_Init+0x240>
 80046a6:	2305      	movs	r3, #5
 80046a8:	e008      	b.n	80046bc <HAL_GPIO_Init+0x240>
 80046aa:	2304      	movs	r3, #4
 80046ac:	e006      	b.n	80046bc <HAL_GPIO_Init+0x240>
 80046ae:	2303      	movs	r3, #3
 80046b0:	e004      	b.n	80046bc <HAL_GPIO_Init+0x240>
 80046b2:	2302      	movs	r3, #2
 80046b4:	e002      	b.n	80046bc <HAL_GPIO_Init+0x240>
 80046b6:	2301      	movs	r3, #1
 80046b8:	e000      	b.n	80046bc <HAL_GPIO_Init+0x240>
 80046ba:	2300      	movs	r3, #0
 80046bc:	69fa      	ldr	r2, [r7, #28]
 80046be:	f002 0203 	and.w	r2, r2, #3
 80046c2:	0092      	lsls	r2, r2, #2
 80046c4:	4093      	lsls	r3, r2
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80046cc:	4935      	ldr	r1, [pc, #212]	@ (80047a4 <HAL_GPIO_Init+0x328>)
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	089b      	lsrs	r3, r3, #2
 80046d2:	3302      	adds	r3, #2
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046da:	4b3d      	ldr	r3, [pc, #244]	@ (80047d0 <HAL_GPIO_Init+0x354>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	43db      	mvns	r3, r3
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	4013      	ands	r3, r2
 80046e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046fe:	4a34      	ldr	r2, [pc, #208]	@ (80047d0 <HAL_GPIO_Init+0x354>)
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004704:	4b32      	ldr	r3, [pc, #200]	@ (80047d0 <HAL_GPIO_Init+0x354>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	43db      	mvns	r3, r3
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	4013      	ands	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	4313      	orrs	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004728:	4a29      	ldr	r2, [pc, #164]	@ (80047d0 <HAL_GPIO_Init+0x354>)
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800472e:	4b28      	ldr	r3, [pc, #160]	@ (80047d0 <HAL_GPIO_Init+0x354>)
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	43db      	mvns	r3, r3
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	4013      	ands	r3, r2
 800473c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	4313      	orrs	r3, r2
 8004750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004752:	4a1f      	ldr	r2, [pc, #124]	@ (80047d0 <HAL_GPIO_Init+0x354>)
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004758:	4b1d      	ldr	r3, [pc, #116]	@ (80047d0 <HAL_GPIO_Init+0x354>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	43db      	mvns	r3, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4013      	ands	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	4313      	orrs	r3, r2
 800477a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800477c:	4a14      	ldr	r2, [pc, #80]	@ (80047d0 <HAL_GPIO_Init+0x354>)
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	3301      	adds	r3, #1
 8004786:	61fb      	str	r3, [r7, #28]
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	2b0f      	cmp	r3, #15
 800478c:	f67f ae86 	bls.w	800449c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004790:	bf00      	nop
 8004792:	bf00      	nop
 8004794:	3724      	adds	r7, #36	@ 0x24
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	40023800 	.word	0x40023800
 80047a4:	40013800 	.word	0x40013800
 80047a8:	40020000 	.word	0x40020000
 80047ac:	40020400 	.word	0x40020400
 80047b0:	40020800 	.word	0x40020800
 80047b4:	40020c00 	.word	0x40020c00
 80047b8:	40021000 	.word	0x40021000
 80047bc:	40021400 	.word	0x40021400
 80047c0:	40021800 	.word	0x40021800
 80047c4:	40021c00 	.word	0x40021c00
 80047c8:	40022000 	.word	0x40022000
 80047cc:	40022400 	.word	0x40022400
 80047d0:	40013c00 	.word	0x40013c00

080047d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	460b      	mov	r3, r1
 80047de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	887b      	ldrh	r3, [r7, #2]
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047ec:	2301      	movs	r3, #1
 80047ee:	73fb      	strb	r3, [r7, #15]
 80047f0:	e001      	b.n	80047f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047f2:	2300      	movs	r3, #0
 80047f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	807b      	strh	r3, [r7, #2]
 8004810:	4613      	mov	r3, r2
 8004812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004814:	787b      	ldrb	r3, [r7, #1]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800481a:	887a      	ldrh	r2, [r7, #2]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004820:	e003      	b.n	800482a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004822:	887b      	ldrh	r3, [r7, #2]
 8004824:	041a      	lsls	r2, r3, #16
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	619a      	str	r2, [r3, #24]
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b086      	sub	sp, #24
 800483a:	af02      	add	r7, sp, #8
 800483c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e059      	b.n	80048fc <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d106      	bne.n	8004868 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f00e fd3a 	bl	80132dc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2203      	movs	r2, #3
 800486c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004876:	d102      	bne.n	800487e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f008 fbcb 	bl	800d01e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	7c1a      	ldrb	r2, [r3, #16]
 8004890:	f88d 2000 	strb.w	r2, [sp]
 8004894:	3304      	adds	r3, #4
 8004896:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004898:	f008 fb56 	bl	800cf48 <USB_CoreInit>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d005      	beq.n	80048ae <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2202      	movs	r2, #2
 80048a6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e026      	b.n	80048fc <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2101      	movs	r1, #1
 80048b4:	4618      	mov	r0, r3
 80048b6:	f008 fbc3 	bl	800d040 <USB_SetCurrentMode>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e017      	b.n	80048fc <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	7c1a      	ldrb	r2, [r3, #16]
 80048d4:	f88d 2000 	strb.w	r2, [sp]
 80048d8:	3304      	adds	r3, #4
 80048da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048dc:	f008 fd6c 	bl	800d3b8 <USB_HostInit>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d005      	beq.n	80048f2 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2202      	movs	r2, #2
 80048ea:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e004      	b.n	80048fc <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004904:	b590      	push	{r4, r7, lr}
 8004906:	b08b      	sub	sp, #44	@ 0x2c
 8004908:	af04      	add	r7, sp, #16
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	4608      	mov	r0, r1
 800490e:	4611      	mov	r1, r2
 8004910:	461a      	mov	r2, r3
 8004912:	4603      	mov	r3, r0
 8004914:	70fb      	strb	r3, [r7, #3]
 8004916:	460b      	mov	r3, r1
 8004918:	70bb      	strb	r3, [r7, #2]
 800491a:	4613      	mov	r3, r2
 800491c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800491e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004920:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004928:	2b01      	cmp	r3, #1
 800492a:	d101      	bne.n	8004930 <HAL_HCD_HC_Init+0x2c>
 800492c:	2302      	movs	r3, #2
 800492e:	e09d      	b.n	8004a6c <HAL_HCD_HC_Init+0x168>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8004938:	78fa      	ldrb	r2, [r7, #3]
 800493a:	6879      	ldr	r1, [r7, #4]
 800493c:	4613      	mov	r3, r2
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	1a9b      	subs	r3, r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	440b      	add	r3, r1
 8004946:	3319      	adds	r3, #25
 8004948:	2200      	movs	r2, #0
 800494a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800494c:	78fa      	ldrb	r2, [r7, #3]
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	4613      	mov	r3, r2
 8004952:	011b      	lsls	r3, r3, #4
 8004954:	1a9b      	subs	r3, r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	440b      	add	r3, r1
 800495a:	3314      	adds	r3, #20
 800495c:	787a      	ldrb	r2, [r7, #1]
 800495e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004960:	78fa      	ldrb	r2, [r7, #3]
 8004962:	6879      	ldr	r1, [r7, #4]
 8004964:	4613      	mov	r3, r2
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	1a9b      	subs	r3, r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	440b      	add	r3, r1
 800496e:	3315      	adds	r3, #21
 8004970:	78fa      	ldrb	r2, [r7, #3]
 8004972:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004974:	78fa      	ldrb	r2, [r7, #3]
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	4613      	mov	r3, r2
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	1a9b      	subs	r3, r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	440b      	add	r3, r1
 8004982:	3326      	adds	r3, #38	@ 0x26
 8004984:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8004988:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800498a:	78fa      	ldrb	r2, [r7, #3]
 800498c:	78bb      	ldrb	r3, [r7, #2]
 800498e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004992:	b2d8      	uxtb	r0, r3
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	4613      	mov	r3, r2
 8004998:	011b      	lsls	r3, r3, #4
 800499a:	1a9b      	subs	r3, r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	440b      	add	r3, r1
 80049a0:	3316      	adds	r3, #22
 80049a2:	4602      	mov	r2, r0
 80049a4:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80049a6:	78fb      	ldrb	r3, [r7, #3]
 80049a8:	4619      	mov	r1, r3
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fbc8 	bl	8005140 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80049b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	da0a      	bge.n	80049ce <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80049b8:	78fa      	ldrb	r2, [r7, #3]
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	4613      	mov	r3, r2
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	1a9b      	subs	r3, r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	440b      	add	r3, r1
 80049c6:	3317      	adds	r3, #23
 80049c8:	2201      	movs	r2, #1
 80049ca:	701a      	strb	r2, [r3, #0]
 80049cc:	e009      	b.n	80049e2 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80049ce:	78fa      	ldrb	r2, [r7, #3]
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	4613      	mov	r3, r2
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	1a9b      	subs	r3, r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	440b      	add	r3, r1
 80049dc:	3317      	adds	r3, #23
 80049de:	2200      	movs	r2, #0
 80049e0:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f008 fe3e 	bl	800d668 <USB_GetHostSpeed>
 80049ec:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80049ee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d10b      	bne.n	8004a0e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80049f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d107      	bne.n	8004a0e <HAL_HCD_HC_Init+0x10a>
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d104      	bne.n	8004a0e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	2bbc      	cmp	r3, #188	@ 0xbc
 8004a08:	d901      	bls.n	8004a0e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8004a0a:	23bc      	movs	r3, #188	@ 0xbc
 8004a0c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8004a0e:	78fa      	ldrb	r2, [r7, #3]
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	4613      	mov	r3, r2
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	1a9b      	subs	r3, r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	440b      	add	r3, r1
 8004a1c:	3318      	adds	r3, #24
 8004a1e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004a22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8004a24:	78fa      	ldrb	r2, [r7, #3]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	b298      	uxth	r0, r3
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	011b      	lsls	r3, r3, #4
 8004a30:	1a9b      	subs	r3, r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	3328      	adds	r3, #40	@ 0x28
 8004a38:	4602      	mov	r2, r0
 8004a3a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6818      	ldr	r0, [r3, #0]
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	787c      	ldrb	r4, [r7, #1]
 8004a46:	78ba      	ldrb	r2, [r7, #2]
 8004a48:	78f9      	ldrb	r1, [r7, #3]
 8004a4a:	9302      	str	r3, [sp, #8]
 8004a4c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004a50:	9301      	str	r3, [sp, #4]
 8004a52:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	4623      	mov	r3, r4
 8004a5a:	f008 fe2d 	bl	800d6b8 <USB_HC_Init>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	371c      	adds	r7, #28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd90      	pop	{r4, r7, pc}

08004a74 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004a80:	2300      	movs	r3, #0
 8004a82:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d101      	bne.n	8004a92 <HAL_HCD_HC_Halt+0x1e>
 8004a8e:	2302      	movs	r3, #2
 8004a90:	e00f      	b.n	8004ab2 <HAL_HCD_HC_Halt+0x3e>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	78fa      	ldrb	r2, [r7, #3]
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f009 f9bf 	bl	800de26 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
	...

08004abc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	4608      	mov	r0, r1
 8004ac6:	4611      	mov	r1, r2
 8004ac8:	461a      	mov	r2, r3
 8004aca:	4603      	mov	r3, r0
 8004acc:	70fb      	strb	r3, [r7, #3]
 8004ace:	460b      	mov	r3, r1
 8004ad0:	70bb      	strb	r3, [r7, #2]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004ad6:	78fa      	ldrb	r2, [r7, #3]
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	4613      	mov	r3, r2
 8004adc:	011b      	lsls	r3, r3, #4
 8004ade:	1a9b      	subs	r3, r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	440b      	add	r3, r1
 8004ae4:	3317      	adds	r3, #23
 8004ae6:	78ba      	ldrb	r2, [r7, #2]
 8004ae8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004aea:	78fa      	ldrb	r2, [r7, #3]
 8004aec:	6879      	ldr	r1, [r7, #4]
 8004aee:	4613      	mov	r3, r2
 8004af0:	011b      	lsls	r3, r3, #4
 8004af2:	1a9b      	subs	r3, r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	440b      	add	r3, r1
 8004af8:	3326      	adds	r3, #38	@ 0x26
 8004afa:	787a      	ldrb	r2, [r7, #1]
 8004afc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004afe:	7c3b      	ldrb	r3, [r7, #16]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d114      	bne.n	8004b2e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004b04:	78fa      	ldrb	r2, [r7, #3]
 8004b06:	6879      	ldr	r1, [r7, #4]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	1a9b      	subs	r3, r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	440b      	add	r3, r1
 8004b12:	332a      	adds	r3, #42	@ 0x2a
 8004b14:	2203      	movs	r2, #3
 8004b16:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004b18:	78fa      	ldrb	r2, [r7, #3]
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	1a9b      	subs	r3, r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	3319      	adds	r3, #25
 8004b28:	7f3a      	ldrb	r2, [r7, #28]
 8004b2a:	701a      	strb	r2, [r3, #0]
 8004b2c:	e009      	b.n	8004b42 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b2e:	78fa      	ldrb	r2, [r7, #3]
 8004b30:	6879      	ldr	r1, [r7, #4]
 8004b32:	4613      	mov	r3, r2
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	1a9b      	subs	r3, r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	440b      	add	r3, r1
 8004b3c:	332a      	adds	r3, #42	@ 0x2a
 8004b3e:	2202      	movs	r2, #2
 8004b40:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004b42:	787b      	ldrb	r3, [r7, #1]
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	f200 8102 	bhi.w	8004d4e <HAL_HCD_HC_SubmitRequest+0x292>
 8004b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b50 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b50:	08004b61 	.word	0x08004b61
 8004b54:	08004d39 	.word	0x08004d39
 8004b58:	08004c25 	.word	0x08004c25
 8004b5c:	08004caf 	.word	0x08004caf
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8004b60:	7c3b      	ldrb	r3, [r7, #16]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	f040 80f5 	bne.w	8004d52 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8004b68:	78bb      	ldrb	r3, [r7, #2]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d12d      	bne.n	8004bca <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8004b6e:	8b3b      	ldrh	r3, [r7, #24]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d109      	bne.n	8004b88 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8004b74:	78fa      	ldrb	r2, [r7, #3]
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	011b      	lsls	r3, r3, #4
 8004b7c:	1a9b      	subs	r3, r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	440b      	add	r3, r1
 8004b82:	333d      	adds	r3, #61	@ 0x3d
 8004b84:	2201      	movs	r2, #1
 8004b86:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8004b88:	78fa      	ldrb	r2, [r7, #3]
 8004b8a:	6879      	ldr	r1, [r7, #4]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	1a9b      	subs	r3, r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	440b      	add	r3, r1
 8004b96:	333d      	adds	r3, #61	@ 0x3d
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10a      	bne.n	8004bb4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b9e:	78fa      	ldrb	r2, [r7, #3]
 8004ba0:	6879      	ldr	r1, [r7, #4]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	1a9b      	subs	r3, r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	440b      	add	r3, r1
 8004bac:	332a      	adds	r3, #42	@ 0x2a
 8004bae:	2200      	movs	r2, #0
 8004bb0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8004bb2:	e0ce      	b.n	8004d52 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004bb4:	78fa      	ldrb	r2, [r7, #3]
 8004bb6:	6879      	ldr	r1, [r7, #4]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	1a9b      	subs	r3, r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	332a      	adds	r3, #42	@ 0x2a
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	701a      	strb	r2, [r3, #0]
      break;
 8004bc8:	e0c3      	b.n	8004d52 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8004bca:	78fa      	ldrb	r2, [r7, #3]
 8004bcc:	6879      	ldr	r1, [r7, #4]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	011b      	lsls	r3, r3, #4
 8004bd2:	1a9b      	subs	r3, r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	440b      	add	r3, r1
 8004bd8:	331a      	adds	r3, #26
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	f040 80b8 	bne.w	8004d52 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8004be2:	78fa      	ldrb	r2, [r7, #3]
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	4613      	mov	r3, r2
 8004be8:	011b      	lsls	r3, r3, #4
 8004bea:	1a9b      	subs	r3, r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	440b      	add	r3, r1
 8004bf0:	333c      	adds	r3, #60	@ 0x3c
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10a      	bne.n	8004c0e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004bf8:	78fa      	ldrb	r2, [r7, #3]
 8004bfa:	6879      	ldr	r1, [r7, #4]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	1a9b      	subs	r3, r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	440b      	add	r3, r1
 8004c06:	332a      	adds	r3, #42	@ 0x2a
 8004c08:	2200      	movs	r2, #0
 8004c0a:	701a      	strb	r2, [r3, #0]
      break;
 8004c0c:	e0a1      	b.n	8004d52 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c0e:	78fa      	ldrb	r2, [r7, #3]
 8004c10:	6879      	ldr	r1, [r7, #4]
 8004c12:	4613      	mov	r3, r2
 8004c14:	011b      	lsls	r3, r3, #4
 8004c16:	1a9b      	subs	r3, r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	440b      	add	r3, r1
 8004c1c:	332a      	adds	r3, #42	@ 0x2a
 8004c1e:	2202      	movs	r2, #2
 8004c20:	701a      	strb	r2, [r3, #0]
      break;
 8004c22:	e096      	b.n	8004d52 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004c24:	78bb      	ldrb	r3, [r7, #2]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d120      	bne.n	8004c6c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004c2a:	78fa      	ldrb	r2, [r7, #3]
 8004c2c:	6879      	ldr	r1, [r7, #4]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	011b      	lsls	r3, r3, #4
 8004c32:	1a9b      	subs	r3, r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	440b      	add	r3, r1
 8004c38:	333d      	adds	r3, #61	@ 0x3d
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10a      	bne.n	8004c56 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c40:	78fa      	ldrb	r2, [r7, #3]
 8004c42:	6879      	ldr	r1, [r7, #4]
 8004c44:	4613      	mov	r3, r2
 8004c46:	011b      	lsls	r3, r3, #4
 8004c48:	1a9b      	subs	r3, r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	332a      	adds	r3, #42	@ 0x2a
 8004c50:	2200      	movs	r2, #0
 8004c52:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004c54:	e07e      	b.n	8004d54 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c56:	78fa      	ldrb	r2, [r7, #3]
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	011b      	lsls	r3, r3, #4
 8004c5e:	1a9b      	subs	r3, r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	440b      	add	r3, r1
 8004c64:	332a      	adds	r3, #42	@ 0x2a
 8004c66:	2202      	movs	r2, #2
 8004c68:	701a      	strb	r2, [r3, #0]
      break;
 8004c6a:	e073      	b.n	8004d54 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004c6c:	78fa      	ldrb	r2, [r7, #3]
 8004c6e:	6879      	ldr	r1, [r7, #4]
 8004c70:	4613      	mov	r3, r2
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	1a9b      	subs	r3, r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	440b      	add	r3, r1
 8004c7a:	333c      	adds	r3, #60	@ 0x3c
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10a      	bne.n	8004c98 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c82:	78fa      	ldrb	r2, [r7, #3]
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	4613      	mov	r3, r2
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	1a9b      	subs	r3, r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	440b      	add	r3, r1
 8004c90:	332a      	adds	r3, #42	@ 0x2a
 8004c92:	2200      	movs	r2, #0
 8004c94:	701a      	strb	r2, [r3, #0]
      break;
 8004c96:	e05d      	b.n	8004d54 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c98:	78fa      	ldrb	r2, [r7, #3]
 8004c9a:	6879      	ldr	r1, [r7, #4]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	011b      	lsls	r3, r3, #4
 8004ca0:	1a9b      	subs	r3, r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	440b      	add	r3, r1
 8004ca6:	332a      	adds	r3, #42	@ 0x2a
 8004ca8:	2202      	movs	r2, #2
 8004caa:	701a      	strb	r2, [r3, #0]
      break;
 8004cac:	e052      	b.n	8004d54 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004cae:	78bb      	ldrb	r3, [r7, #2]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d120      	bne.n	8004cf6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004cb4:	78fa      	ldrb	r2, [r7, #3]
 8004cb6:	6879      	ldr	r1, [r7, #4]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	1a9b      	subs	r3, r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	333d      	adds	r3, #61	@ 0x3d
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10a      	bne.n	8004ce0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004cca:	78fa      	ldrb	r2, [r7, #3]
 8004ccc:	6879      	ldr	r1, [r7, #4]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	1a9b      	subs	r3, r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	440b      	add	r3, r1
 8004cd8:	332a      	adds	r3, #42	@ 0x2a
 8004cda:	2200      	movs	r2, #0
 8004cdc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004cde:	e039      	b.n	8004d54 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ce0:	78fa      	ldrb	r2, [r7, #3]
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	011b      	lsls	r3, r3, #4
 8004ce8:	1a9b      	subs	r3, r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	440b      	add	r3, r1
 8004cee:	332a      	adds	r3, #42	@ 0x2a
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	701a      	strb	r2, [r3, #0]
      break;
 8004cf4:	e02e      	b.n	8004d54 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004cf6:	78fa      	ldrb	r2, [r7, #3]
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	1a9b      	subs	r3, r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	440b      	add	r3, r1
 8004d04:	333c      	adds	r3, #60	@ 0x3c
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10a      	bne.n	8004d22 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d0c:	78fa      	ldrb	r2, [r7, #3]
 8004d0e:	6879      	ldr	r1, [r7, #4]
 8004d10:	4613      	mov	r3, r2
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	1a9b      	subs	r3, r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	440b      	add	r3, r1
 8004d1a:	332a      	adds	r3, #42	@ 0x2a
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	701a      	strb	r2, [r3, #0]
      break;
 8004d20:	e018      	b.n	8004d54 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d22:	78fa      	ldrb	r2, [r7, #3]
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	4613      	mov	r3, r2
 8004d28:	011b      	lsls	r3, r3, #4
 8004d2a:	1a9b      	subs	r3, r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	440b      	add	r3, r1
 8004d30:	332a      	adds	r3, #42	@ 0x2a
 8004d32:	2202      	movs	r2, #2
 8004d34:	701a      	strb	r2, [r3, #0]
      break;
 8004d36:	e00d      	b.n	8004d54 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d38:	78fa      	ldrb	r2, [r7, #3]
 8004d3a:	6879      	ldr	r1, [r7, #4]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	1a9b      	subs	r3, r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	332a      	adds	r3, #42	@ 0x2a
 8004d48:	2200      	movs	r2, #0
 8004d4a:	701a      	strb	r2, [r3, #0]
      break;
 8004d4c:	e002      	b.n	8004d54 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8004d4e:	bf00      	nop
 8004d50:	e000      	b.n	8004d54 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8004d52:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004d54:	78fa      	ldrb	r2, [r7, #3]
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	011b      	lsls	r3, r3, #4
 8004d5c:	1a9b      	subs	r3, r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	440b      	add	r3, r1
 8004d62:	332c      	adds	r3, #44	@ 0x2c
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004d68:	78fa      	ldrb	r2, [r7, #3]
 8004d6a:	8b39      	ldrh	r1, [r7, #24]
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	1a9b      	subs	r3, r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4403      	add	r3, r0
 8004d78:	3334      	adds	r3, #52	@ 0x34
 8004d7a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004d7c:	78fa      	ldrb	r2, [r7, #3]
 8004d7e:	6879      	ldr	r1, [r7, #4]
 8004d80:	4613      	mov	r3, r2
 8004d82:	011b      	lsls	r3, r3, #4
 8004d84:	1a9b      	subs	r3, r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	440b      	add	r3, r1
 8004d8a:	334c      	adds	r3, #76	@ 0x4c
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004d90:	78fa      	ldrb	r2, [r7, #3]
 8004d92:	6879      	ldr	r1, [r7, #4]
 8004d94:	4613      	mov	r3, r2
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	1a9b      	subs	r3, r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	3338      	adds	r3, #56	@ 0x38
 8004da0:	2200      	movs	r2, #0
 8004da2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004da4:	78fa      	ldrb	r2, [r7, #3]
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	4613      	mov	r3, r2
 8004daa:	011b      	lsls	r3, r3, #4
 8004dac:	1a9b      	subs	r3, r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	440b      	add	r3, r1
 8004db2:	3315      	adds	r3, #21
 8004db4:	78fa      	ldrb	r2, [r7, #3]
 8004db6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004db8:	78fa      	ldrb	r2, [r7, #3]
 8004dba:	6879      	ldr	r1, [r7, #4]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	334d      	adds	r3, #77	@ 0x4d
 8004dc8:	2200      	movs	r2, #0
 8004dca:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6818      	ldr	r0, [r3, #0]
 8004dd0:	78fa      	ldrb	r2, [r7, #3]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	1a9b      	subs	r3, r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	3310      	adds	r3, #16
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	4413      	add	r3, r2
 8004de0:	1d19      	adds	r1, r3, #4
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	799b      	ldrb	r3, [r3, #6]
 8004de6:	461a      	mov	r2, r3
 8004de8:	f008 fd92 	bl	800d910 <USB_HC_StartXfer>
 8004dec:	4603      	mov	r3, r0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop

08004df8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f008 fa8c 	bl	800d32c <USB_GetMode>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	f040 80fb 	bne.w	8005012 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f008 fa4f 	bl	800d2c4 <USB_ReadInterrupts>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 80f1 	beq.w	8005010 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f008 fa46 	bl	800d2c4 <USB_ReadInterrupts>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e42:	d104      	bne.n	8004e4e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004e4c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f008 fa36 	bl	800d2c4 <USB_ReadInterrupts>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e62:	d104      	bne.n	8004e6e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004e6c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f008 fa26 	bl	800d2c4 <USB_ReadInterrupts>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e82:	d104      	bne.n	8004e8e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004e8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f008 fa16 	bl	800d2c4 <USB_ReadInterrupts>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d103      	bne.n	8004eaa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f008 fa08 	bl	800d2c4 <USB_ReadInterrupts>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004eba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ebe:	d120      	bne.n	8004f02 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004ec8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d113      	bne.n	8004f02 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004eda:	2110      	movs	r1, #16
 8004edc:	6938      	ldr	r0, [r7, #16]
 8004ede:	f008 f8fb 	bl	800d0d8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004ee2:	6938      	ldr	r0, [r7, #16]
 8004ee4:	f008 f92a 	bl	800d13c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	7a5b      	ldrb	r3, [r3, #9]
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d105      	bne.n	8004efc <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f008 fb16 	bl	800d528 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f00e fa5f 	bl	80133c0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f008 f9dc 	bl	800d2c4 <USB_ReadInterrupts>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f16:	d102      	bne.n	8004f1e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f001 fd4d 	bl	80069b8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f008 f9ce 	bl	800d2c4 <USB_ReadInterrupts>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	f003 0308 	and.w	r3, r3, #8
 8004f2e:	2b08      	cmp	r3, #8
 8004f30:	d106      	bne.n	8004f40 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f00e fa28 	bl	8013388 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2208      	movs	r2, #8
 8004f3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f008 f9bd 	bl	800d2c4 <USB_ReadInterrupts>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f54:	d139      	bne.n	8004fca <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f008 ff52 	bl	800de04 <USB_HC_ReadInterrupt>
 8004f60:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004f62:	2300      	movs	r3, #0
 8004f64:	617b      	str	r3, [r7, #20]
 8004f66:	e025      	b.n	8004fb4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	fa22 f303 	lsr.w	r3, r2, r3
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d018      	beq.n	8004fae <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f92:	d106      	bne.n	8004fa2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	4619      	mov	r1, r3
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f905 	bl	80051aa <HCD_HC_IN_IRQHandler>
 8004fa0:	e005      	b.n	8004fae <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 ff67 	bl	8005e7c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	617b      	str	r3, [r7, #20]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	795b      	ldrb	r3, [r3, #5]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d3d3      	bcc.n	8004f68 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004fc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f008 f978 	bl	800d2c4 <USB_ReadInterrupts>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	f003 0310 	and.w	r3, r3, #16
 8004fda:	2b10      	cmp	r3, #16
 8004fdc:	d101      	bne.n	8004fe2 <HAL_HCD_IRQHandler+0x1ea>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e000      	b.n	8004fe4 <HAL_HCD_IRQHandler+0x1ec>
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d014      	beq.n	8005012 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699a      	ldr	r2, [r3, #24]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0210 	bic.w	r2, r2, #16
 8004ff6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f001 fbfe 	bl	80067fa <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	699a      	ldr	r2, [r3, #24]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f042 0210 	orr.w	r2, r2, #16
 800500c:	619a      	str	r2, [r3, #24]
 800500e:	e000      	b.n	8005012 <HAL_HCD_IRQHandler+0x21a>
      return;
 8005010:	bf00      	nop
    }
  }
}
 8005012:	3718      	adds	r7, #24
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005026:	2b01      	cmp	r3, #1
 8005028:	d101      	bne.n	800502e <HAL_HCD_Start+0x16>
 800502a:	2302      	movs	r3, #2
 800502c:	e013      	b.n	8005056 <HAL_HCD_Start+0x3e>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2101      	movs	r1, #1
 800503c:	4618      	mov	r0, r3
 800503e:	f008 fada 	bl	800d5f6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4618      	mov	r0, r3
 8005048:	f007 ffd8 	bl	800cffc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b082      	sub	sp, #8
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800506c:	2b01      	cmp	r3, #1
 800506e:	d101      	bne.n	8005074 <HAL_HCD_Stop+0x16>
 8005070:	2302      	movs	r3, #2
 8005072:	e00d      	b.n	8005090 <HAL_HCD_Stop+0x32>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4618      	mov	r0, r3
 8005082:	f009 f82d 	bl	800e0e0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f008 fa7c 	bl	800d5a2 <USB_ResetPort>
 80050aa:	4603      	mov	r3, r0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	460b      	mov	r3, r1
 80050be:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80050c0:	78fa      	ldrb	r2, [r7, #3]
 80050c2:	6879      	ldr	r1, [r7, #4]
 80050c4:	4613      	mov	r3, r2
 80050c6:	011b      	lsls	r3, r3, #4
 80050c8:	1a9b      	subs	r3, r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	440b      	add	r3, r1
 80050ce:	334c      	adds	r3, #76	@ 0x4c
 80050d0:	781b      	ldrb	r3, [r3, #0]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	460b      	mov	r3, r1
 80050e8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80050ea:	78fa      	ldrb	r2, [r7, #3]
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	4613      	mov	r3, r2
 80050f0:	011b      	lsls	r3, r3, #4
 80050f2:	1a9b      	subs	r3, r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	440b      	add	r3, r1
 80050f8:	3338      	adds	r3, #56	@ 0x38
 80050fa:	681b      	ldr	r3, [r3, #0]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4618      	mov	r0, r3
 8005116:	f008 fabe 	bl	800d696 <USB_GetCurrentFrame>
 800511a:	4603      	mov	r3, r0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4618      	mov	r0, r3
 8005132:	f008 fa99 	bl	800d668 <USB_GetHostSpeed>
 8005136:	4603      	mov	r3, r0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	460b      	mov	r3, r1
 800514a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 800514c:	78fa      	ldrb	r2, [r7, #3]
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	4613      	mov	r3, r2
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	1a9b      	subs	r3, r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	440b      	add	r3, r1
 800515a:	331a      	adds	r3, #26
 800515c:	2200      	movs	r2, #0
 800515e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8005160:	78fa      	ldrb	r2, [r7, #3]
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	4613      	mov	r3, r2
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	1a9b      	subs	r3, r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	331b      	adds	r3, #27
 8005170:	2200      	movs	r2, #0
 8005172:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8005174:	78fa      	ldrb	r2, [r7, #3]
 8005176:	6879      	ldr	r1, [r7, #4]
 8005178:	4613      	mov	r3, r2
 800517a:	011b      	lsls	r3, r3, #4
 800517c:	1a9b      	subs	r3, r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	440b      	add	r3, r1
 8005182:	3325      	adds	r3, #37	@ 0x25
 8005184:	2200      	movs	r2, #0
 8005186:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8005188:	78fa      	ldrb	r2, [r7, #3]
 800518a:	6879      	ldr	r1, [r7, #4]
 800518c:	4613      	mov	r3, r2
 800518e:	011b      	lsls	r3, r3, #4
 8005190:	1a9b      	subs	r3, r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	440b      	add	r3, r1
 8005196:	3324      	adds	r3, #36	@ 0x24
 8005198:	2200      	movs	r2, #0
 800519a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b086      	sub	sp, #24
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
 80051b2:	460b      	mov	r3, r1
 80051b4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	78fa      	ldrb	r2, [r7, #3]
 80051c6:	4611      	mov	r1, r2
 80051c8:	4618      	mov	r0, r3
 80051ca:	f008 f88e 	bl	800d2ea <USB_ReadChInterrupts>
 80051ce:	4603      	mov	r3, r0
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d11a      	bne.n	800520e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80051d8:	78fb      	ldrb	r3, [r7, #3]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051e4:	461a      	mov	r2, r3
 80051e6:	2304      	movs	r3, #4
 80051e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80051ea:	78fa      	ldrb	r2, [r7, #3]
 80051ec:	6879      	ldr	r1, [r7, #4]
 80051ee:	4613      	mov	r3, r2
 80051f0:	011b      	lsls	r3, r3, #4
 80051f2:	1a9b      	subs	r3, r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	440b      	add	r3, r1
 80051f8:	334d      	adds	r3, #77	@ 0x4d
 80051fa:	2207      	movs	r2, #7
 80051fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	78fa      	ldrb	r2, [r7, #3]
 8005204:	4611      	mov	r1, r2
 8005206:	4618      	mov	r0, r3
 8005208:	f008 fe0d 	bl	800de26 <USB_HC_Halt>
 800520c:	e09e      	b.n	800534c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	78fa      	ldrb	r2, [r7, #3]
 8005214:	4611      	mov	r1, r2
 8005216:	4618      	mov	r0, r3
 8005218:	f008 f867 	bl	800d2ea <USB_ReadChInterrupts>
 800521c:	4603      	mov	r3, r0
 800521e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005222:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005226:	d11b      	bne.n	8005260 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8005228:	78fb      	ldrb	r3, [r7, #3]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	4413      	add	r3, r2
 8005230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005234:	461a      	mov	r2, r3
 8005236:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800523a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800523c:	78fa      	ldrb	r2, [r7, #3]
 800523e:	6879      	ldr	r1, [r7, #4]
 8005240:	4613      	mov	r3, r2
 8005242:	011b      	lsls	r3, r3, #4
 8005244:	1a9b      	subs	r3, r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	440b      	add	r3, r1
 800524a:	334d      	adds	r3, #77	@ 0x4d
 800524c:	2208      	movs	r2, #8
 800524e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	78fa      	ldrb	r2, [r7, #3]
 8005256:	4611      	mov	r1, r2
 8005258:	4618      	mov	r0, r3
 800525a:	f008 fde4 	bl	800de26 <USB_HC_Halt>
 800525e:	e075      	b.n	800534c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	78fa      	ldrb	r2, [r7, #3]
 8005266:	4611      	mov	r1, r2
 8005268:	4618      	mov	r0, r3
 800526a:	f008 f83e 	bl	800d2ea <USB_ReadChInterrupts>
 800526e:	4603      	mov	r3, r0
 8005270:	f003 0308 	and.w	r3, r3, #8
 8005274:	2b08      	cmp	r3, #8
 8005276:	d11a      	bne.n	80052ae <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005278:	78fb      	ldrb	r3, [r7, #3]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	4413      	add	r3, r2
 8005280:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005284:	461a      	mov	r2, r3
 8005286:	2308      	movs	r3, #8
 8005288:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800528a:	78fa      	ldrb	r2, [r7, #3]
 800528c:	6879      	ldr	r1, [r7, #4]
 800528e:	4613      	mov	r3, r2
 8005290:	011b      	lsls	r3, r3, #4
 8005292:	1a9b      	subs	r3, r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	440b      	add	r3, r1
 8005298:	334d      	adds	r3, #77	@ 0x4d
 800529a:	2206      	movs	r2, #6
 800529c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	78fa      	ldrb	r2, [r7, #3]
 80052a4:	4611      	mov	r1, r2
 80052a6:	4618      	mov	r0, r3
 80052a8:	f008 fdbd 	bl	800de26 <USB_HC_Halt>
 80052ac:	e04e      	b.n	800534c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	78fa      	ldrb	r2, [r7, #3]
 80052b4:	4611      	mov	r1, r2
 80052b6:	4618      	mov	r0, r3
 80052b8:	f008 f817 	bl	800d2ea <USB_ReadChInterrupts>
 80052bc:	4603      	mov	r3, r0
 80052be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052c6:	d11b      	bne.n	8005300 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80052c8:	78fb      	ldrb	r3, [r7, #3]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052d4:	461a      	mov	r2, r3
 80052d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052da:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80052dc:	78fa      	ldrb	r2, [r7, #3]
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	4613      	mov	r3, r2
 80052e2:	011b      	lsls	r3, r3, #4
 80052e4:	1a9b      	subs	r3, r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	440b      	add	r3, r1
 80052ea:	334d      	adds	r3, #77	@ 0x4d
 80052ec:	2209      	movs	r2, #9
 80052ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	78fa      	ldrb	r2, [r7, #3]
 80052f6:	4611      	mov	r1, r2
 80052f8:	4618      	mov	r0, r3
 80052fa:	f008 fd94 	bl	800de26 <USB_HC_Halt>
 80052fe:	e025      	b.n	800534c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	78fa      	ldrb	r2, [r7, #3]
 8005306:	4611      	mov	r1, r2
 8005308:	4618      	mov	r0, r3
 800530a:	f007 ffee 	bl	800d2ea <USB_ReadChInterrupts>
 800530e:	4603      	mov	r3, r0
 8005310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005314:	2b80      	cmp	r3, #128	@ 0x80
 8005316:	d119      	bne.n	800534c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005318:	78fb      	ldrb	r3, [r7, #3]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	4413      	add	r3, r2
 8005320:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005324:	461a      	mov	r2, r3
 8005326:	2380      	movs	r3, #128	@ 0x80
 8005328:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800532a:	78fa      	ldrb	r2, [r7, #3]
 800532c:	6879      	ldr	r1, [r7, #4]
 800532e:	4613      	mov	r3, r2
 8005330:	011b      	lsls	r3, r3, #4
 8005332:	1a9b      	subs	r3, r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	440b      	add	r3, r1
 8005338:	334d      	adds	r3, #77	@ 0x4d
 800533a:	2207      	movs	r2, #7
 800533c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	78fa      	ldrb	r2, [r7, #3]
 8005344:	4611      	mov	r1, r2
 8005346:	4618      	mov	r0, r3
 8005348:	f008 fd6d 	bl	800de26 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	78fa      	ldrb	r2, [r7, #3]
 8005352:	4611      	mov	r1, r2
 8005354:	4618      	mov	r0, r3
 8005356:	f007 ffc8 	bl	800d2ea <USB_ReadChInterrupts>
 800535a:	4603      	mov	r3, r0
 800535c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005360:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005364:	d112      	bne.n	800538c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	78fa      	ldrb	r2, [r7, #3]
 800536c:	4611      	mov	r1, r2
 800536e:	4618      	mov	r0, r3
 8005370:	f008 fd59 	bl	800de26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005374:	78fb      	ldrb	r3, [r7, #3]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	4413      	add	r3, r2
 800537c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005380:	461a      	mov	r2, r3
 8005382:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005386:	6093      	str	r3, [r2, #8]
 8005388:	f000 bd75 	b.w	8005e76 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	78fa      	ldrb	r2, [r7, #3]
 8005392:	4611      	mov	r1, r2
 8005394:	4618      	mov	r0, r3
 8005396:	f007 ffa8 	bl	800d2ea <USB_ReadChInterrupts>
 800539a:	4603      	mov	r3, r0
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	f040 8128 	bne.w	80055f6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80053a6:	78fb      	ldrb	r3, [r7, #3]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053b2:	461a      	mov	r2, r3
 80053b4:	2320      	movs	r3, #32
 80053b6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80053b8:	78fa      	ldrb	r2, [r7, #3]
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	4613      	mov	r3, r2
 80053be:	011b      	lsls	r3, r3, #4
 80053c0:	1a9b      	subs	r3, r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	440b      	add	r3, r1
 80053c6:	331b      	adds	r3, #27
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d119      	bne.n	8005402 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80053ce:	78fa      	ldrb	r2, [r7, #3]
 80053d0:	6879      	ldr	r1, [r7, #4]
 80053d2:	4613      	mov	r3, r2
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	1a9b      	subs	r3, r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	440b      	add	r3, r1
 80053dc:	331b      	adds	r3, #27
 80053de:	2200      	movs	r2, #0
 80053e0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80053e2:	78fb      	ldrb	r3, [r7, #3]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	78fa      	ldrb	r2, [r7, #3]
 80053f2:	0151      	lsls	r1, r2, #5
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	440a      	add	r2, r1
 80053f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80053fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005400:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	799b      	ldrb	r3, [r3, #6]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d01b      	beq.n	8005442 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800540a:	78fa      	ldrb	r2, [r7, #3]
 800540c:	6879      	ldr	r1, [r7, #4]
 800540e:	4613      	mov	r3, r2
 8005410:	011b      	lsls	r3, r3, #4
 8005412:	1a9b      	subs	r3, r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	440b      	add	r3, r1
 8005418:	3330      	adds	r3, #48	@ 0x30
 800541a:	6819      	ldr	r1, [r3, #0]
 800541c:	78fb      	ldrb	r3, [r7, #3]
 800541e:	015a      	lsls	r2, r3, #5
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	4413      	add	r3, r2
 8005424:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800542e:	78fa      	ldrb	r2, [r7, #3]
 8005430:	1ac9      	subs	r1, r1, r3
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	4613      	mov	r3, r2
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	1a9b      	subs	r3, r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4403      	add	r3, r0
 800543e:	3338      	adds	r3, #56	@ 0x38
 8005440:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8005442:	78fa      	ldrb	r2, [r7, #3]
 8005444:	6879      	ldr	r1, [r7, #4]
 8005446:	4613      	mov	r3, r2
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	1a9b      	subs	r3, r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	440b      	add	r3, r1
 8005450:	334d      	adds	r3, #77	@ 0x4d
 8005452:	2201      	movs	r2, #1
 8005454:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8005456:	78fa      	ldrb	r2, [r7, #3]
 8005458:	6879      	ldr	r1, [r7, #4]
 800545a:	4613      	mov	r3, r2
 800545c:	011b      	lsls	r3, r3, #4
 800545e:	1a9b      	subs	r3, r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	440b      	add	r3, r1
 8005464:	3344      	adds	r3, #68	@ 0x44
 8005466:	2200      	movs	r2, #0
 8005468:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800546a:	78fb      	ldrb	r3, [r7, #3]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	4413      	add	r3, r2
 8005472:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005476:	461a      	mov	r2, r3
 8005478:	2301      	movs	r3, #1
 800547a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800547c:	78fa      	ldrb	r2, [r7, #3]
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	4613      	mov	r3, r2
 8005482:	011b      	lsls	r3, r3, #4
 8005484:	1a9b      	subs	r3, r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	440b      	add	r3, r1
 800548a:	3326      	adds	r3, #38	@ 0x26
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00a      	beq.n	80054a8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005492:	78fa      	ldrb	r2, [r7, #3]
 8005494:	6879      	ldr	r1, [r7, #4]
 8005496:	4613      	mov	r3, r2
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	1a9b      	subs	r3, r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	440b      	add	r3, r1
 80054a0:	3326      	adds	r3, #38	@ 0x26
 80054a2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d110      	bne.n	80054ca <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	78fa      	ldrb	r2, [r7, #3]
 80054ae:	4611      	mov	r1, r2
 80054b0:	4618      	mov	r0, r3
 80054b2:	f008 fcb8 	bl	800de26 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80054b6:	78fb      	ldrb	r3, [r7, #3]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054c2:	461a      	mov	r2, r3
 80054c4:	2310      	movs	r3, #16
 80054c6:	6093      	str	r3, [r2, #8]
 80054c8:	e03d      	b.n	8005546 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80054ca:	78fa      	ldrb	r2, [r7, #3]
 80054cc:	6879      	ldr	r1, [r7, #4]
 80054ce:	4613      	mov	r3, r2
 80054d0:	011b      	lsls	r3, r3, #4
 80054d2:	1a9b      	subs	r3, r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	440b      	add	r3, r1
 80054d8:	3326      	adds	r3, #38	@ 0x26
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	2b03      	cmp	r3, #3
 80054de:	d00a      	beq.n	80054f6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80054e0:	78fa      	ldrb	r2, [r7, #3]
 80054e2:	6879      	ldr	r1, [r7, #4]
 80054e4:	4613      	mov	r3, r2
 80054e6:	011b      	lsls	r3, r3, #4
 80054e8:	1a9b      	subs	r3, r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	440b      	add	r3, r1
 80054ee:	3326      	adds	r3, #38	@ 0x26
 80054f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d127      	bne.n	8005546 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80054f6:	78fb      	ldrb	r3, [r7, #3]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	78fa      	ldrb	r2, [r7, #3]
 8005506:	0151      	lsls	r1, r2, #5
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	440a      	add	r2, r1
 800550c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005510:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005514:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005516:	78fa      	ldrb	r2, [r7, #3]
 8005518:	6879      	ldr	r1, [r7, #4]
 800551a:	4613      	mov	r3, r2
 800551c:	011b      	lsls	r3, r3, #4
 800551e:	1a9b      	subs	r3, r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	440b      	add	r3, r1
 8005524:	334c      	adds	r3, #76	@ 0x4c
 8005526:	2201      	movs	r2, #1
 8005528:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800552a:	78fa      	ldrb	r2, [r7, #3]
 800552c:	6879      	ldr	r1, [r7, #4]
 800552e:	4613      	mov	r3, r2
 8005530:	011b      	lsls	r3, r3, #4
 8005532:	1a9b      	subs	r3, r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	440b      	add	r3, r1
 8005538:	334c      	adds	r3, #76	@ 0x4c
 800553a:	781a      	ldrb	r2, [r3, #0]
 800553c:	78fb      	ldrb	r3, [r7, #3]
 800553e:	4619      	mov	r1, r3
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f00d ff4b 	bl	80133dc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	799b      	ldrb	r3, [r3, #6]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d13b      	bne.n	80055c6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800554e:	78fa      	ldrb	r2, [r7, #3]
 8005550:	6879      	ldr	r1, [r7, #4]
 8005552:	4613      	mov	r3, r2
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	1a9b      	subs	r3, r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	440b      	add	r3, r1
 800555c:	3338      	adds	r3, #56	@ 0x38
 800555e:	6819      	ldr	r1, [r3, #0]
 8005560:	78fa      	ldrb	r2, [r7, #3]
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	4613      	mov	r3, r2
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	1a9b      	subs	r3, r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4403      	add	r3, r0
 800556e:	3328      	adds	r3, #40	@ 0x28
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	440b      	add	r3, r1
 8005574:	1e59      	subs	r1, r3, #1
 8005576:	78fa      	ldrb	r2, [r7, #3]
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	4613      	mov	r3, r2
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	1a9b      	subs	r3, r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4403      	add	r3, r0
 8005584:	3328      	adds	r3, #40	@ 0x28
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	fbb1 f3f3 	udiv	r3, r1, r3
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 8470 	beq.w	8005e76 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8005596:	78fa      	ldrb	r2, [r7, #3]
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	4613      	mov	r3, r2
 800559c:	011b      	lsls	r3, r3, #4
 800559e:	1a9b      	subs	r3, r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	440b      	add	r3, r1
 80055a4:	333c      	adds	r3, #60	@ 0x3c
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	78fa      	ldrb	r2, [r7, #3]
 80055aa:	f083 0301 	eor.w	r3, r3, #1
 80055ae:	b2d8      	uxtb	r0, r3
 80055b0:	6879      	ldr	r1, [r7, #4]
 80055b2:	4613      	mov	r3, r2
 80055b4:	011b      	lsls	r3, r3, #4
 80055b6:	1a9b      	subs	r3, r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	440b      	add	r3, r1
 80055bc:	333c      	adds	r3, #60	@ 0x3c
 80055be:	4602      	mov	r2, r0
 80055c0:	701a      	strb	r2, [r3, #0]
 80055c2:	f000 bc58 	b.w	8005e76 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80055c6:	78fa      	ldrb	r2, [r7, #3]
 80055c8:	6879      	ldr	r1, [r7, #4]
 80055ca:	4613      	mov	r3, r2
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	1a9b      	subs	r3, r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	440b      	add	r3, r1
 80055d4:	333c      	adds	r3, #60	@ 0x3c
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	78fa      	ldrb	r2, [r7, #3]
 80055da:	f083 0301 	eor.w	r3, r3, #1
 80055de:	b2d8      	uxtb	r0, r3
 80055e0:	6879      	ldr	r1, [r7, #4]
 80055e2:	4613      	mov	r3, r2
 80055e4:	011b      	lsls	r3, r3, #4
 80055e6:	1a9b      	subs	r3, r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	440b      	add	r3, r1
 80055ec:	333c      	adds	r3, #60	@ 0x3c
 80055ee:	4602      	mov	r2, r0
 80055f0:	701a      	strb	r2, [r3, #0]
 80055f2:	f000 bc40 	b.w	8005e76 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	78fa      	ldrb	r2, [r7, #3]
 80055fc:	4611      	mov	r1, r2
 80055fe:	4618      	mov	r0, r3
 8005600:	f007 fe73 	bl	800d2ea <USB_ReadChInterrupts>
 8005604:	4603      	mov	r3, r0
 8005606:	f003 0320 	and.w	r3, r3, #32
 800560a:	2b20      	cmp	r3, #32
 800560c:	d131      	bne.n	8005672 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800560e:	78fb      	ldrb	r3, [r7, #3]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	4413      	add	r3, r2
 8005616:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800561a:	461a      	mov	r2, r3
 800561c:	2320      	movs	r3, #32
 800561e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8005620:	78fa      	ldrb	r2, [r7, #3]
 8005622:	6879      	ldr	r1, [r7, #4]
 8005624:	4613      	mov	r3, r2
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	1a9b      	subs	r3, r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	440b      	add	r3, r1
 800562e:	331a      	adds	r3, #26
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	2b01      	cmp	r3, #1
 8005634:	f040 841f 	bne.w	8005e76 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8005638:	78fa      	ldrb	r2, [r7, #3]
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	4613      	mov	r3, r2
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	1a9b      	subs	r3, r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	331b      	adds	r3, #27
 8005648:	2201      	movs	r2, #1
 800564a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800564c:	78fa      	ldrb	r2, [r7, #3]
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	4613      	mov	r3, r2
 8005652:	011b      	lsls	r3, r3, #4
 8005654:	1a9b      	subs	r3, r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	334d      	adds	r3, #77	@ 0x4d
 800565c:	2203      	movs	r2, #3
 800565e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	78fa      	ldrb	r2, [r7, #3]
 8005666:	4611      	mov	r1, r2
 8005668:	4618      	mov	r0, r3
 800566a:	f008 fbdc 	bl	800de26 <USB_HC_Halt>
 800566e:	f000 bc02 	b.w	8005e76 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	78fa      	ldrb	r2, [r7, #3]
 8005678:	4611      	mov	r1, r2
 800567a:	4618      	mov	r0, r3
 800567c:	f007 fe35 	bl	800d2ea <USB_ReadChInterrupts>
 8005680:	4603      	mov	r3, r0
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b02      	cmp	r3, #2
 8005688:	f040 8305 	bne.w	8005c96 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800568c:	78fb      	ldrb	r3, [r7, #3]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	4413      	add	r3, r2
 8005694:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005698:	461a      	mov	r2, r3
 800569a:	2302      	movs	r3, #2
 800569c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800569e:	78fa      	ldrb	r2, [r7, #3]
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	4613      	mov	r3, r2
 80056a4:	011b      	lsls	r3, r3, #4
 80056a6:	1a9b      	subs	r3, r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	440b      	add	r3, r1
 80056ac:	334d      	adds	r3, #77	@ 0x4d
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d114      	bne.n	80056de <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80056b4:	78fa      	ldrb	r2, [r7, #3]
 80056b6:	6879      	ldr	r1, [r7, #4]
 80056b8:	4613      	mov	r3, r2
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	1a9b      	subs	r3, r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	440b      	add	r3, r1
 80056c2:	334d      	adds	r3, #77	@ 0x4d
 80056c4:	2202      	movs	r2, #2
 80056c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80056c8:	78fa      	ldrb	r2, [r7, #3]
 80056ca:	6879      	ldr	r1, [r7, #4]
 80056cc:	4613      	mov	r3, r2
 80056ce:	011b      	lsls	r3, r3, #4
 80056d0:	1a9b      	subs	r3, r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	440b      	add	r3, r1
 80056d6:	334c      	adds	r3, #76	@ 0x4c
 80056d8:	2201      	movs	r2, #1
 80056da:	701a      	strb	r2, [r3, #0]
 80056dc:	e2cc      	b.n	8005c78 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80056de:	78fa      	ldrb	r2, [r7, #3]
 80056e0:	6879      	ldr	r1, [r7, #4]
 80056e2:	4613      	mov	r3, r2
 80056e4:	011b      	lsls	r3, r3, #4
 80056e6:	1a9b      	subs	r3, r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	440b      	add	r3, r1
 80056ec:	334d      	adds	r3, #77	@ 0x4d
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	2b06      	cmp	r3, #6
 80056f2:	d114      	bne.n	800571e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80056f4:	78fa      	ldrb	r2, [r7, #3]
 80056f6:	6879      	ldr	r1, [r7, #4]
 80056f8:	4613      	mov	r3, r2
 80056fa:	011b      	lsls	r3, r3, #4
 80056fc:	1a9b      	subs	r3, r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	440b      	add	r3, r1
 8005702:	334d      	adds	r3, #77	@ 0x4d
 8005704:	2202      	movs	r2, #2
 8005706:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8005708:	78fa      	ldrb	r2, [r7, #3]
 800570a:	6879      	ldr	r1, [r7, #4]
 800570c:	4613      	mov	r3, r2
 800570e:	011b      	lsls	r3, r3, #4
 8005710:	1a9b      	subs	r3, r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	440b      	add	r3, r1
 8005716:	334c      	adds	r3, #76	@ 0x4c
 8005718:	2205      	movs	r2, #5
 800571a:	701a      	strb	r2, [r3, #0]
 800571c:	e2ac      	b.n	8005c78 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800571e:	78fa      	ldrb	r2, [r7, #3]
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	4613      	mov	r3, r2
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	1a9b      	subs	r3, r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	440b      	add	r3, r1
 800572c:	334d      	adds	r3, #77	@ 0x4d
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b07      	cmp	r3, #7
 8005732:	d00b      	beq.n	800574c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005734:	78fa      	ldrb	r2, [r7, #3]
 8005736:	6879      	ldr	r1, [r7, #4]
 8005738:	4613      	mov	r3, r2
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	1a9b      	subs	r3, r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	440b      	add	r3, r1
 8005742:	334d      	adds	r3, #77	@ 0x4d
 8005744:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005746:	2b09      	cmp	r3, #9
 8005748:	f040 80a6 	bne.w	8005898 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800574c:	78fa      	ldrb	r2, [r7, #3]
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	4613      	mov	r3, r2
 8005752:	011b      	lsls	r3, r3, #4
 8005754:	1a9b      	subs	r3, r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	440b      	add	r3, r1
 800575a:	334d      	adds	r3, #77	@ 0x4d
 800575c:	2202      	movs	r2, #2
 800575e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005760:	78fa      	ldrb	r2, [r7, #3]
 8005762:	6879      	ldr	r1, [r7, #4]
 8005764:	4613      	mov	r3, r2
 8005766:	011b      	lsls	r3, r3, #4
 8005768:	1a9b      	subs	r3, r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	440b      	add	r3, r1
 800576e:	3344      	adds	r3, #68	@ 0x44
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	1c59      	adds	r1, r3, #1
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	4613      	mov	r3, r2
 8005778:	011b      	lsls	r3, r3, #4
 800577a:	1a9b      	subs	r3, r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4403      	add	r3, r0
 8005780:	3344      	adds	r3, #68	@ 0x44
 8005782:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005784:	78fa      	ldrb	r2, [r7, #3]
 8005786:	6879      	ldr	r1, [r7, #4]
 8005788:	4613      	mov	r3, r2
 800578a:	011b      	lsls	r3, r3, #4
 800578c:	1a9b      	subs	r3, r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	440b      	add	r3, r1
 8005792:	3344      	adds	r3, #68	@ 0x44
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b02      	cmp	r3, #2
 8005798:	d943      	bls.n	8005822 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800579a:	78fa      	ldrb	r2, [r7, #3]
 800579c:	6879      	ldr	r1, [r7, #4]
 800579e:	4613      	mov	r3, r2
 80057a0:	011b      	lsls	r3, r3, #4
 80057a2:	1a9b      	subs	r3, r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	440b      	add	r3, r1
 80057a8:	3344      	adds	r3, #68	@ 0x44
 80057aa:	2200      	movs	r2, #0
 80057ac:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80057ae:	78fa      	ldrb	r2, [r7, #3]
 80057b0:	6879      	ldr	r1, [r7, #4]
 80057b2:	4613      	mov	r3, r2
 80057b4:	011b      	lsls	r3, r3, #4
 80057b6:	1a9b      	subs	r3, r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	440b      	add	r3, r1
 80057bc:	331a      	adds	r3, #26
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d123      	bne.n	800580c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80057c4:	78fa      	ldrb	r2, [r7, #3]
 80057c6:	6879      	ldr	r1, [r7, #4]
 80057c8:	4613      	mov	r3, r2
 80057ca:	011b      	lsls	r3, r3, #4
 80057cc:	1a9b      	subs	r3, r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	440b      	add	r3, r1
 80057d2:	331b      	adds	r3, #27
 80057d4:	2200      	movs	r2, #0
 80057d6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80057d8:	78fa      	ldrb	r2, [r7, #3]
 80057da:	6879      	ldr	r1, [r7, #4]
 80057dc:	4613      	mov	r3, r2
 80057de:	011b      	lsls	r3, r3, #4
 80057e0:	1a9b      	subs	r3, r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	440b      	add	r3, r1
 80057e6:	331c      	adds	r3, #28
 80057e8:	2200      	movs	r2, #0
 80057ea:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80057ec:	78fb      	ldrb	r3, [r7, #3]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	78fa      	ldrb	r2, [r7, #3]
 80057fc:	0151      	lsls	r1, r2, #5
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	440a      	add	r2, r1
 8005802:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005806:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800580a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800580c:	78fa      	ldrb	r2, [r7, #3]
 800580e:	6879      	ldr	r1, [r7, #4]
 8005810:	4613      	mov	r3, r2
 8005812:	011b      	lsls	r3, r3, #4
 8005814:	1a9b      	subs	r3, r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	440b      	add	r3, r1
 800581a:	334c      	adds	r3, #76	@ 0x4c
 800581c:	2204      	movs	r2, #4
 800581e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005820:	e229      	b.n	8005c76 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005822:	78fa      	ldrb	r2, [r7, #3]
 8005824:	6879      	ldr	r1, [r7, #4]
 8005826:	4613      	mov	r3, r2
 8005828:	011b      	lsls	r3, r3, #4
 800582a:	1a9b      	subs	r3, r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	440b      	add	r3, r1
 8005830:	334c      	adds	r3, #76	@ 0x4c
 8005832:	2202      	movs	r2, #2
 8005834:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005836:	78fa      	ldrb	r2, [r7, #3]
 8005838:	6879      	ldr	r1, [r7, #4]
 800583a:	4613      	mov	r3, r2
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	1a9b      	subs	r3, r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	440b      	add	r3, r1
 8005844:	3326      	adds	r3, #38	@ 0x26
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00b      	beq.n	8005864 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800584c:	78fa      	ldrb	r2, [r7, #3]
 800584e:	6879      	ldr	r1, [r7, #4]
 8005850:	4613      	mov	r3, r2
 8005852:	011b      	lsls	r3, r3, #4
 8005854:	1a9b      	subs	r3, r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	440b      	add	r3, r1
 800585a:	3326      	adds	r3, #38	@ 0x26
 800585c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800585e:	2b02      	cmp	r3, #2
 8005860:	f040 8209 	bne.w	8005c76 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005864:	78fb      	ldrb	r3, [r7, #3]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	4413      	add	r3, r2
 800586c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800587a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005882:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005884:	78fb      	ldrb	r3, [r7, #3]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	4413      	add	r3, r2
 800588c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005890:	461a      	mov	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005896:	e1ee      	b.n	8005c76 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005898:	78fa      	ldrb	r2, [r7, #3]
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	4613      	mov	r3, r2
 800589e:	011b      	lsls	r3, r3, #4
 80058a0:	1a9b      	subs	r3, r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	440b      	add	r3, r1
 80058a6:	334d      	adds	r3, #77	@ 0x4d
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b05      	cmp	r3, #5
 80058ac:	f040 80c8 	bne.w	8005a40 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80058b0:	78fa      	ldrb	r2, [r7, #3]
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	4613      	mov	r3, r2
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	1a9b      	subs	r3, r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	440b      	add	r3, r1
 80058be:	334d      	adds	r3, #77	@ 0x4d
 80058c0:	2202      	movs	r2, #2
 80058c2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80058c4:	78fa      	ldrb	r2, [r7, #3]
 80058c6:	6879      	ldr	r1, [r7, #4]
 80058c8:	4613      	mov	r3, r2
 80058ca:	011b      	lsls	r3, r3, #4
 80058cc:	1a9b      	subs	r3, r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	440b      	add	r3, r1
 80058d2:	331b      	adds	r3, #27
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	f040 81ce 	bne.w	8005c78 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80058dc:	78fa      	ldrb	r2, [r7, #3]
 80058de:	6879      	ldr	r1, [r7, #4]
 80058e0:	4613      	mov	r3, r2
 80058e2:	011b      	lsls	r3, r3, #4
 80058e4:	1a9b      	subs	r3, r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	440b      	add	r3, r1
 80058ea:	3326      	adds	r3, #38	@ 0x26
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	2b03      	cmp	r3, #3
 80058f0:	d16b      	bne.n	80059ca <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80058f2:	78fa      	ldrb	r2, [r7, #3]
 80058f4:	6879      	ldr	r1, [r7, #4]
 80058f6:	4613      	mov	r3, r2
 80058f8:	011b      	lsls	r3, r3, #4
 80058fa:	1a9b      	subs	r3, r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	440b      	add	r3, r1
 8005900:	3348      	adds	r3, #72	@ 0x48
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	1c59      	adds	r1, r3, #1
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	4613      	mov	r3, r2
 800590a:	011b      	lsls	r3, r3, #4
 800590c:	1a9b      	subs	r3, r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4403      	add	r3, r0
 8005912:	3348      	adds	r3, #72	@ 0x48
 8005914:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8005916:	78fa      	ldrb	r2, [r7, #3]
 8005918:	6879      	ldr	r1, [r7, #4]
 800591a:	4613      	mov	r3, r2
 800591c:	011b      	lsls	r3, r3, #4
 800591e:	1a9b      	subs	r3, r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	440b      	add	r3, r1
 8005924:	3348      	adds	r3, #72	@ 0x48
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b02      	cmp	r3, #2
 800592a:	d943      	bls.n	80059b4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800592c:	78fa      	ldrb	r2, [r7, #3]
 800592e:	6879      	ldr	r1, [r7, #4]
 8005930:	4613      	mov	r3, r2
 8005932:	011b      	lsls	r3, r3, #4
 8005934:	1a9b      	subs	r3, r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	440b      	add	r3, r1
 800593a:	3348      	adds	r3, #72	@ 0x48
 800593c:	2200      	movs	r2, #0
 800593e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8005940:	78fa      	ldrb	r2, [r7, #3]
 8005942:	6879      	ldr	r1, [r7, #4]
 8005944:	4613      	mov	r3, r2
 8005946:	011b      	lsls	r3, r3, #4
 8005948:	1a9b      	subs	r3, r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	440b      	add	r3, r1
 800594e:	331b      	adds	r3, #27
 8005950:	2200      	movs	r2, #0
 8005952:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8005954:	78fa      	ldrb	r2, [r7, #3]
 8005956:	6879      	ldr	r1, [r7, #4]
 8005958:	4613      	mov	r3, r2
 800595a:	011b      	lsls	r3, r3, #4
 800595c:	1a9b      	subs	r3, r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	440b      	add	r3, r1
 8005962:	3344      	adds	r3, #68	@ 0x44
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b02      	cmp	r3, #2
 8005968:	d809      	bhi.n	800597e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800596a:	78fa      	ldrb	r2, [r7, #3]
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	4613      	mov	r3, r2
 8005970:	011b      	lsls	r3, r3, #4
 8005972:	1a9b      	subs	r3, r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	440b      	add	r3, r1
 8005978:	331c      	adds	r3, #28
 800597a:	2201      	movs	r2, #1
 800597c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800597e:	78fb      	ldrb	r3, [r7, #3]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	4413      	add	r3, r2
 8005986:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	78fa      	ldrb	r2, [r7, #3]
 800598e:	0151      	lsls	r1, r2, #5
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	440a      	add	r2, r1
 8005994:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005998:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800599c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800599e:	78fa      	ldrb	r2, [r7, #3]
 80059a0:	6879      	ldr	r1, [r7, #4]
 80059a2:	4613      	mov	r3, r2
 80059a4:	011b      	lsls	r3, r3, #4
 80059a6:	1a9b      	subs	r3, r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	440b      	add	r3, r1
 80059ac:	334c      	adds	r3, #76	@ 0x4c
 80059ae:	2204      	movs	r2, #4
 80059b0:	701a      	strb	r2, [r3, #0]
 80059b2:	e014      	b.n	80059de <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80059b4:	78fa      	ldrb	r2, [r7, #3]
 80059b6:	6879      	ldr	r1, [r7, #4]
 80059b8:	4613      	mov	r3, r2
 80059ba:	011b      	lsls	r3, r3, #4
 80059bc:	1a9b      	subs	r3, r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	440b      	add	r3, r1
 80059c2:	334c      	adds	r3, #76	@ 0x4c
 80059c4:	2202      	movs	r2, #2
 80059c6:	701a      	strb	r2, [r3, #0]
 80059c8:	e009      	b.n	80059de <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80059ca:	78fa      	ldrb	r2, [r7, #3]
 80059cc:	6879      	ldr	r1, [r7, #4]
 80059ce:	4613      	mov	r3, r2
 80059d0:	011b      	lsls	r3, r3, #4
 80059d2:	1a9b      	subs	r3, r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	440b      	add	r3, r1
 80059d8:	334c      	adds	r3, #76	@ 0x4c
 80059da:	2202      	movs	r2, #2
 80059dc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80059de:	78fa      	ldrb	r2, [r7, #3]
 80059e0:	6879      	ldr	r1, [r7, #4]
 80059e2:	4613      	mov	r3, r2
 80059e4:	011b      	lsls	r3, r3, #4
 80059e6:	1a9b      	subs	r3, r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	440b      	add	r3, r1
 80059ec:	3326      	adds	r3, #38	@ 0x26
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00b      	beq.n	8005a0c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80059f4:	78fa      	ldrb	r2, [r7, #3]
 80059f6:	6879      	ldr	r1, [r7, #4]
 80059f8:	4613      	mov	r3, r2
 80059fa:	011b      	lsls	r3, r3, #4
 80059fc:	1a9b      	subs	r3, r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	440b      	add	r3, r1
 8005a02:	3326      	adds	r3, #38	@ 0x26
 8005a04:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	f040 8136 	bne.w	8005c78 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005a0c:	78fb      	ldrb	r3, [r7, #3]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005a22:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005a2a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005a2c:	78fb      	ldrb	r3, [r7, #3]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a38:	461a      	mov	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6013      	str	r3, [r2, #0]
 8005a3e:	e11b      	b.n	8005c78 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005a40:	78fa      	ldrb	r2, [r7, #3]
 8005a42:	6879      	ldr	r1, [r7, #4]
 8005a44:	4613      	mov	r3, r2
 8005a46:	011b      	lsls	r3, r3, #4
 8005a48:	1a9b      	subs	r3, r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	440b      	add	r3, r1
 8005a4e:	334d      	adds	r3, #77	@ 0x4d
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	f040 8081 	bne.w	8005b5a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005a58:	78fa      	ldrb	r2, [r7, #3]
 8005a5a:	6879      	ldr	r1, [r7, #4]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	011b      	lsls	r3, r3, #4
 8005a60:	1a9b      	subs	r3, r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	440b      	add	r3, r1
 8005a66:	334d      	adds	r3, #77	@ 0x4d
 8005a68:	2202      	movs	r2, #2
 8005a6a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005a6c:	78fa      	ldrb	r2, [r7, #3]
 8005a6e:	6879      	ldr	r1, [r7, #4]
 8005a70:	4613      	mov	r3, r2
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	1a9b      	subs	r3, r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	440b      	add	r3, r1
 8005a7a:	331b      	adds	r3, #27
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	f040 80fa 	bne.w	8005c78 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005a84:	78fa      	ldrb	r2, [r7, #3]
 8005a86:	6879      	ldr	r1, [r7, #4]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	011b      	lsls	r3, r3, #4
 8005a8c:	1a9b      	subs	r3, r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	440b      	add	r3, r1
 8005a92:	334c      	adds	r3, #76	@ 0x4c
 8005a94:	2202      	movs	r2, #2
 8005a96:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005a98:	78fb      	ldrb	r3, [r7, #3]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	78fa      	ldrb	r2, [r7, #3]
 8005aa8:	0151      	lsls	r1, r2, #5
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	440a      	add	r2, r1
 8005aae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ab2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ab6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005ab8:	78fb      	ldrb	r3, [r7, #3]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	78fa      	ldrb	r2, [r7, #3]
 8005ac8:	0151      	lsls	r1, r2, #5
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	440a      	add	r2, r1
 8005ace:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ad2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ad6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8005ad8:	78fb      	ldrb	r3, [r7, #3]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	78fa      	ldrb	r2, [r7, #3]
 8005ae8:	0151      	lsls	r1, r2, #5
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	440a      	add	r2, r1
 8005aee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005af2:	f023 0320 	bic.w	r3, r3, #32
 8005af6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005af8:	78fa      	ldrb	r2, [r7, #3]
 8005afa:	6879      	ldr	r1, [r7, #4]
 8005afc:	4613      	mov	r3, r2
 8005afe:	011b      	lsls	r3, r3, #4
 8005b00:	1a9b      	subs	r3, r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	440b      	add	r3, r1
 8005b06:	3326      	adds	r3, #38	@ 0x26
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00b      	beq.n	8005b26 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005b0e:	78fa      	ldrb	r2, [r7, #3]
 8005b10:	6879      	ldr	r1, [r7, #4]
 8005b12:	4613      	mov	r3, r2
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	1a9b      	subs	r3, r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	440b      	add	r3, r1
 8005b1c:	3326      	adds	r3, #38	@ 0x26
 8005b1e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	f040 80a9 	bne.w	8005c78 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005b26:	78fb      	ldrb	r3, [r7, #3]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005b3c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005b44:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005b46:	78fb      	ldrb	r3, [r7, #3]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b52:	461a      	mov	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6013      	str	r3, [r2, #0]
 8005b58:	e08e      	b.n	8005c78 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005b5a:	78fa      	ldrb	r2, [r7, #3]
 8005b5c:	6879      	ldr	r1, [r7, #4]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	011b      	lsls	r3, r3, #4
 8005b62:	1a9b      	subs	r3, r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	440b      	add	r3, r1
 8005b68:	334d      	adds	r3, #77	@ 0x4d
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	2b04      	cmp	r3, #4
 8005b6e:	d143      	bne.n	8005bf8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005b70:	78fa      	ldrb	r2, [r7, #3]
 8005b72:	6879      	ldr	r1, [r7, #4]
 8005b74:	4613      	mov	r3, r2
 8005b76:	011b      	lsls	r3, r3, #4
 8005b78:	1a9b      	subs	r3, r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	440b      	add	r3, r1
 8005b7e:	334d      	adds	r3, #77	@ 0x4d
 8005b80:	2202      	movs	r2, #2
 8005b82:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005b84:	78fa      	ldrb	r2, [r7, #3]
 8005b86:	6879      	ldr	r1, [r7, #4]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	011b      	lsls	r3, r3, #4
 8005b8c:	1a9b      	subs	r3, r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	440b      	add	r3, r1
 8005b92:	334c      	adds	r3, #76	@ 0x4c
 8005b94:	2202      	movs	r2, #2
 8005b96:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005b98:	78fa      	ldrb	r2, [r7, #3]
 8005b9a:	6879      	ldr	r1, [r7, #4]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	011b      	lsls	r3, r3, #4
 8005ba0:	1a9b      	subs	r3, r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	3326      	adds	r3, #38	@ 0x26
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00a      	beq.n	8005bc4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005bae:	78fa      	ldrb	r2, [r7, #3]
 8005bb0:	6879      	ldr	r1, [r7, #4]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	011b      	lsls	r3, r3, #4
 8005bb6:	1a9b      	subs	r3, r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	440b      	add	r3, r1
 8005bbc:	3326      	adds	r3, #38	@ 0x26
 8005bbe:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d159      	bne.n	8005c78 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005bc4:	78fb      	ldrb	r3, [r7, #3]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005bda:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005be2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005be4:	78fb      	ldrb	r3, [r7, #3]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6013      	str	r3, [r2, #0]
 8005bf6:	e03f      	b.n	8005c78 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8005bf8:	78fa      	ldrb	r2, [r7, #3]
 8005bfa:	6879      	ldr	r1, [r7, #4]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	011b      	lsls	r3, r3, #4
 8005c00:	1a9b      	subs	r3, r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	440b      	add	r3, r1
 8005c06:	334d      	adds	r3, #77	@ 0x4d
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	2b08      	cmp	r3, #8
 8005c0c:	d126      	bne.n	8005c5c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005c0e:	78fa      	ldrb	r2, [r7, #3]
 8005c10:	6879      	ldr	r1, [r7, #4]
 8005c12:	4613      	mov	r3, r2
 8005c14:	011b      	lsls	r3, r3, #4
 8005c16:	1a9b      	subs	r3, r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	440b      	add	r3, r1
 8005c1c:	334d      	adds	r3, #77	@ 0x4d
 8005c1e:	2202      	movs	r2, #2
 8005c20:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005c22:	78fa      	ldrb	r2, [r7, #3]
 8005c24:	6879      	ldr	r1, [r7, #4]
 8005c26:	4613      	mov	r3, r2
 8005c28:	011b      	lsls	r3, r3, #4
 8005c2a:	1a9b      	subs	r3, r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	440b      	add	r3, r1
 8005c30:	3344      	adds	r3, #68	@ 0x44
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	1c59      	adds	r1, r3, #1
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	011b      	lsls	r3, r3, #4
 8005c3c:	1a9b      	subs	r3, r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4403      	add	r3, r0
 8005c42:	3344      	adds	r3, #68	@ 0x44
 8005c44:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8005c46:	78fa      	ldrb	r2, [r7, #3]
 8005c48:	6879      	ldr	r1, [r7, #4]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	011b      	lsls	r3, r3, #4
 8005c4e:	1a9b      	subs	r3, r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	440b      	add	r3, r1
 8005c54:	334c      	adds	r3, #76	@ 0x4c
 8005c56:	2204      	movs	r2, #4
 8005c58:	701a      	strb	r2, [r3, #0]
 8005c5a:	e00d      	b.n	8005c78 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8005c5c:	78fa      	ldrb	r2, [r7, #3]
 8005c5e:	6879      	ldr	r1, [r7, #4]
 8005c60:	4613      	mov	r3, r2
 8005c62:	011b      	lsls	r3, r3, #4
 8005c64:	1a9b      	subs	r3, r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	440b      	add	r3, r1
 8005c6a:	334d      	adds	r3, #77	@ 0x4d
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	f000 8100 	beq.w	8005e74 <HCD_HC_IN_IRQHandler+0xcca>
 8005c74:	e000      	b.n	8005c78 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005c76:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005c78:	78fa      	ldrb	r2, [r7, #3]
 8005c7a:	6879      	ldr	r1, [r7, #4]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	011b      	lsls	r3, r3, #4
 8005c80:	1a9b      	subs	r3, r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	440b      	add	r3, r1
 8005c86:	334c      	adds	r3, #76	@ 0x4c
 8005c88:	781a      	ldrb	r2, [r3, #0]
 8005c8a:	78fb      	ldrb	r3, [r7, #3]
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f00d fba4 	bl	80133dc <HAL_HCD_HC_NotifyURBChange_Callback>
 8005c94:	e0ef      	b.n	8005e76 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	78fa      	ldrb	r2, [r7, #3]
 8005c9c:	4611      	mov	r1, r2
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f007 fb23 	bl	800d2ea <USB_ReadChInterrupts>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005caa:	2b40      	cmp	r3, #64	@ 0x40
 8005cac:	d12f      	bne.n	8005d0e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005cae:	78fb      	ldrb	r3, [r7, #3]
 8005cb0:	015a      	lsls	r2, r3, #5
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cba:	461a      	mov	r2, r3
 8005cbc:	2340      	movs	r3, #64	@ 0x40
 8005cbe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8005cc0:	78fa      	ldrb	r2, [r7, #3]
 8005cc2:	6879      	ldr	r1, [r7, #4]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	011b      	lsls	r3, r3, #4
 8005cc8:	1a9b      	subs	r3, r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	440b      	add	r3, r1
 8005cce:	334d      	adds	r3, #77	@ 0x4d
 8005cd0:	2205      	movs	r2, #5
 8005cd2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005cd4:	78fa      	ldrb	r2, [r7, #3]
 8005cd6:	6879      	ldr	r1, [r7, #4]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	011b      	lsls	r3, r3, #4
 8005cdc:	1a9b      	subs	r3, r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	440b      	add	r3, r1
 8005ce2:	331a      	adds	r3, #26
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d109      	bne.n	8005cfe <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005cea:	78fa      	ldrb	r2, [r7, #3]
 8005cec:	6879      	ldr	r1, [r7, #4]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	011b      	lsls	r3, r3, #4
 8005cf2:	1a9b      	subs	r3, r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	440b      	add	r3, r1
 8005cf8:	3344      	adds	r3, #68	@ 0x44
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	78fa      	ldrb	r2, [r7, #3]
 8005d04:	4611      	mov	r1, r2
 8005d06:	4618      	mov	r0, r3
 8005d08:	f008 f88d 	bl	800de26 <USB_HC_Halt>
 8005d0c:	e0b3      	b.n	8005e76 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	78fa      	ldrb	r2, [r7, #3]
 8005d14:	4611      	mov	r1, r2
 8005d16:	4618      	mov	r0, r3
 8005d18:	f007 fae7 	bl	800d2ea <USB_ReadChInterrupts>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	f003 0310 	and.w	r3, r3, #16
 8005d22:	2b10      	cmp	r3, #16
 8005d24:	f040 80a7 	bne.w	8005e76 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005d28:	78fa      	ldrb	r2, [r7, #3]
 8005d2a:	6879      	ldr	r1, [r7, #4]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	011b      	lsls	r3, r3, #4
 8005d30:	1a9b      	subs	r3, r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	440b      	add	r3, r1
 8005d36:	3326      	adds	r3, #38	@ 0x26
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b03      	cmp	r3, #3
 8005d3c:	d11b      	bne.n	8005d76 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005d3e:	78fa      	ldrb	r2, [r7, #3]
 8005d40:	6879      	ldr	r1, [r7, #4]
 8005d42:	4613      	mov	r3, r2
 8005d44:	011b      	lsls	r3, r3, #4
 8005d46:	1a9b      	subs	r3, r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	440b      	add	r3, r1
 8005d4c:	3344      	adds	r3, #68	@ 0x44
 8005d4e:	2200      	movs	r2, #0
 8005d50:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8005d52:	78fa      	ldrb	r2, [r7, #3]
 8005d54:	6879      	ldr	r1, [r7, #4]
 8005d56:	4613      	mov	r3, r2
 8005d58:	011b      	lsls	r3, r3, #4
 8005d5a:	1a9b      	subs	r3, r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	440b      	add	r3, r1
 8005d60:	334d      	adds	r3, #77	@ 0x4d
 8005d62:	2204      	movs	r2, #4
 8005d64:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	78fa      	ldrb	r2, [r7, #3]
 8005d6c:	4611      	mov	r1, r2
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f008 f859 	bl	800de26 <USB_HC_Halt>
 8005d74:	e03f      	b.n	8005df6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d76:	78fa      	ldrb	r2, [r7, #3]
 8005d78:	6879      	ldr	r1, [r7, #4]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	011b      	lsls	r3, r3, #4
 8005d7e:	1a9b      	subs	r3, r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	440b      	add	r3, r1
 8005d84:	3326      	adds	r3, #38	@ 0x26
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00a      	beq.n	8005da2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005d8c:	78fa      	ldrb	r2, [r7, #3]
 8005d8e:	6879      	ldr	r1, [r7, #4]
 8005d90:	4613      	mov	r3, r2
 8005d92:	011b      	lsls	r3, r3, #4
 8005d94:	1a9b      	subs	r3, r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	440b      	add	r3, r1
 8005d9a:	3326      	adds	r3, #38	@ 0x26
 8005d9c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d129      	bne.n	8005df6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005da2:	78fa      	ldrb	r2, [r7, #3]
 8005da4:	6879      	ldr	r1, [r7, #4]
 8005da6:	4613      	mov	r3, r2
 8005da8:	011b      	lsls	r3, r3, #4
 8005daa:	1a9b      	subs	r3, r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	440b      	add	r3, r1
 8005db0:	3344      	adds	r3, #68	@ 0x44
 8005db2:	2200      	movs	r2, #0
 8005db4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	799b      	ldrb	r3, [r3, #6]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <HCD_HC_IN_IRQHandler+0xc2a>
 8005dbe:	78fa      	ldrb	r2, [r7, #3]
 8005dc0:	6879      	ldr	r1, [r7, #4]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	011b      	lsls	r3, r3, #4
 8005dc6:	1a9b      	subs	r3, r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	440b      	add	r3, r1
 8005dcc:	331b      	adds	r3, #27
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d110      	bne.n	8005df6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8005dd4:	78fa      	ldrb	r2, [r7, #3]
 8005dd6:	6879      	ldr	r1, [r7, #4]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	011b      	lsls	r3, r3, #4
 8005ddc:	1a9b      	subs	r3, r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	440b      	add	r3, r1
 8005de2:	334d      	adds	r3, #77	@ 0x4d
 8005de4:	2204      	movs	r2, #4
 8005de6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	78fa      	ldrb	r2, [r7, #3]
 8005dee:	4611      	mov	r1, r2
 8005df0:	4618      	mov	r0, r3
 8005df2:	f008 f818 	bl	800de26 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005df6:	78fa      	ldrb	r2, [r7, #3]
 8005df8:	6879      	ldr	r1, [r7, #4]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	011b      	lsls	r3, r3, #4
 8005dfe:	1a9b      	subs	r3, r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	440b      	add	r3, r1
 8005e04:	331b      	adds	r3, #27
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d129      	bne.n	8005e60 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005e0c:	78fa      	ldrb	r2, [r7, #3]
 8005e0e:	6879      	ldr	r1, [r7, #4]
 8005e10:	4613      	mov	r3, r2
 8005e12:	011b      	lsls	r3, r3, #4
 8005e14:	1a9b      	subs	r3, r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	440b      	add	r3, r1
 8005e1a:	331b      	adds	r3, #27
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005e20:	78fb      	ldrb	r3, [r7, #3]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	78fa      	ldrb	r2, [r7, #3]
 8005e30:	0151      	lsls	r1, r2, #5
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	440a      	add	r2, r1
 8005e36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e3e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	78fa      	ldrb	r2, [r7, #3]
 8005e50:	0151      	lsls	r1, r2, #5
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	440a      	add	r2, r1
 8005e56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e5a:	f043 0320 	orr.w	r3, r3, #32
 8005e5e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005e60:	78fb      	ldrb	r3, [r7, #3]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	2310      	movs	r3, #16
 8005e70:	6093      	str	r3, [r2, #8]
 8005e72:	e000      	b.n	8005e76 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8005e74:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005e76:	3718      	adds	r7, #24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	460b      	mov	r3, r1
 8005e86:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	78fa      	ldrb	r2, [r7, #3]
 8005e98:	4611      	mov	r1, r2
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f007 fa25 	bl	800d2ea <USB_ReadChInterrupts>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b04      	cmp	r3, #4
 8005ea8:	d11b      	bne.n	8005ee2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005eaa:	78fb      	ldrb	r3, [r7, #3]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	2304      	movs	r3, #4
 8005eba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005ebc:	78fa      	ldrb	r2, [r7, #3]
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	011b      	lsls	r3, r3, #4
 8005ec4:	1a9b      	subs	r3, r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	440b      	add	r3, r1
 8005eca:	334d      	adds	r3, #77	@ 0x4d
 8005ecc:	2207      	movs	r2, #7
 8005ece:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	78fa      	ldrb	r2, [r7, #3]
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f007 ffa4 	bl	800de26 <USB_HC_Halt>
 8005ede:	f000 bc89 	b.w	80067f4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	78fa      	ldrb	r2, [r7, #3]
 8005ee8:	4611      	mov	r1, r2
 8005eea:	4618      	mov	r0, r3
 8005eec:	f007 f9fd 	bl	800d2ea <USB_ReadChInterrupts>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	f003 0320 	and.w	r3, r3, #32
 8005ef6:	2b20      	cmp	r3, #32
 8005ef8:	f040 8082 	bne.w	8006000 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005efc:	78fb      	ldrb	r3, [r7, #3]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f08:	461a      	mov	r2, r3
 8005f0a:	2320      	movs	r3, #32
 8005f0c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8005f0e:	78fa      	ldrb	r2, [r7, #3]
 8005f10:	6879      	ldr	r1, [r7, #4]
 8005f12:	4613      	mov	r3, r2
 8005f14:	011b      	lsls	r3, r3, #4
 8005f16:	1a9b      	subs	r3, r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	440b      	add	r3, r1
 8005f1c:	3319      	adds	r3, #25
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d124      	bne.n	8005f6e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8005f24:	78fa      	ldrb	r2, [r7, #3]
 8005f26:	6879      	ldr	r1, [r7, #4]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	1a9b      	subs	r3, r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	440b      	add	r3, r1
 8005f32:	3319      	adds	r3, #25
 8005f34:	2200      	movs	r2, #0
 8005f36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005f38:	78fa      	ldrb	r2, [r7, #3]
 8005f3a:	6879      	ldr	r1, [r7, #4]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	1a9b      	subs	r3, r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	440b      	add	r3, r1
 8005f46:	334c      	adds	r3, #76	@ 0x4c
 8005f48:	2202      	movs	r2, #2
 8005f4a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005f4c:	78fa      	ldrb	r2, [r7, #3]
 8005f4e:	6879      	ldr	r1, [r7, #4]
 8005f50:	4613      	mov	r3, r2
 8005f52:	011b      	lsls	r3, r3, #4
 8005f54:	1a9b      	subs	r3, r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	440b      	add	r3, r1
 8005f5a:	334d      	adds	r3, #77	@ 0x4d
 8005f5c:	2203      	movs	r2, #3
 8005f5e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	78fa      	ldrb	r2, [r7, #3]
 8005f66:	4611      	mov	r1, r2
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f007 ff5c 	bl	800de26 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8005f6e:	78fa      	ldrb	r2, [r7, #3]
 8005f70:	6879      	ldr	r1, [r7, #4]
 8005f72:	4613      	mov	r3, r2
 8005f74:	011b      	lsls	r3, r3, #4
 8005f76:	1a9b      	subs	r3, r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	440b      	add	r3, r1
 8005f7c:	331a      	adds	r3, #26
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	f040 8437 	bne.w	80067f4 <HCD_HC_OUT_IRQHandler+0x978>
 8005f86:	78fa      	ldrb	r2, [r7, #3]
 8005f88:	6879      	ldr	r1, [r7, #4]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	011b      	lsls	r3, r3, #4
 8005f8e:	1a9b      	subs	r3, r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	440b      	add	r3, r1
 8005f94:	331b      	adds	r3, #27
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f040 842b 	bne.w	80067f4 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8005f9e:	78fa      	ldrb	r2, [r7, #3]
 8005fa0:	6879      	ldr	r1, [r7, #4]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	011b      	lsls	r3, r3, #4
 8005fa6:	1a9b      	subs	r3, r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	440b      	add	r3, r1
 8005fac:	3326      	adds	r3, #38	@ 0x26
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d009      	beq.n	8005fc8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8005fb4:	78fa      	ldrb	r2, [r7, #3]
 8005fb6:	6879      	ldr	r1, [r7, #4]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	011b      	lsls	r3, r3, #4
 8005fbc:	1a9b      	subs	r3, r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	440b      	add	r3, r1
 8005fc2:	331b      	adds	r3, #27
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005fc8:	78fa      	ldrb	r2, [r7, #3]
 8005fca:	6879      	ldr	r1, [r7, #4]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	011b      	lsls	r3, r3, #4
 8005fd0:	1a9b      	subs	r3, r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	440b      	add	r3, r1
 8005fd6:	334d      	adds	r3, #77	@ 0x4d
 8005fd8:	2203      	movs	r2, #3
 8005fda:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	78fa      	ldrb	r2, [r7, #3]
 8005fe2:	4611      	mov	r1, r2
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f007 ff1e 	bl	800de26 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005fea:	78fa      	ldrb	r2, [r7, #3]
 8005fec:	6879      	ldr	r1, [r7, #4]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	011b      	lsls	r3, r3, #4
 8005ff2:	1a9b      	subs	r3, r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	440b      	add	r3, r1
 8005ff8:	3344      	adds	r3, #68	@ 0x44
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	601a      	str	r2, [r3, #0]
 8005ffe:	e3f9      	b.n	80067f4 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	78fa      	ldrb	r2, [r7, #3]
 8006006:	4611      	mov	r1, r2
 8006008:	4618      	mov	r0, r3
 800600a:	f007 f96e 	bl	800d2ea <USB_ReadChInterrupts>
 800600e:	4603      	mov	r3, r0
 8006010:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006014:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006018:	d111      	bne.n	800603e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800601a:	78fb      	ldrb	r3, [r7, #3]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	4413      	add	r3, r2
 8006022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006026:	461a      	mov	r2, r3
 8006028:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800602c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	78fa      	ldrb	r2, [r7, #3]
 8006034:	4611      	mov	r1, r2
 8006036:	4618      	mov	r0, r3
 8006038:	f007 fef5 	bl	800de26 <USB_HC_Halt>
 800603c:	e3da      	b.n	80067f4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	78fa      	ldrb	r2, [r7, #3]
 8006044:	4611      	mov	r1, r2
 8006046:	4618      	mov	r0, r3
 8006048:	f007 f94f 	bl	800d2ea <USB_ReadChInterrupts>
 800604c:	4603      	mov	r3, r0
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b01      	cmp	r3, #1
 8006054:	d168      	bne.n	8006128 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8006056:	78fa      	ldrb	r2, [r7, #3]
 8006058:	6879      	ldr	r1, [r7, #4]
 800605a:	4613      	mov	r3, r2
 800605c:	011b      	lsls	r3, r3, #4
 800605e:	1a9b      	subs	r3, r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	440b      	add	r3, r1
 8006064:	3344      	adds	r3, #68	@ 0x44
 8006066:	2200      	movs	r2, #0
 8006068:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	78fa      	ldrb	r2, [r7, #3]
 8006070:	4611      	mov	r1, r2
 8006072:	4618      	mov	r0, r3
 8006074:	f007 f939 	bl	800d2ea <USB_ReadChInterrupts>
 8006078:	4603      	mov	r3, r0
 800607a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800607e:	2b40      	cmp	r3, #64	@ 0x40
 8006080:	d112      	bne.n	80060a8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8006082:	78fa      	ldrb	r2, [r7, #3]
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	4613      	mov	r3, r2
 8006088:	011b      	lsls	r3, r3, #4
 800608a:	1a9b      	subs	r3, r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	440b      	add	r3, r1
 8006090:	3319      	adds	r3, #25
 8006092:	2201      	movs	r2, #1
 8006094:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006096:	78fb      	ldrb	r3, [r7, #3]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	4413      	add	r3, r2
 800609e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060a2:	461a      	mov	r2, r3
 80060a4:	2340      	movs	r3, #64	@ 0x40
 80060a6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80060a8:	78fa      	ldrb	r2, [r7, #3]
 80060aa:	6879      	ldr	r1, [r7, #4]
 80060ac:	4613      	mov	r3, r2
 80060ae:	011b      	lsls	r3, r3, #4
 80060b0:	1a9b      	subs	r3, r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	440b      	add	r3, r1
 80060b6:	331b      	adds	r3, #27
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d019      	beq.n	80060f2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80060be:	78fa      	ldrb	r2, [r7, #3]
 80060c0:	6879      	ldr	r1, [r7, #4]
 80060c2:	4613      	mov	r3, r2
 80060c4:	011b      	lsls	r3, r3, #4
 80060c6:	1a9b      	subs	r3, r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	440b      	add	r3, r1
 80060cc:	331b      	adds	r3, #27
 80060ce:	2200      	movs	r2, #0
 80060d0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80060d2:	78fb      	ldrb	r3, [r7, #3]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	78fa      	ldrb	r2, [r7, #3]
 80060e2:	0151      	lsls	r1, r2, #5
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	440a      	add	r2, r1
 80060e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060f0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80060f2:	78fb      	ldrb	r3, [r7, #3]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060fe:	461a      	mov	r2, r3
 8006100:	2301      	movs	r3, #1
 8006102:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8006104:	78fa      	ldrb	r2, [r7, #3]
 8006106:	6879      	ldr	r1, [r7, #4]
 8006108:	4613      	mov	r3, r2
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	1a9b      	subs	r3, r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	440b      	add	r3, r1
 8006112:	334d      	adds	r3, #77	@ 0x4d
 8006114:	2201      	movs	r2, #1
 8006116:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	78fa      	ldrb	r2, [r7, #3]
 800611e:	4611      	mov	r1, r2
 8006120:	4618      	mov	r0, r3
 8006122:	f007 fe80 	bl	800de26 <USB_HC_Halt>
 8006126:	e365      	b.n	80067f4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	78fa      	ldrb	r2, [r7, #3]
 800612e:	4611      	mov	r1, r2
 8006130:	4618      	mov	r0, r3
 8006132:	f007 f8da 	bl	800d2ea <USB_ReadChInterrupts>
 8006136:	4603      	mov	r3, r0
 8006138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800613c:	2b40      	cmp	r3, #64	@ 0x40
 800613e:	d139      	bne.n	80061b4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8006140:	78fa      	ldrb	r2, [r7, #3]
 8006142:	6879      	ldr	r1, [r7, #4]
 8006144:	4613      	mov	r3, r2
 8006146:	011b      	lsls	r3, r3, #4
 8006148:	1a9b      	subs	r3, r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	440b      	add	r3, r1
 800614e:	334d      	adds	r3, #77	@ 0x4d
 8006150:	2205      	movs	r2, #5
 8006152:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8006154:	78fa      	ldrb	r2, [r7, #3]
 8006156:	6879      	ldr	r1, [r7, #4]
 8006158:	4613      	mov	r3, r2
 800615a:	011b      	lsls	r3, r3, #4
 800615c:	1a9b      	subs	r3, r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	440b      	add	r3, r1
 8006162:	331a      	adds	r3, #26
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d109      	bne.n	800617e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800616a:	78fa      	ldrb	r2, [r7, #3]
 800616c:	6879      	ldr	r1, [r7, #4]
 800616e:	4613      	mov	r3, r2
 8006170:	011b      	lsls	r3, r3, #4
 8006172:	1a9b      	subs	r3, r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	440b      	add	r3, r1
 8006178:	3319      	adds	r3, #25
 800617a:	2201      	movs	r2, #1
 800617c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800617e:	78fa      	ldrb	r2, [r7, #3]
 8006180:	6879      	ldr	r1, [r7, #4]
 8006182:	4613      	mov	r3, r2
 8006184:	011b      	lsls	r3, r3, #4
 8006186:	1a9b      	subs	r3, r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	440b      	add	r3, r1
 800618c:	3344      	adds	r3, #68	@ 0x44
 800618e:	2200      	movs	r2, #0
 8006190:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	78fa      	ldrb	r2, [r7, #3]
 8006198:	4611      	mov	r1, r2
 800619a:	4618      	mov	r0, r3
 800619c:	f007 fe43 	bl	800de26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80061a0:	78fb      	ldrb	r3, [r7, #3]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061ac:	461a      	mov	r2, r3
 80061ae:	2340      	movs	r3, #64	@ 0x40
 80061b0:	6093      	str	r3, [r2, #8]
 80061b2:	e31f      	b.n	80067f4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	78fa      	ldrb	r2, [r7, #3]
 80061ba:	4611      	mov	r1, r2
 80061bc:	4618      	mov	r0, r3
 80061be:	f007 f894 	bl	800d2ea <USB_ReadChInterrupts>
 80061c2:	4603      	mov	r3, r0
 80061c4:	f003 0308 	and.w	r3, r3, #8
 80061c8:	2b08      	cmp	r3, #8
 80061ca:	d11a      	bne.n	8006202 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80061cc:	78fb      	ldrb	r3, [r7, #3]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061d8:	461a      	mov	r2, r3
 80061da:	2308      	movs	r3, #8
 80061dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80061de:	78fa      	ldrb	r2, [r7, #3]
 80061e0:	6879      	ldr	r1, [r7, #4]
 80061e2:	4613      	mov	r3, r2
 80061e4:	011b      	lsls	r3, r3, #4
 80061e6:	1a9b      	subs	r3, r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	440b      	add	r3, r1
 80061ec:	334d      	adds	r3, #77	@ 0x4d
 80061ee:	2206      	movs	r2, #6
 80061f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	78fa      	ldrb	r2, [r7, #3]
 80061f8:	4611      	mov	r1, r2
 80061fa:	4618      	mov	r0, r3
 80061fc:	f007 fe13 	bl	800de26 <USB_HC_Halt>
 8006200:	e2f8      	b.n	80067f4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	78fa      	ldrb	r2, [r7, #3]
 8006208:	4611      	mov	r1, r2
 800620a:	4618      	mov	r0, r3
 800620c:	f007 f86d 	bl	800d2ea <USB_ReadChInterrupts>
 8006210:	4603      	mov	r3, r0
 8006212:	f003 0310 	and.w	r3, r3, #16
 8006216:	2b10      	cmp	r3, #16
 8006218:	d144      	bne.n	80062a4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800621a:	78fa      	ldrb	r2, [r7, #3]
 800621c:	6879      	ldr	r1, [r7, #4]
 800621e:	4613      	mov	r3, r2
 8006220:	011b      	lsls	r3, r3, #4
 8006222:	1a9b      	subs	r3, r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	440b      	add	r3, r1
 8006228:	3344      	adds	r3, #68	@ 0x44
 800622a:	2200      	movs	r2, #0
 800622c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800622e:	78fa      	ldrb	r2, [r7, #3]
 8006230:	6879      	ldr	r1, [r7, #4]
 8006232:	4613      	mov	r3, r2
 8006234:	011b      	lsls	r3, r3, #4
 8006236:	1a9b      	subs	r3, r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	440b      	add	r3, r1
 800623c:	334d      	adds	r3, #77	@ 0x4d
 800623e:	2204      	movs	r2, #4
 8006240:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8006242:	78fa      	ldrb	r2, [r7, #3]
 8006244:	6879      	ldr	r1, [r7, #4]
 8006246:	4613      	mov	r3, r2
 8006248:	011b      	lsls	r3, r3, #4
 800624a:	1a9b      	subs	r3, r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	440b      	add	r3, r1
 8006250:	3319      	adds	r3, #25
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d114      	bne.n	8006282 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8006258:	78fa      	ldrb	r2, [r7, #3]
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	4613      	mov	r3, r2
 800625e:	011b      	lsls	r3, r3, #4
 8006260:	1a9b      	subs	r3, r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	440b      	add	r3, r1
 8006266:	3318      	adds	r3, #24
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d109      	bne.n	8006282 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800626e:	78fa      	ldrb	r2, [r7, #3]
 8006270:	6879      	ldr	r1, [r7, #4]
 8006272:	4613      	mov	r3, r2
 8006274:	011b      	lsls	r3, r3, #4
 8006276:	1a9b      	subs	r3, r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	440b      	add	r3, r1
 800627c:	3319      	adds	r3, #25
 800627e:	2201      	movs	r2, #1
 8006280:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	78fa      	ldrb	r2, [r7, #3]
 8006288:	4611      	mov	r1, r2
 800628a:	4618      	mov	r0, r3
 800628c:	f007 fdcb 	bl	800de26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006290:	78fb      	ldrb	r3, [r7, #3]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	4413      	add	r3, r2
 8006298:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800629c:	461a      	mov	r2, r3
 800629e:	2310      	movs	r3, #16
 80062a0:	6093      	str	r3, [r2, #8]
 80062a2:	e2a7      	b.n	80067f4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	78fa      	ldrb	r2, [r7, #3]
 80062aa:	4611      	mov	r1, r2
 80062ac:	4618      	mov	r0, r3
 80062ae:	f007 f81c 	bl	800d2ea <USB_ReadChInterrupts>
 80062b2:	4603      	mov	r3, r0
 80062b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062b8:	2b80      	cmp	r3, #128	@ 0x80
 80062ba:	f040 8083 	bne.w	80063c4 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	799b      	ldrb	r3, [r3, #6]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d111      	bne.n	80062ea <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80062c6:	78fa      	ldrb	r2, [r7, #3]
 80062c8:	6879      	ldr	r1, [r7, #4]
 80062ca:	4613      	mov	r3, r2
 80062cc:	011b      	lsls	r3, r3, #4
 80062ce:	1a9b      	subs	r3, r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	440b      	add	r3, r1
 80062d4:	334d      	adds	r3, #77	@ 0x4d
 80062d6:	2207      	movs	r2, #7
 80062d8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	78fa      	ldrb	r2, [r7, #3]
 80062e0:	4611      	mov	r1, r2
 80062e2:	4618      	mov	r0, r3
 80062e4:	f007 fd9f 	bl	800de26 <USB_HC_Halt>
 80062e8:	e062      	b.n	80063b0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80062ea:	78fa      	ldrb	r2, [r7, #3]
 80062ec:	6879      	ldr	r1, [r7, #4]
 80062ee:	4613      	mov	r3, r2
 80062f0:	011b      	lsls	r3, r3, #4
 80062f2:	1a9b      	subs	r3, r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	440b      	add	r3, r1
 80062f8:	3344      	adds	r3, #68	@ 0x44
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	1c59      	adds	r1, r3, #1
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	4613      	mov	r3, r2
 8006302:	011b      	lsls	r3, r3, #4
 8006304:	1a9b      	subs	r3, r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4403      	add	r3, r0
 800630a:	3344      	adds	r3, #68	@ 0x44
 800630c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800630e:	78fa      	ldrb	r2, [r7, #3]
 8006310:	6879      	ldr	r1, [r7, #4]
 8006312:	4613      	mov	r3, r2
 8006314:	011b      	lsls	r3, r3, #4
 8006316:	1a9b      	subs	r3, r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	440b      	add	r3, r1
 800631c:	3344      	adds	r3, #68	@ 0x44
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2b02      	cmp	r3, #2
 8006322:	d922      	bls.n	800636a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006324:	78fa      	ldrb	r2, [r7, #3]
 8006326:	6879      	ldr	r1, [r7, #4]
 8006328:	4613      	mov	r3, r2
 800632a:	011b      	lsls	r3, r3, #4
 800632c:	1a9b      	subs	r3, r3, r2
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	440b      	add	r3, r1
 8006332:	3344      	adds	r3, #68	@ 0x44
 8006334:	2200      	movs	r2, #0
 8006336:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006338:	78fa      	ldrb	r2, [r7, #3]
 800633a:	6879      	ldr	r1, [r7, #4]
 800633c:	4613      	mov	r3, r2
 800633e:	011b      	lsls	r3, r3, #4
 8006340:	1a9b      	subs	r3, r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	440b      	add	r3, r1
 8006346:	334c      	adds	r3, #76	@ 0x4c
 8006348:	2204      	movs	r2, #4
 800634a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800634c:	78fa      	ldrb	r2, [r7, #3]
 800634e:	6879      	ldr	r1, [r7, #4]
 8006350:	4613      	mov	r3, r2
 8006352:	011b      	lsls	r3, r3, #4
 8006354:	1a9b      	subs	r3, r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	440b      	add	r3, r1
 800635a:	334c      	adds	r3, #76	@ 0x4c
 800635c:	781a      	ldrb	r2, [r3, #0]
 800635e:	78fb      	ldrb	r3, [r7, #3]
 8006360:	4619      	mov	r1, r3
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f00d f83a 	bl	80133dc <HAL_HCD_HC_NotifyURBChange_Callback>
 8006368:	e022      	b.n	80063b0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800636a:	78fa      	ldrb	r2, [r7, #3]
 800636c:	6879      	ldr	r1, [r7, #4]
 800636e:	4613      	mov	r3, r2
 8006370:	011b      	lsls	r3, r3, #4
 8006372:	1a9b      	subs	r3, r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	440b      	add	r3, r1
 8006378:	334c      	adds	r3, #76	@ 0x4c
 800637a:	2202      	movs	r2, #2
 800637c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800637e:	78fb      	ldrb	r3, [r7, #3]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	4413      	add	r3, r2
 8006386:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006394:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800639c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800639e:	78fb      	ldrb	r3, [r7, #3]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063aa:	461a      	mov	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80063b0:	78fb      	ldrb	r3, [r7, #3]
 80063b2:	015a      	lsls	r2, r3, #5
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063bc:	461a      	mov	r2, r3
 80063be:	2380      	movs	r3, #128	@ 0x80
 80063c0:	6093      	str	r3, [r2, #8]
 80063c2:	e217      	b.n	80067f4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	78fa      	ldrb	r2, [r7, #3]
 80063ca:	4611      	mov	r1, r2
 80063cc:	4618      	mov	r0, r3
 80063ce:	f006 ff8c 	bl	800d2ea <USB_ReadChInterrupts>
 80063d2:	4603      	mov	r3, r0
 80063d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063dc:	d11b      	bne.n	8006416 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80063de:	78fa      	ldrb	r2, [r7, #3]
 80063e0:	6879      	ldr	r1, [r7, #4]
 80063e2:	4613      	mov	r3, r2
 80063e4:	011b      	lsls	r3, r3, #4
 80063e6:	1a9b      	subs	r3, r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	440b      	add	r3, r1
 80063ec:	334d      	adds	r3, #77	@ 0x4d
 80063ee:	2209      	movs	r2, #9
 80063f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	78fa      	ldrb	r2, [r7, #3]
 80063f8:	4611      	mov	r1, r2
 80063fa:	4618      	mov	r0, r3
 80063fc:	f007 fd13 	bl	800de26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006400:	78fb      	ldrb	r3, [r7, #3]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	4413      	add	r3, r2
 8006408:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800640c:	461a      	mov	r2, r3
 800640e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006412:	6093      	str	r3, [r2, #8]
 8006414:	e1ee      	b.n	80067f4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	78fa      	ldrb	r2, [r7, #3]
 800641c:	4611      	mov	r1, r2
 800641e:	4618      	mov	r0, r3
 8006420:	f006 ff63 	bl	800d2ea <USB_ReadChInterrupts>
 8006424:	4603      	mov	r3, r0
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	2b02      	cmp	r3, #2
 800642c:	f040 81df 	bne.w	80067ee <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006430:	78fb      	ldrb	r3, [r7, #3]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	4413      	add	r3, r2
 8006438:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800643c:	461a      	mov	r2, r3
 800643e:	2302      	movs	r3, #2
 8006440:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006442:	78fa      	ldrb	r2, [r7, #3]
 8006444:	6879      	ldr	r1, [r7, #4]
 8006446:	4613      	mov	r3, r2
 8006448:	011b      	lsls	r3, r3, #4
 800644a:	1a9b      	subs	r3, r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	440b      	add	r3, r1
 8006450:	334d      	adds	r3, #77	@ 0x4d
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	2b01      	cmp	r3, #1
 8006456:	f040 8093 	bne.w	8006580 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800645a:	78fa      	ldrb	r2, [r7, #3]
 800645c:	6879      	ldr	r1, [r7, #4]
 800645e:	4613      	mov	r3, r2
 8006460:	011b      	lsls	r3, r3, #4
 8006462:	1a9b      	subs	r3, r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	440b      	add	r3, r1
 8006468:	334d      	adds	r3, #77	@ 0x4d
 800646a:	2202      	movs	r2, #2
 800646c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800646e:	78fa      	ldrb	r2, [r7, #3]
 8006470:	6879      	ldr	r1, [r7, #4]
 8006472:	4613      	mov	r3, r2
 8006474:	011b      	lsls	r3, r3, #4
 8006476:	1a9b      	subs	r3, r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	440b      	add	r3, r1
 800647c:	334c      	adds	r3, #76	@ 0x4c
 800647e:	2201      	movs	r2, #1
 8006480:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006482:	78fa      	ldrb	r2, [r7, #3]
 8006484:	6879      	ldr	r1, [r7, #4]
 8006486:	4613      	mov	r3, r2
 8006488:	011b      	lsls	r3, r3, #4
 800648a:	1a9b      	subs	r3, r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	440b      	add	r3, r1
 8006490:	3326      	adds	r3, #38	@ 0x26
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	2b02      	cmp	r3, #2
 8006496:	d00b      	beq.n	80064b0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8006498:	78fa      	ldrb	r2, [r7, #3]
 800649a:	6879      	ldr	r1, [r7, #4]
 800649c:	4613      	mov	r3, r2
 800649e:	011b      	lsls	r3, r3, #4
 80064a0:	1a9b      	subs	r3, r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	440b      	add	r3, r1
 80064a6:	3326      	adds	r3, #38	@ 0x26
 80064a8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80064aa:	2b03      	cmp	r3, #3
 80064ac:	f040 8190 	bne.w	80067d0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	799b      	ldrb	r3, [r3, #6]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d115      	bne.n	80064e4 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80064b8:	78fa      	ldrb	r2, [r7, #3]
 80064ba:	6879      	ldr	r1, [r7, #4]
 80064bc:	4613      	mov	r3, r2
 80064be:	011b      	lsls	r3, r3, #4
 80064c0:	1a9b      	subs	r3, r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	440b      	add	r3, r1
 80064c6:	333d      	adds	r3, #61	@ 0x3d
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	78fa      	ldrb	r2, [r7, #3]
 80064cc:	f083 0301 	eor.w	r3, r3, #1
 80064d0:	b2d8      	uxtb	r0, r3
 80064d2:	6879      	ldr	r1, [r7, #4]
 80064d4:	4613      	mov	r3, r2
 80064d6:	011b      	lsls	r3, r3, #4
 80064d8:	1a9b      	subs	r3, r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	440b      	add	r3, r1
 80064de:	333d      	adds	r3, #61	@ 0x3d
 80064e0:	4602      	mov	r2, r0
 80064e2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	799b      	ldrb	r3, [r3, #6]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	f040 8171 	bne.w	80067d0 <HCD_HC_OUT_IRQHandler+0x954>
 80064ee:	78fa      	ldrb	r2, [r7, #3]
 80064f0:	6879      	ldr	r1, [r7, #4]
 80064f2:	4613      	mov	r3, r2
 80064f4:	011b      	lsls	r3, r3, #4
 80064f6:	1a9b      	subs	r3, r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	440b      	add	r3, r1
 80064fc:	3334      	adds	r3, #52	@ 0x34
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	f000 8165 	beq.w	80067d0 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8006506:	78fa      	ldrb	r2, [r7, #3]
 8006508:	6879      	ldr	r1, [r7, #4]
 800650a:	4613      	mov	r3, r2
 800650c:	011b      	lsls	r3, r3, #4
 800650e:	1a9b      	subs	r3, r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	440b      	add	r3, r1
 8006514:	3334      	adds	r3, #52	@ 0x34
 8006516:	6819      	ldr	r1, [r3, #0]
 8006518:	78fa      	ldrb	r2, [r7, #3]
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	4613      	mov	r3, r2
 800651e:	011b      	lsls	r3, r3, #4
 8006520:	1a9b      	subs	r3, r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4403      	add	r3, r0
 8006526:	3328      	adds	r3, #40	@ 0x28
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	440b      	add	r3, r1
 800652c:	1e59      	subs	r1, r3, #1
 800652e:	78fa      	ldrb	r2, [r7, #3]
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	4613      	mov	r3, r2
 8006534:	011b      	lsls	r3, r3, #4
 8006536:	1a9b      	subs	r3, r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4403      	add	r3, r0
 800653c:	3328      	adds	r3, #40	@ 0x28
 800653e:	881b      	ldrh	r3, [r3, #0]
 8006540:	fbb1 f3f3 	udiv	r3, r1, r3
 8006544:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	2b00      	cmp	r3, #0
 800654e:	f000 813f 	beq.w	80067d0 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8006552:	78fa      	ldrb	r2, [r7, #3]
 8006554:	6879      	ldr	r1, [r7, #4]
 8006556:	4613      	mov	r3, r2
 8006558:	011b      	lsls	r3, r3, #4
 800655a:	1a9b      	subs	r3, r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	440b      	add	r3, r1
 8006560:	333d      	adds	r3, #61	@ 0x3d
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	78fa      	ldrb	r2, [r7, #3]
 8006566:	f083 0301 	eor.w	r3, r3, #1
 800656a:	b2d8      	uxtb	r0, r3
 800656c:	6879      	ldr	r1, [r7, #4]
 800656e:	4613      	mov	r3, r2
 8006570:	011b      	lsls	r3, r3, #4
 8006572:	1a9b      	subs	r3, r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	440b      	add	r3, r1
 8006578:	333d      	adds	r3, #61	@ 0x3d
 800657a:	4602      	mov	r2, r0
 800657c:	701a      	strb	r2, [r3, #0]
 800657e:	e127      	b.n	80067d0 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006580:	78fa      	ldrb	r2, [r7, #3]
 8006582:	6879      	ldr	r1, [r7, #4]
 8006584:	4613      	mov	r3, r2
 8006586:	011b      	lsls	r3, r3, #4
 8006588:	1a9b      	subs	r3, r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	440b      	add	r3, r1
 800658e:	334d      	adds	r3, #77	@ 0x4d
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	2b03      	cmp	r3, #3
 8006594:	d120      	bne.n	80065d8 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006596:	78fa      	ldrb	r2, [r7, #3]
 8006598:	6879      	ldr	r1, [r7, #4]
 800659a:	4613      	mov	r3, r2
 800659c:	011b      	lsls	r3, r3, #4
 800659e:	1a9b      	subs	r3, r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	440b      	add	r3, r1
 80065a4:	334d      	adds	r3, #77	@ 0x4d
 80065a6:	2202      	movs	r2, #2
 80065a8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80065aa:	78fa      	ldrb	r2, [r7, #3]
 80065ac:	6879      	ldr	r1, [r7, #4]
 80065ae:	4613      	mov	r3, r2
 80065b0:	011b      	lsls	r3, r3, #4
 80065b2:	1a9b      	subs	r3, r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	440b      	add	r3, r1
 80065b8:	331b      	adds	r3, #27
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	f040 8107 	bne.w	80067d0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80065c2:	78fa      	ldrb	r2, [r7, #3]
 80065c4:	6879      	ldr	r1, [r7, #4]
 80065c6:	4613      	mov	r3, r2
 80065c8:	011b      	lsls	r3, r3, #4
 80065ca:	1a9b      	subs	r3, r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	440b      	add	r3, r1
 80065d0:	334c      	adds	r3, #76	@ 0x4c
 80065d2:	2202      	movs	r2, #2
 80065d4:	701a      	strb	r2, [r3, #0]
 80065d6:	e0fb      	b.n	80067d0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80065d8:	78fa      	ldrb	r2, [r7, #3]
 80065da:	6879      	ldr	r1, [r7, #4]
 80065dc:	4613      	mov	r3, r2
 80065de:	011b      	lsls	r3, r3, #4
 80065e0:	1a9b      	subs	r3, r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	440b      	add	r3, r1
 80065e6:	334d      	adds	r3, #77	@ 0x4d
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	2b04      	cmp	r3, #4
 80065ec:	d13a      	bne.n	8006664 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80065ee:	78fa      	ldrb	r2, [r7, #3]
 80065f0:	6879      	ldr	r1, [r7, #4]
 80065f2:	4613      	mov	r3, r2
 80065f4:	011b      	lsls	r3, r3, #4
 80065f6:	1a9b      	subs	r3, r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	440b      	add	r3, r1
 80065fc:	334d      	adds	r3, #77	@ 0x4d
 80065fe:	2202      	movs	r2, #2
 8006600:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006602:	78fa      	ldrb	r2, [r7, #3]
 8006604:	6879      	ldr	r1, [r7, #4]
 8006606:	4613      	mov	r3, r2
 8006608:	011b      	lsls	r3, r3, #4
 800660a:	1a9b      	subs	r3, r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	440b      	add	r3, r1
 8006610:	334c      	adds	r3, #76	@ 0x4c
 8006612:	2202      	movs	r2, #2
 8006614:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006616:	78fa      	ldrb	r2, [r7, #3]
 8006618:	6879      	ldr	r1, [r7, #4]
 800661a:	4613      	mov	r3, r2
 800661c:	011b      	lsls	r3, r3, #4
 800661e:	1a9b      	subs	r3, r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	440b      	add	r3, r1
 8006624:	331b      	adds	r3, #27
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	2b01      	cmp	r3, #1
 800662a:	f040 80d1 	bne.w	80067d0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800662e:	78fa      	ldrb	r2, [r7, #3]
 8006630:	6879      	ldr	r1, [r7, #4]
 8006632:	4613      	mov	r3, r2
 8006634:	011b      	lsls	r3, r3, #4
 8006636:	1a9b      	subs	r3, r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	440b      	add	r3, r1
 800663c:	331b      	adds	r3, #27
 800663e:	2200      	movs	r2, #0
 8006640:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006642:	78fb      	ldrb	r3, [r7, #3]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	4413      	add	r3, r2
 800664a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	78fa      	ldrb	r2, [r7, #3]
 8006652:	0151      	lsls	r1, r2, #5
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	440a      	add	r2, r1
 8006658:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800665c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006660:	6053      	str	r3, [r2, #4]
 8006662:	e0b5      	b.n	80067d0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006664:	78fa      	ldrb	r2, [r7, #3]
 8006666:	6879      	ldr	r1, [r7, #4]
 8006668:	4613      	mov	r3, r2
 800666a:	011b      	lsls	r3, r3, #4
 800666c:	1a9b      	subs	r3, r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	440b      	add	r3, r1
 8006672:	334d      	adds	r3, #77	@ 0x4d
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	2b05      	cmp	r3, #5
 8006678:	d114      	bne.n	80066a4 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800667a:	78fa      	ldrb	r2, [r7, #3]
 800667c:	6879      	ldr	r1, [r7, #4]
 800667e:	4613      	mov	r3, r2
 8006680:	011b      	lsls	r3, r3, #4
 8006682:	1a9b      	subs	r3, r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	440b      	add	r3, r1
 8006688:	334d      	adds	r3, #77	@ 0x4d
 800668a:	2202      	movs	r2, #2
 800668c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800668e:	78fa      	ldrb	r2, [r7, #3]
 8006690:	6879      	ldr	r1, [r7, #4]
 8006692:	4613      	mov	r3, r2
 8006694:	011b      	lsls	r3, r3, #4
 8006696:	1a9b      	subs	r3, r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	440b      	add	r3, r1
 800669c:	334c      	adds	r3, #76	@ 0x4c
 800669e:	2202      	movs	r2, #2
 80066a0:	701a      	strb	r2, [r3, #0]
 80066a2:	e095      	b.n	80067d0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80066a4:	78fa      	ldrb	r2, [r7, #3]
 80066a6:	6879      	ldr	r1, [r7, #4]
 80066a8:	4613      	mov	r3, r2
 80066aa:	011b      	lsls	r3, r3, #4
 80066ac:	1a9b      	subs	r3, r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	440b      	add	r3, r1
 80066b2:	334d      	adds	r3, #77	@ 0x4d
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	2b06      	cmp	r3, #6
 80066b8:	d114      	bne.n	80066e4 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80066ba:	78fa      	ldrb	r2, [r7, #3]
 80066bc:	6879      	ldr	r1, [r7, #4]
 80066be:	4613      	mov	r3, r2
 80066c0:	011b      	lsls	r3, r3, #4
 80066c2:	1a9b      	subs	r3, r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	440b      	add	r3, r1
 80066c8:	334d      	adds	r3, #77	@ 0x4d
 80066ca:	2202      	movs	r2, #2
 80066cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80066ce:	78fa      	ldrb	r2, [r7, #3]
 80066d0:	6879      	ldr	r1, [r7, #4]
 80066d2:	4613      	mov	r3, r2
 80066d4:	011b      	lsls	r3, r3, #4
 80066d6:	1a9b      	subs	r3, r3, r2
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	440b      	add	r3, r1
 80066dc:	334c      	adds	r3, #76	@ 0x4c
 80066de:	2205      	movs	r2, #5
 80066e0:	701a      	strb	r2, [r3, #0]
 80066e2:	e075      	b.n	80067d0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80066e4:	78fa      	ldrb	r2, [r7, #3]
 80066e6:	6879      	ldr	r1, [r7, #4]
 80066e8:	4613      	mov	r3, r2
 80066ea:	011b      	lsls	r3, r3, #4
 80066ec:	1a9b      	subs	r3, r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	440b      	add	r3, r1
 80066f2:	334d      	adds	r3, #77	@ 0x4d
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	2b07      	cmp	r3, #7
 80066f8:	d00a      	beq.n	8006710 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80066fa:	78fa      	ldrb	r2, [r7, #3]
 80066fc:	6879      	ldr	r1, [r7, #4]
 80066fe:	4613      	mov	r3, r2
 8006700:	011b      	lsls	r3, r3, #4
 8006702:	1a9b      	subs	r3, r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	440b      	add	r3, r1
 8006708:	334d      	adds	r3, #77	@ 0x4d
 800670a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800670c:	2b09      	cmp	r3, #9
 800670e:	d170      	bne.n	80067f2 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006710:	78fa      	ldrb	r2, [r7, #3]
 8006712:	6879      	ldr	r1, [r7, #4]
 8006714:	4613      	mov	r3, r2
 8006716:	011b      	lsls	r3, r3, #4
 8006718:	1a9b      	subs	r3, r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	440b      	add	r3, r1
 800671e:	334d      	adds	r3, #77	@ 0x4d
 8006720:	2202      	movs	r2, #2
 8006722:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006724:	78fa      	ldrb	r2, [r7, #3]
 8006726:	6879      	ldr	r1, [r7, #4]
 8006728:	4613      	mov	r3, r2
 800672a:	011b      	lsls	r3, r3, #4
 800672c:	1a9b      	subs	r3, r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	440b      	add	r3, r1
 8006732:	3344      	adds	r3, #68	@ 0x44
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	1c59      	adds	r1, r3, #1
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	4613      	mov	r3, r2
 800673c:	011b      	lsls	r3, r3, #4
 800673e:	1a9b      	subs	r3, r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4403      	add	r3, r0
 8006744:	3344      	adds	r3, #68	@ 0x44
 8006746:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006748:	78fa      	ldrb	r2, [r7, #3]
 800674a:	6879      	ldr	r1, [r7, #4]
 800674c:	4613      	mov	r3, r2
 800674e:	011b      	lsls	r3, r3, #4
 8006750:	1a9b      	subs	r3, r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	440b      	add	r3, r1
 8006756:	3344      	adds	r3, #68	@ 0x44
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2b02      	cmp	r3, #2
 800675c:	d914      	bls.n	8006788 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800675e:	78fa      	ldrb	r2, [r7, #3]
 8006760:	6879      	ldr	r1, [r7, #4]
 8006762:	4613      	mov	r3, r2
 8006764:	011b      	lsls	r3, r3, #4
 8006766:	1a9b      	subs	r3, r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	440b      	add	r3, r1
 800676c:	3344      	adds	r3, #68	@ 0x44
 800676e:	2200      	movs	r2, #0
 8006770:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006772:	78fa      	ldrb	r2, [r7, #3]
 8006774:	6879      	ldr	r1, [r7, #4]
 8006776:	4613      	mov	r3, r2
 8006778:	011b      	lsls	r3, r3, #4
 800677a:	1a9b      	subs	r3, r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	440b      	add	r3, r1
 8006780:	334c      	adds	r3, #76	@ 0x4c
 8006782:	2204      	movs	r2, #4
 8006784:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006786:	e022      	b.n	80067ce <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006788:	78fa      	ldrb	r2, [r7, #3]
 800678a:	6879      	ldr	r1, [r7, #4]
 800678c:	4613      	mov	r3, r2
 800678e:	011b      	lsls	r3, r3, #4
 8006790:	1a9b      	subs	r3, r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	440b      	add	r3, r1
 8006796:	334c      	adds	r3, #76	@ 0x4c
 8006798:	2202      	movs	r2, #2
 800679a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800679c:	78fb      	ldrb	r3, [r7, #3]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80067b2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80067ba:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80067bc:	78fb      	ldrb	r3, [r7, #3]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067c8:	461a      	mov	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80067ce:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80067d0:	78fa      	ldrb	r2, [r7, #3]
 80067d2:	6879      	ldr	r1, [r7, #4]
 80067d4:	4613      	mov	r3, r2
 80067d6:	011b      	lsls	r3, r3, #4
 80067d8:	1a9b      	subs	r3, r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	440b      	add	r3, r1
 80067de:	334c      	adds	r3, #76	@ 0x4c
 80067e0:	781a      	ldrb	r2, [r3, #0]
 80067e2:	78fb      	ldrb	r3, [r7, #3]
 80067e4:	4619      	mov	r1, r3
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f00c fdf8 	bl	80133dc <HAL_HCD_HC_NotifyURBChange_Callback>
 80067ec:	e002      	b.n	80067f4 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80067ee:	bf00      	nop
 80067f0:	e000      	b.n	80067f4 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80067f2:	bf00      	nop
  }
}
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b08a      	sub	sp, #40	@ 0x28
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	f003 030f 	and.w	r3, r3, #15
 800681a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	0c5b      	lsrs	r3, r3, #17
 8006820:	f003 030f 	and.w	r3, r3, #15
 8006824:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	091b      	lsrs	r3, r3, #4
 800682a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800682e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	2b02      	cmp	r3, #2
 8006834:	d004      	beq.n	8006840 <HCD_RXQLVL_IRQHandler+0x46>
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	2b05      	cmp	r3, #5
 800683a:	f000 80b6 	beq.w	80069aa <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800683e:	e0b7      	b.n	80069b0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 80b3 	beq.w	80069ae <HCD_RXQLVL_IRQHandler+0x1b4>
 8006848:	6879      	ldr	r1, [r7, #4]
 800684a:	69ba      	ldr	r2, [r7, #24]
 800684c:	4613      	mov	r3, r2
 800684e:	011b      	lsls	r3, r3, #4
 8006850:	1a9b      	subs	r3, r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	440b      	add	r3, r1
 8006856:	332c      	adds	r3, #44	@ 0x2c
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	f000 80a7 	beq.w	80069ae <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8006860:	6879      	ldr	r1, [r7, #4]
 8006862:	69ba      	ldr	r2, [r7, #24]
 8006864:	4613      	mov	r3, r2
 8006866:	011b      	lsls	r3, r3, #4
 8006868:	1a9b      	subs	r3, r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	440b      	add	r3, r1
 800686e:	3338      	adds	r3, #56	@ 0x38
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	18d1      	adds	r1, r2, r3
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	69ba      	ldr	r2, [r7, #24]
 800687a:	4613      	mov	r3, r2
 800687c:	011b      	lsls	r3, r3, #4
 800687e:	1a9b      	subs	r3, r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4403      	add	r3, r0
 8006884:	3334      	adds	r3, #52	@ 0x34
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4299      	cmp	r1, r3
 800688a:	f200 8083 	bhi.w	8006994 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6818      	ldr	r0, [r3, #0]
 8006892:	6879      	ldr	r1, [r7, #4]
 8006894:	69ba      	ldr	r2, [r7, #24]
 8006896:	4613      	mov	r3, r2
 8006898:	011b      	lsls	r3, r3, #4
 800689a:	1a9b      	subs	r3, r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	440b      	add	r3, r1
 80068a0:	332c      	adds	r3, #44	@ 0x2c
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	b292      	uxth	r2, r2
 80068a8:	4619      	mov	r1, r3
 80068aa:	f006 fcb3 	bl	800d214 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80068ae:	6879      	ldr	r1, [r7, #4]
 80068b0:	69ba      	ldr	r2, [r7, #24]
 80068b2:	4613      	mov	r3, r2
 80068b4:	011b      	lsls	r3, r3, #4
 80068b6:	1a9b      	subs	r3, r3, r2
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	440b      	add	r3, r1
 80068bc:	332c      	adds	r3, #44	@ 0x2c
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	18d1      	adds	r1, r2, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	69ba      	ldr	r2, [r7, #24]
 80068c8:	4613      	mov	r3, r2
 80068ca:	011b      	lsls	r3, r3, #4
 80068cc:	1a9b      	subs	r3, r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4403      	add	r3, r0
 80068d2:	332c      	adds	r3, #44	@ 0x2c
 80068d4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80068d6:	6879      	ldr	r1, [r7, #4]
 80068d8:	69ba      	ldr	r2, [r7, #24]
 80068da:	4613      	mov	r3, r2
 80068dc:	011b      	lsls	r3, r3, #4
 80068de:	1a9b      	subs	r3, r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	440b      	add	r3, r1
 80068e4:	3338      	adds	r3, #56	@ 0x38
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	18d1      	adds	r1, r2, r3
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	69ba      	ldr	r2, [r7, #24]
 80068f0:	4613      	mov	r3, r2
 80068f2:	011b      	lsls	r3, r3, #4
 80068f4:	1a9b      	subs	r3, r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	4403      	add	r3, r0
 80068fa:	3338      	adds	r3, #56	@ 0x38
 80068fc:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	6a3b      	ldr	r3, [r7, #32]
 8006904:	4413      	add	r3, r2
 8006906:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	0cdb      	lsrs	r3, r3, #19
 800690e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006912:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006914:	6879      	ldr	r1, [r7, #4]
 8006916:	69ba      	ldr	r2, [r7, #24]
 8006918:	4613      	mov	r3, r2
 800691a:	011b      	lsls	r3, r3, #4
 800691c:	1a9b      	subs	r3, r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	440b      	add	r3, r1
 8006922:	3328      	adds	r3, #40	@ 0x28
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	461a      	mov	r2, r3
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	4293      	cmp	r3, r2
 800692c:	d13f      	bne.n	80069ae <HCD_RXQLVL_IRQHandler+0x1b4>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d03c      	beq.n	80069ae <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	6a3b      	ldr	r3, [r7, #32]
 800693a:	4413      	add	r3, r2
 800693c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800694a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006952:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	4413      	add	r3, r2
 800695c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006960:	461a      	mov	r2, r3
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	4613      	mov	r3, r2
 800696c:	011b      	lsls	r3, r3, #4
 800696e:	1a9b      	subs	r3, r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	440b      	add	r3, r1
 8006974:	333c      	adds	r3, #60	@ 0x3c
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	f083 0301 	eor.w	r3, r3, #1
 800697c:	b2d8      	uxtb	r0, r3
 800697e:	6879      	ldr	r1, [r7, #4]
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	4613      	mov	r3, r2
 8006984:	011b      	lsls	r3, r3, #4
 8006986:	1a9b      	subs	r3, r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	440b      	add	r3, r1
 800698c:	333c      	adds	r3, #60	@ 0x3c
 800698e:	4602      	mov	r2, r0
 8006990:	701a      	strb	r2, [r3, #0]
      break;
 8006992:	e00c      	b.n	80069ae <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8006994:	6879      	ldr	r1, [r7, #4]
 8006996:	69ba      	ldr	r2, [r7, #24]
 8006998:	4613      	mov	r3, r2
 800699a:	011b      	lsls	r3, r3, #4
 800699c:	1a9b      	subs	r3, r3, r2
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	440b      	add	r3, r1
 80069a2:	334c      	adds	r3, #76	@ 0x4c
 80069a4:	2204      	movs	r2, #4
 80069a6:	701a      	strb	r2, [r3, #0]
      break;
 80069a8:	e001      	b.n	80069ae <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80069aa:	bf00      	nop
 80069ac:	e000      	b.n	80069b0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80069ae:	bf00      	nop
  }
}
 80069b0:	bf00      	nop
 80069b2:	3728      	adds	r7, #40	@ 0x28
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80069e4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d10b      	bne.n	8006a08 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d102      	bne.n	8006a00 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f00c fcd2 	bl	80133a4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	f043 0302 	orr.w	r3, r3, #2
 8006a06:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f003 0308 	and.w	r3, r3, #8
 8006a0e:	2b08      	cmp	r3, #8
 8006a10:	d132      	bne.n	8006a78 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f043 0308 	orr.w	r3, r3, #8
 8006a18:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f003 0304 	and.w	r3, r3, #4
 8006a20:	2b04      	cmp	r3, #4
 8006a22:	d126      	bne.n	8006a72 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	7a5b      	ldrb	r3, [r3, #9]
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d113      	bne.n	8006a54 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8006a32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a36:	d106      	bne.n	8006a46 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2102      	movs	r1, #2
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f006 fd72 	bl	800d528 <USB_InitFSLSPClkSel>
 8006a44:	e011      	b.n	8006a6a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2101      	movs	r1, #1
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f006 fd6b 	bl	800d528 <USB_InitFSLSPClkSel>
 8006a52:	e00a      	b.n	8006a6a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	79db      	ldrb	r3, [r3, #7]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d106      	bne.n	8006a6a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a62:	461a      	mov	r2, r3
 8006a64:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8006a68:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f00c fcc8 	bl	8013400 <HAL_HCD_PortEnabled_Callback>
 8006a70:	e002      	b.n	8006a78 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f00c fcd2 	bl	801341c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f003 0320 	and.w	r3, r3, #32
 8006a7e:	2b20      	cmp	r3, #32
 8006a80:	d103      	bne.n	8006a8a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	f043 0320 	orr.w	r3, r3, #32
 8006a88:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006a90:	461a      	mov	r2, r3
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	6013      	str	r3, [r2, #0]
}
 8006a96:	bf00      	nop
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
	...

08006aa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e08b      	b.n	8006bca <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d106      	bne.n	8006acc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7fb f9fc 	bl	8001ec4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2224      	movs	r2, #36	@ 0x24
 8006ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f022 0201 	bic.w	r2, r2, #1
 8006ae2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685a      	ldr	r2, [r3, #4]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006af0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d107      	bne.n	8006b1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	689a      	ldr	r2, [r3, #8]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b16:	609a      	str	r2, [r3, #8]
 8006b18:	e006      	b.n	8006b28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	689a      	ldr	r2, [r3, #8]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006b26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d108      	bne.n	8006b42 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b3e:	605a      	str	r2, [r3, #4]
 8006b40:	e007      	b.n	8006b52 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6859      	ldr	r1, [r3, #4]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8006bd4 <HAL_I2C_Init+0x134>)
 8006b5e:	430b      	orrs	r3, r1
 8006b60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68da      	ldr	r2, [r3, #12]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	691a      	ldr	r2, [r3, #16]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	69d9      	ldr	r1, [r3, #28]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a1a      	ldr	r2, [r3, #32]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f042 0201 	orr.w	r2, r2, #1
 8006baa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2220      	movs	r2, #32
 8006bb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	02008000 	.word	0x02008000

08006bd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b20      	cmp	r3, #32
 8006bec:	d138      	bne.n	8006c60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d101      	bne.n	8006bfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	e032      	b.n	8006c62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2224      	movs	r2, #36	@ 0x24
 8006c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 0201 	bic.w	r2, r2, #1
 8006c1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006c2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6819      	ldr	r1, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	430a      	orrs	r2, r1
 8006c3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f042 0201 	orr.w	r2, r2, #1
 8006c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	e000      	b.n	8006c62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c60:	2302      	movs	r3, #2
  }
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b085      	sub	sp, #20
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
 8006c76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b20      	cmp	r3, #32
 8006c82:	d139      	bne.n	8006cf8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d101      	bne.n	8006c92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c8e:	2302      	movs	r3, #2
 8006c90:	e033      	b.n	8006cfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2224      	movs	r2, #36	@ 0x24
 8006c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 0201 	bic.w	r2, r2, #1
 8006cb0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006cc0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	021b      	lsls	r3, r3, #8
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f042 0201 	orr.w	r2, r2, #1
 8006ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2220      	movs	r2, #32
 8006ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	e000      	b.n	8006cfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006cf8:	2302      	movs	r3, #2
  }
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3714      	adds	r7, #20
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b084      	sub	sp, #16
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d101      	bne.n	8006d18 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e08f      	b.n	8006e38 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d106      	bne.n	8006d32 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7fb f971 	bl	8002014 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2202      	movs	r2, #2
 8006d36:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	699a      	ldr	r2, [r3, #24]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006d48:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	6999      	ldr	r1, [r3, #24]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685a      	ldr	r2, [r3, #4]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006d5e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	041b      	lsls	r3, r3, #16
 8006d74:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6999      	ldr	r1, [r3, #24]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	430a      	orrs	r2, r1
 8006d82:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	69db      	ldr	r3, [r3, #28]
 8006d88:	041b      	lsls	r3, r3, #16
 8006d8a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a19      	ldr	r1, [r3, #32]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d9e:	041b      	lsls	r3, r3, #16
 8006da0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	430a      	orrs	r2, r1
 8006dae:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db4:	041b      	lsls	r3, r3, #16
 8006db6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006dcc:	021b      	lsls	r3, r3, #8
 8006dce:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006dd6:	041b      	lsls	r3, r3, #16
 8006dd8:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006de8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006dfc:	431a      	orrs	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f042 0206 	orr.w	r2, r2, #6
 8006e14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	699a      	ldr	r2, [r3, #24]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f042 0201 	orr.w	r2, r2, #1
 8006e24:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e4e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e56:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f003 0304 	and.w	r3, r3, #4
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d023      	beq.n	8006eaa <HAL_LTDC_IRQHandler+0x6a>
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	f003 0304 	and.w	r3, r3, #4
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d01e      	beq.n	8006eaa <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f022 0204 	bic.w	r2, r2, #4
 8006e7a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2204      	movs	r2, #4
 8006e82:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006e8a:	f043 0201 	orr.w	r2, r3, #1
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2204      	movs	r2, #4
 8006e98:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f86f 	bl	8006f88 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f003 0302 	and.w	r3, r3, #2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d023      	beq.n	8006efc <HAL_LTDC_IRQHandler+0xbc>
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	f003 0302 	and.w	r3, r3, #2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d01e      	beq.n	8006efc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f022 0202 	bic.w	r2, r2, #2
 8006ecc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006edc:	f043 0202 	orr.w	r2, r3, #2
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2204      	movs	r2, #4
 8006eea:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f846 	bl	8006f88 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d01b      	beq.n	8006f3e <HAL_LTDC_IRQHandler+0xfe>
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d016      	beq.n	8006f3e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f022 0201 	bic.w	r2, r2, #1
 8006f1e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2201      	movs	r2, #1
 8006f26:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 f82f 	bl	8006f9c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f003 0308 	and.w	r3, r3, #8
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d01b      	beq.n	8006f80 <HAL_LTDC_IRQHandler+0x140>
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f003 0308 	and.w	r3, r3, #8
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d016      	beq.n	8006f80 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f022 0208 	bic.w	r2, r2, #8
 8006f60:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2208      	movs	r2, #8
 8006f68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f818 	bl	8006fb0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006f80:	bf00      	nop
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006f90:	bf00      	nop
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006fc4:	b5b0      	push	{r4, r5, r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d101      	bne.n	8006fde <HAL_LTDC_ConfigLayer+0x1a>
 8006fda:	2302      	movs	r3, #2
 8006fdc:	e02c      	b.n	8007038 <HAL_LTDC_ConfigLayer+0x74>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2202      	movs	r2, #2
 8006fea:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2134      	movs	r1, #52	@ 0x34
 8006ff4:	fb01 f303 	mul.w	r3, r1, r3
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	4614      	mov	r4, r2
 8007002:	461d      	mov	r5, r3
 8007004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800700a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800700c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800700e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007010:	682b      	ldr	r3, [r5, #0]
 8007012:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	68b9      	ldr	r1, [r7, #8]
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 f811 	bl	8007040 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2201      	movs	r2, #1
 8007024:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bdb0      	pop	{r4, r5, r7, pc}

08007040 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007040:	b480      	push	{r7}
 8007042:	b089      	sub	sp, #36	@ 0x24
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	0c1b      	lsrs	r3, r3, #16
 8007058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800705c:	4413      	add	r3, r2
 800705e:	041b      	lsls	r3, r3, #16
 8007060:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	01db      	lsls	r3, r3, #7
 800706c:	4413      	add	r3, r2
 800706e:	3384      	adds	r3, #132	@ 0x84
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	6812      	ldr	r2, [r2, #0]
 8007076:	4611      	mov	r1, r2
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	01d2      	lsls	r2, r2, #7
 800707c:	440a      	add	r2, r1
 800707e:	3284      	adds	r2, #132	@ 0x84
 8007080:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007084:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	0c1b      	lsrs	r3, r3, #16
 8007092:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007096:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007098:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4619      	mov	r1, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	01db      	lsls	r3, r3, #7
 80070a4:	440b      	add	r3, r1
 80070a6:	3384      	adds	r3, #132	@ 0x84
 80070a8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80070ae:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	68da      	ldr	r2, [r3, #12]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070be:	4413      	add	r3, r2
 80070c0:	041b      	lsls	r3, r3, #16
 80070c2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	461a      	mov	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	01db      	lsls	r3, r3, #7
 80070ce:	4413      	add	r3, r2
 80070d0:	3384      	adds	r3, #132	@ 0x84
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	6812      	ldr	r2, [r2, #0]
 80070d8:	4611      	mov	r1, r2
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	01d2      	lsls	r2, r2, #7
 80070de:	440a      	add	r2, r1
 80070e0:	3284      	adds	r2, #132	@ 0x84
 80070e2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80070e6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	689a      	ldr	r2, [r3, #8]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070f6:	4413      	add	r3, r2
 80070f8:	1c5a      	adds	r2, r3, #1
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4619      	mov	r1, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	01db      	lsls	r3, r3, #7
 8007104:	440b      	add	r3, r1
 8007106:	3384      	adds	r3, #132	@ 0x84
 8007108:	4619      	mov	r1, r3
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	4313      	orrs	r3, r2
 800710e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	461a      	mov	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	01db      	lsls	r3, r3, #7
 800711a:	4413      	add	r3, r2
 800711c:	3384      	adds	r3, #132	@ 0x84
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	6812      	ldr	r2, [r2, #0]
 8007124:	4611      	mov	r1, r2
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	01d2      	lsls	r2, r2, #7
 800712a:	440a      	add	r2, r1
 800712c:	3284      	adds	r2, #132	@ 0x84
 800712e:	f023 0307 	bic.w	r3, r3, #7
 8007132:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	461a      	mov	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	01db      	lsls	r3, r3, #7
 800713e:	4413      	add	r3, r2
 8007140:	3384      	adds	r3, #132	@ 0x84
 8007142:	461a      	mov	r2, r3
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007150:	021b      	lsls	r3, r3, #8
 8007152:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800715a:	041b      	lsls	r3, r3, #16
 800715c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	061b      	lsls	r3, r3, #24
 8007164:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800716c:	461a      	mov	r2, r3
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	431a      	orrs	r2, r3
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	431a      	orrs	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4619      	mov	r1, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	01db      	lsls	r3, r3, #7
 8007180:	440b      	add	r3, r1
 8007182:	3384      	adds	r3, #132	@ 0x84
 8007184:	4619      	mov	r1, r3
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	4313      	orrs	r3, r2
 800718a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	461a      	mov	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	01db      	lsls	r3, r3, #7
 8007196:	4413      	add	r3, r2
 8007198:	3384      	adds	r3, #132	@ 0x84
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	6812      	ldr	r2, [r2, #0]
 80071a0:	4611      	mov	r1, r2
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	01d2      	lsls	r2, r2, #7
 80071a6:	440a      	add	r2, r1
 80071a8:	3284      	adds	r2, #132	@ 0x84
 80071aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80071ae:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	461a      	mov	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	01db      	lsls	r3, r3, #7
 80071ba:	4413      	add	r3, r2
 80071bc:	3384      	adds	r3, #132	@ 0x84
 80071be:	461a      	mov	r2, r3
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	695b      	ldr	r3, [r3, #20]
 80071c4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	461a      	mov	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	01db      	lsls	r3, r3, #7
 80071d0:	4413      	add	r3, r2
 80071d2:	3384      	adds	r3, #132	@ 0x84
 80071d4:	69da      	ldr	r2, [r3, #28]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4619      	mov	r1, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	01db      	lsls	r3, r3, #7
 80071e0:	440b      	add	r3, r1
 80071e2:	3384      	adds	r3, #132	@ 0x84
 80071e4:	4619      	mov	r1, r3
 80071e6:	4b4f      	ldr	r3, [pc, #316]	@ (8007324 <LTDC_SetConfig+0x2e4>)
 80071e8:	4013      	ands	r3, r2
 80071ea:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	69da      	ldr	r2, [r3, #28]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	6a1b      	ldr	r3, [r3, #32]
 80071f4:	68f9      	ldr	r1, [r7, #12]
 80071f6:	6809      	ldr	r1, [r1, #0]
 80071f8:	4608      	mov	r0, r1
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	01c9      	lsls	r1, r1, #7
 80071fe:	4401      	add	r1, r0
 8007200:	3184      	adds	r1, #132	@ 0x84
 8007202:	4313      	orrs	r3, r2
 8007204:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	01db      	lsls	r3, r3, #7
 8007210:	4413      	add	r3, r2
 8007212:	3384      	adds	r3, #132	@ 0x84
 8007214:	461a      	mov	r2, r3
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800721a:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d102      	bne.n	800722a <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 8007224:	2304      	movs	r3, #4
 8007226:	61fb      	str	r3, [r7, #28]
 8007228:	e01b      	b.n	8007262 <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d102      	bne.n	8007238 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 8007232:	2303      	movs	r3, #3
 8007234:	61fb      	str	r3, [r7, #28]
 8007236:	e014      	b.n	8007262 <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	2b04      	cmp	r3, #4
 800723e:	d00b      	beq.n	8007258 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007244:	2b02      	cmp	r3, #2
 8007246:	d007      	beq.n	8007258 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800724c:	2b03      	cmp	r3, #3
 800724e:	d003      	beq.n	8007258 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007254:	2b07      	cmp	r3, #7
 8007256:	d102      	bne.n	800725e <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 8007258:	2302      	movs	r3, #2
 800725a:	61fb      	str	r3, [r7, #28]
 800725c:	e001      	b.n	8007262 <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 800725e:	2301      	movs	r3, #1
 8007260:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	01db      	lsls	r3, r3, #7
 800726c:	4413      	add	r3, r2
 800726e:	3384      	adds	r3, #132	@ 0x84
 8007270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	6812      	ldr	r2, [r2, #0]
 8007276:	4611      	mov	r1, r2
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	01d2      	lsls	r2, r2, #7
 800727c:	440a      	add	r2, r1
 800727e:	3284      	adds	r2, #132	@ 0x84
 8007280:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8007284:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800728a:	69fa      	ldr	r2, [r7, #28]
 800728c:	fb02 f303 	mul.w	r3, r2, r3
 8007290:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	6859      	ldr	r1, [r3, #4]
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	1acb      	subs	r3, r1, r3
 800729c:	69f9      	ldr	r1, [r7, #28]
 800729e:	fb01 f303 	mul.w	r3, r1, r3
 80072a2:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80072a4:	68f9      	ldr	r1, [r7, #12]
 80072a6:	6809      	ldr	r1, [r1, #0]
 80072a8:	4608      	mov	r0, r1
 80072aa:	6879      	ldr	r1, [r7, #4]
 80072ac:	01c9      	lsls	r1, r1, #7
 80072ae:	4401      	add	r1, r0
 80072b0:	3184      	adds	r1, #132	@ 0x84
 80072b2:	4313      	orrs	r3, r2
 80072b4:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	461a      	mov	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	01db      	lsls	r3, r3, #7
 80072c0:	4413      	add	r3, r2
 80072c2:	3384      	adds	r3, #132	@ 0x84
 80072c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4619      	mov	r1, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	01db      	lsls	r3, r3, #7
 80072d0:	440b      	add	r3, r1
 80072d2:	3384      	adds	r3, #132	@ 0x84
 80072d4:	4619      	mov	r1, r3
 80072d6:	4b14      	ldr	r3, [pc, #80]	@ (8007328 <LTDC_SetConfig+0x2e8>)
 80072d8:	4013      	ands	r3, r2
 80072da:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	461a      	mov	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	01db      	lsls	r3, r3, #7
 80072e6:	4413      	add	r3, r2
 80072e8:	3384      	adds	r3, #132	@ 0x84
 80072ea:	461a      	mov	r2, r3
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	461a      	mov	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	01db      	lsls	r3, r3, #7
 80072fc:	4413      	add	r3, r2
 80072fe:	3384      	adds	r3, #132	@ 0x84
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	6812      	ldr	r2, [r2, #0]
 8007306:	4611      	mov	r1, r2
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	01d2      	lsls	r2, r2, #7
 800730c:	440a      	add	r2, r1
 800730e:	3284      	adds	r2, #132	@ 0x84
 8007310:	f043 0301 	orr.w	r3, r3, #1
 8007314:	6013      	str	r3, [r2, #0]
}
 8007316:	bf00      	nop
 8007318:	3724      	adds	r7, #36	@ 0x24
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	fffff8f8 	.word	0xfffff8f8
 8007328:	fffff800 	.word	0xfffff800

0800732c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800732c:	b480      	push	{r7}
 800732e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007330:	4b05      	ldr	r3, [pc, #20]	@ (8007348 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a04      	ldr	r2, [pc, #16]	@ (8007348 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007336:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800733a:	6013      	str	r3, [r2, #0]
}
 800733c:	bf00      	nop
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	40007000 	.word	0x40007000

0800734c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007352:	2300      	movs	r3, #0
 8007354:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007356:	4b23      	ldr	r3, [pc, #140]	@ (80073e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800735a:	4a22      	ldr	r2, [pc, #136]	@ (80073e4 <HAL_PWREx_EnableOverDrive+0x98>)
 800735c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007360:	6413      	str	r3, [r2, #64]	@ 0x40
 8007362:	4b20      	ldr	r3, [pc, #128]	@ (80073e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800736a:	603b      	str	r3, [r7, #0]
 800736c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800736e:	4b1e      	ldr	r3, [pc, #120]	@ (80073e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a1d      	ldr	r2, [pc, #116]	@ (80073e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007378:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800737a:	f7fb fd95 	bl	8002ea8 <HAL_GetTick>
 800737e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007380:	e009      	b.n	8007396 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007382:	f7fb fd91 	bl	8002ea8 <HAL_GetTick>
 8007386:	4602      	mov	r2, r0
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007390:	d901      	bls.n	8007396 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e022      	b.n	80073dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007396:	4b14      	ldr	r3, [pc, #80]	@ (80073e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800739e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073a2:	d1ee      	bne.n	8007382 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80073a4:	4b10      	ldr	r3, [pc, #64]	@ (80073e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a0f      	ldr	r2, [pc, #60]	@ (80073e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80073aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80073b0:	f7fb fd7a 	bl	8002ea8 <HAL_GetTick>
 80073b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80073b6:	e009      	b.n	80073cc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80073b8:	f7fb fd76 	bl	8002ea8 <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80073c6:	d901      	bls.n	80073cc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	e007      	b.n	80073dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80073cc:	4b06      	ldr	r3, [pc, #24]	@ (80073e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073d8:	d1ee      	bne.n	80073b8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	40023800 	.word	0x40023800
 80073e8:	40007000 	.word	0x40007000

080073ec <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af02      	add	r7, sp, #8
 80073f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80073f4:	f7fb fd58 	bl	8002ea8 <HAL_GetTick>
 80073f8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d101      	bne.n	8007404 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e067      	b.n	80074d4 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800740a:	b2db      	uxtb	r3, r3
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10b      	bne.n	8007428 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f7fa fec3 	bl	80021a4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800741e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f85e 	bl	80074e4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	3b01      	subs	r3, #1
 8007438:	021a      	lsls	r2, r3, #8
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	430a      	orrs	r2, r1
 8007440:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007446:	9300      	str	r3, [sp, #0]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	2120      	movs	r1, #32
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f856 	bl	8007500 <QSPI_WaitFlagStateUntilTimeout>
 8007454:	4603      	mov	r3, r0
 8007456:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007458:	7afb      	ldrb	r3, [r7, #11]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d135      	bne.n	80074ca <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	4b1d      	ldr	r3, [pc, #116]	@ (80074dc <HAL_QSPI_Init+0xf0>)
 8007466:	4013      	ands	r3, r2
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	6852      	ldr	r2, [r2, #4]
 800746c:	0611      	lsls	r1, r2, #24
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	68d2      	ldr	r2, [r2, #12]
 8007472:	4311      	orrs	r1, r2
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	69d2      	ldr	r2, [r2, #28]
 8007478:	4311      	orrs	r1, r2
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	6a12      	ldr	r2, [r2, #32]
 800747e:	4311      	orrs	r1, r2
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	6812      	ldr	r2, [r2, #0]
 8007484:	430b      	orrs	r3, r1
 8007486:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	4b14      	ldr	r3, [pc, #80]	@ (80074e0 <HAL_QSPI_Init+0xf4>)
 8007490:	4013      	ands	r3, r2
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	6912      	ldr	r2, [r2, #16]
 8007496:	0411      	lsls	r1, r2, #16
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	6952      	ldr	r2, [r2, #20]
 800749c:	4311      	orrs	r1, r2
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	6992      	ldr	r2, [r2, #24]
 80074a2:	4311      	orrs	r1, r2
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	6812      	ldr	r2, [r2, #0]
 80074a8:	430b      	orrs	r3, r1
 80074aa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f042 0201 	orr.w	r2, r2, #1
 80074ba:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 80074d2:	7afb      	ldrb	r3, [r7, #11]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	00ffff2f 	.word	0x00ffff2f
 80074e0:	ffe0f8fe 	.word	0xffe0f8fe

080074e4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	603b      	str	r3, [r7, #0]
 800750c:	4613      	mov	r3, r2
 800750e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007510:	e01a      	b.n	8007548 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007518:	d016      	beq.n	8007548 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800751a:	f7fb fcc5 	bl	8002ea8 <HAL_GetTick>
 800751e:	4602      	mov	r2, r0
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	429a      	cmp	r2, r3
 8007528:	d302      	bcc.n	8007530 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d10b      	bne.n	8007548 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2204      	movs	r2, #4
 8007534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800753c:	f043 0201 	orr.w	r2, r3, #1
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e00e      	b.n	8007566 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	689a      	ldr	r2, [r3, #8]
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	4013      	ands	r3, r2
 8007552:	2b00      	cmp	r3, #0
 8007554:	bf14      	ite	ne
 8007556:	2301      	movne	r3, #1
 8007558:	2300      	moveq	r3, #0
 800755a:	b2db      	uxtb	r3, r3
 800755c:	461a      	mov	r2, r3
 800755e:	79fb      	ldrb	r3, [r7, #7]
 8007560:	429a      	cmp	r2, r3
 8007562:	d1d6      	bne.n	8007512 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
	...

08007570 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007578:	2300      	movs	r3, #0
 800757a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d101      	bne.n	8007586 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e291      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0301 	and.w	r3, r3, #1
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 8087 	beq.w	80076a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007594:	4b96      	ldr	r3, [pc, #600]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f003 030c 	and.w	r3, r3, #12
 800759c:	2b04      	cmp	r3, #4
 800759e:	d00c      	beq.n	80075ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075a0:	4b93      	ldr	r3, [pc, #588]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f003 030c 	and.w	r3, r3, #12
 80075a8:	2b08      	cmp	r3, #8
 80075aa:	d112      	bne.n	80075d2 <HAL_RCC_OscConfig+0x62>
 80075ac:	4b90      	ldr	r3, [pc, #576]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075b8:	d10b      	bne.n	80075d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075ba:	4b8d      	ldr	r3, [pc, #564]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d06c      	beq.n	80076a0 <HAL_RCC_OscConfig+0x130>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d168      	bne.n	80076a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e26b      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075da:	d106      	bne.n	80075ea <HAL_RCC_OscConfig+0x7a>
 80075dc:	4b84      	ldr	r3, [pc, #528]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a83      	ldr	r2, [pc, #524]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80075e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075e6:	6013      	str	r3, [r2, #0]
 80075e8:	e02e      	b.n	8007648 <HAL_RCC_OscConfig+0xd8>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10c      	bne.n	800760c <HAL_RCC_OscConfig+0x9c>
 80075f2:	4b7f      	ldr	r3, [pc, #508]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a7e      	ldr	r2, [pc, #504]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80075f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075fc:	6013      	str	r3, [r2, #0]
 80075fe:	4b7c      	ldr	r3, [pc, #496]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a7b      	ldr	r2, [pc, #492]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007604:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007608:	6013      	str	r3, [r2, #0]
 800760a:	e01d      	b.n	8007648 <HAL_RCC_OscConfig+0xd8>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007614:	d10c      	bne.n	8007630 <HAL_RCC_OscConfig+0xc0>
 8007616:	4b76      	ldr	r3, [pc, #472]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a75      	ldr	r2, [pc, #468]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 800761c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007620:	6013      	str	r3, [r2, #0]
 8007622:	4b73      	ldr	r3, [pc, #460]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a72      	ldr	r2, [pc, #456]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800762c:	6013      	str	r3, [r2, #0]
 800762e:	e00b      	b.n	8007648 <HAL_RCC_OscConfig+0xd8>
 8007630:	4b6f      	ldr	r3, [pc, #444]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a6e      	ldr	r2, [pc, #440]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800763a:	6013      	str	r3, [r2, #0]
 800763c:	4b6c      	ldr	r3, [pc, #432]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a6b      	ldr	r2, [pc, #428]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007642:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d013      	beq.n	8007678 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007650:	f7fb fc2a 	bl	8002ea8 <HAL_GetTick>
 8007654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007656:	e008      	b.n	800766a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007658:	f7fb fc26 	bl	8002ea8 <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	2b64      	cmp	r3, #100	@ 0x64
 8007664:	d901      	bls.n	800766a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e21f      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800766a:	4b61      	ldr	r3, [pc, #388]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d0f0      	beq.n	8007658 <HAL_RCC_OscConfig+0xe8>
 8007676:	e014      	b.n	80076a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007678:	f7fb fc16 	bl	8002ea8 <HAL_GetTick>
 800767c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800767e:	e008      	b.n	8007692 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007680:	f7fb fc12 	bl	8002ea8 <HAL_GetTick>
 8007684:	4602      	mov	r2, r0
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	2b64      	cmp	r3, #100	@ 0x64
 800768c:	d901      	bls.n	8007692 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e20b      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007692:	4b57      	ldr	r3, [pc, #348]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1f0      	bne.n	8007680 <HAL_RCC_OscConfig+0x110>
 800769e:	e000      	b.n	80076a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d069      	beq.n	8007782 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80076ae:	4b50      	ldr	r3, [pc, #320]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f003 030c 	and.w	r3, r3, #12
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00b      	beq.n	80076d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076ba:	4b4d      	ldr	r3, [pc, #308]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	f003 030c 	and.w	r3, r3, #12
 80076c2:	2b08      	cmp	r3, #8
 80076c4:	d11c      	bne.n	8007700 <HAL_RCC_OscConfig+0x190>
 80076c6:	4b4a      	ldr	r3, [pc, #296]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d116      	bne.n	8007700 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076d2:	4b47      	ldr	r3, [pc, #284]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0302 	and.w	r3, r3, #2
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d005      	beq.n	80076ea <HAL_RCC_OscConfig+0x17a>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d001      	beq.n	80076ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e1df      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076ea:	4b41      	ldr	r3, [pc, #260]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	00db      	lsls	r3, r3, #3
 80076f8:	493d      	ldr	r1, [pc, #244]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076fe:	e040      	b.n	8007782 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d023      	beq.n	8007750 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007708:	4b39      	ldr	r3, [pc, #228]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a38      	ldr	r2, [pc, #224]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 800770e:	f043 0301 	orr.w	r3, r3, #1
 8007712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007714:	f7fb fbc8 	bl	8002ea8 <HAL_GetTick>
 8007718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800771a:	e008      	b.n	800772e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800771c:	f7fb fbc4 	bl	8002ea8 <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	2b02      	cmp	r3, #2
 8007728:	d901      	bls.n	800772e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e1bd      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800772e:	4b30      	ldr	r3, [pc, #192]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b00      	cmp	r3, #0
 8007738:	d0f0      	beq.n	800771c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800773a:	4b2d      	ldr	r3, [pc, #180]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	00db      	lsls	r3, r3, #3
 8007748:	4929      	ldr	r1, [pc, #164]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 800774a:	4313      	orrs	r3, r2
 800774c:	600b      	str	r3, [r1, #0]
 800774e:	e018      	b.n	8007782 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007750:	4b27      	ldr	r3, [pc, #156]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a26      	ldr	r2, [pc, #152]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007756:	f023 0301 	bic.w	r3, r3, #1
 800775a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800775c:	f7fb fba4 	bl	8002ea8 <HAL_GetTick>
 8007760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007762:	e008      	b.n	8007776 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007764:	f7fb fba0 	bl	8002ea8 <HAL_GetTick>
 8007768:	4602      	mov	r2, r0
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	2b02      	cmp	r3, #2
 8007770:	d901      	bls.n	8007776 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e199      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007776:	4b1e      	ldr	r3, [pc, #120]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 0302 	and.w	r3, r3, #2
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1f0      	bne.n	8007764 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0308 	and.w	r3, r3, #8
 800778a:	2b00      	cmp	r3, #0
 800778c:	d038      	beq.n	8007800 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d019      	beq.n	80077ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007796:	4b16      	ldr	r3, [pc, #88]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 8007798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800779a:	4a15      	ldr	r2, [pc, #84]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 800779c:	f043 0301 	orr.w	r3, r3, #1
 80077a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077a2:	f7fb fb81 	bl	8002ea8 <HAL_GetTick>
 80077a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077a8:	e008      	b.n	80077bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077aa:	f7fb fb7d 	bl	8002ea8 <HAL_GetTick>
 80077ae:	4602      	mov	r2, r0
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d901      	bls.n	80077bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80077b8:	2303      	movs	r3, #3
 80077ba:	e176      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077bc:	4b0c      	ldr	r3, [pc, #48]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80077be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077c0:	f003 0302 	and.w	r3, r3, #2
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d0f0      	beq.n	80077aa <HAL_RCC_OscConfig+0x23a>
 80077c8:	e01a      	b.n	8007800 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077ca:	4b09      	ldr	r3, [pc, #36]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80077cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077ce:	4a08      	ldr	r2, [pc, #32]	@ (80077f0 <HAL_RCC_OscConfig+0x280>)
 80077d0:	f023 0301 	bic.w	r3, r3, #1
 80077d4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077d6:	f7fb fb67 	bl	8002ea8 <HAL_GetTick>
 80077da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077dc:	e00a      	b.n	80077f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077de:	f7fb fb63 	bl	8002ea8 <HAL_GetTick>
 80077e2:	4602      	mov	r2, r0
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d903      	bls.n	80077f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e15c      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
 80077f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077f4:	4b91      	ldr	r3, [pc, #580]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80077f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077f8:	f003 0302 	and.w	r3, r3, #2
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1ee      	bne.n	80077de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0304 	and.w	r3, r3, #4
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 80a4 	beq.w	8007956 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800780e:	4b8b      	ldr	r3, [pc, #556]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 8007810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10d      	bne.n	8007836 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800781a:	4b88      	ldr	r3, [pc, #544]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 800781c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800781e:	4a87      	ldr	r2, [pc, #540]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 8007820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007824:	6413      	str	r3, [r2, #64]	@ 0x40
 8007826:	4b85      	ldr	r3, [pc, #532]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 8007828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800782a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800782e:	60bb      	str	r3, [r7, #8]
 8007830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007832:	2301      	movs	r3, #1
 8007834:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007836:	4b82      	ldr	r3, [pc, #520]	@ (8007a40 <HAL_RCC_OscConfig+0x4d0>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800783e:	2b00      	cmp	r3, #0
 8007840:	d118      	bne.n	8007874 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007842:	4b7f      	ldr	r3, [pc, #508]	@ (8007a40 <HAL_RCC_OscConfig+0x4d0>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a7e      	ldr	r2, [pc, #504]	@ (8007a40 <HAL_RCC_OscConfig+0x4d0>)
 8007848:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800784c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800784e:	f7fb fb2b 	bl	8002ea8 <HAL_GetTick>
 8007852:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007854:	e008      	b.n	8007868 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007856:	f7fb fb27 	bl	8002ea8 <HAL_GetTick>
 800785a:	4602      	mov	r2, r0
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	2b64      	cmp	r3, #100	@ 0x64
 8007862:	d901      	bls.n	8007868 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007864:	2303      	movs	r3, #3
 8007866:	e120      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007868:	4b75      	ldr	r3, [pc, #468]	@ (8007a40 <HAL_RCC_OscConfig+0x4d0>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007870:	2b00      	cmp	r3, #0
 8007872:	d0f0      	beq.n	8007856 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d106      	bne.n	800788a <HAL_RCC_OscConfig+0x31a>
 800787c:	4b6f      	ldr	r3, [pc, #444]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 800787e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007880:	4a6e      	ldr	r2, [pc, #440]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 8007882:	f043 0301 	orr.w	r3, r3, #1
 8007886:	6713      	str	r3, [r2, #112]	@ 0x70
 8007888:	e02d      	b.n	80078e6 <HAL_RCC_OscConfig+0x376>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10c      	bne.n	80078ac <HAL_RCC_OscConfig+0x33c>
 8007892:	4b6a      	ldr	r3, [pc, #424]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 8007894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007896:	4a69      	ldr	r2, [pc, #420]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 8007898:	f023 0301 	bic.w	r3, r3, #1
 800789c:	6713      	str	r3, [r2, #112]	@ 0x70
 800789e:	4b67      	ldr	r3, [pc, #412]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80078a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078a2:	4a66      	ldr	r2, [pc, #408]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80078a4:	f023 0304 	bic.w	r3, r3, #4
 80078a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80078aa:	e01c      	b.n	80078e6 <HAL_RCC_OscConfig+0x376>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	2b05      	cmp	r3, #5
 80078b2:	d10c      	bne.n	80078ce <HAL_RCC_OscConfig+0x35e>
 80078b4:	4b61      	ldr	r3, [pc, #388]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80078b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078b8:	4a60      	ldr	r2, [pc, #384]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80078ba:	f043 0304 	orr.w	r3, r3, #4
 80078be:	6713      	str	r3, [r2, #112]	@ 0x70
 80078c0:	4b5e      	ldr	r3, [pc, #376]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80078c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078c4:	4a5d      	ldr	r2, [pc, #372]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80078c6:	f043 0301 	orr.w	r3, r3, #1
 80078ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80078cc:	e00b      	b.n	80078e6 <HAL_RCC_OscConfig+0x376>
 80078ce:	4b5b      	ldr	r3, [pc, #364]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80078d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078d2:	4a5a      	ldr	r2, [pc, #360]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80078d4:	f023 0301 	bic.w	r3, r3, #1
 80078d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80078da:	4b58      	ldr	r3, [pc, #352]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80078dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078de:	4a57      	ldr	r2, [pc, #348]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80078e0:	f023 0304 	bic.w	r3, r3, #4
 80078e4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d015      	beq.n	800791a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078ee:	f7fb fadb 	bl	8002ea8 <HAL_GetTick>
 80078f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078f4:	e00a      	b.n	800790c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078f6:	f7fb fad7 	bl	8002ea8 <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007904:	4293      	cmp	r3, r2
 8007906:	d901      	bls.n	800790c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007908:	2303      	movs	r3, #3
 800790a:	e0ce      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800790c:	4b4b      	ldr	r3, [pc, #300]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 800790e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007910:	f003 0302 	and.w	r3, r3, #2
 8007914:	2b00      	cmp	r3, #0
 8007916:	d0ee      	beq.n	80078f6 <HAL_RCC_OscConfig+0x386>
 8007918:	e014      	b.n	8007944 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800791a:	f7fb fac5 	bl	8002ea8 <HAL_GetTick>
 800791e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007920:	e00a      	b.n	8007938 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007922:	f7fb fac1 	bl	8002ea8 <HAL_GetTick>
 8007926:	4602      	mov	r2, r0
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	1ad3      	subs	r3, r2, r3
 800792c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007930:	4293      	cmp	r3, r2
 8007932:	d901      	bls.n	8007938 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	e0b8      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007938:	4b40      	ldr	r3, [pc, #256]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 800793a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800793c:	f003 0302 	and.w	r3, r3, #2
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1ee      	bne.n	8007922 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007944:	7dfb      	ldrb	r3, [r7, #23]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d105      	bne.n	8007956 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800794a:	4b3c      	ldr	r3, [pc, #240]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 800794c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800794e:	4a3b      	ldr	r2, [pc, #236]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 8007950:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007954:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	699b      	ldr	r3, [r3, #24]
 800795a:	2b00      	cmp	r3, #0
 800795c:	f000 80a4 	beq.w	8007aa8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007960:	4b36      	ldr	r3, [pc, #216]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	f003 030c 	and.w	r3, r3, #12
 8007968:	2b08      	cmp	r3, #8
 800796a:	d06b      	beq.n	8007a44 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	2b02      	cmp	r3, #2
 8007972:	d149      	bne.n	8007a08 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007974:	4b31      	ldr	r3, [pc, #196]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a30      	ldr	r2, [pc, #192]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 800797a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800797e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007980:	f7fb fa92 	bl	8002ea8 <HAL_GetTick>
 8007984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007986:	e008      	b.n	800799a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007988:	f7fb fa8e 	bl	8002ea8 <HAL_GetTick>
 800798c:	4602      	mov	r2, r0
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	2b02      	cmp	r3, #2
 8007994:	d901      	bls.n	800799a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007996:	2303      	movs	r3, #3
 8007998:	e087      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800799a:	4b28      	ldr	r3, [pc, #160]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1f0      	bne.n	8007988 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	69da      	ldr	r2, [r3, #28]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	431a      	orrs	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b4:	019b      	lsls	r3, r3, #6
 80079b6:	431a      	orrs	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079bc:	085b      	lsrs	r3, r3, #1
 80079be:	3b01      	subs	r3, #1
 80079c0:	041b      	lsls	r3, r3, #16
 80079c2:	431a      	orrs	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c8:	061b      	lsls	r3, r3, #24
 80079ca:	4313      	orrs	r3, r2
 80079cc:	4a1b      	ldr	r2, [pc, #108]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80079ce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80079d2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079d4:	4b19      	ldr	r3, [pc, #100]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a18      	ldr	r2, [pc, #96]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80079da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80079de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079e0:	f7fb fa62 	bl	8002ea8 <HAL_GetTick>
 80079e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079e6:	e008      	b.n	80079fa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079e8:	f7fb fa5e 	bl	8002ea8 <HAL_GetTick>
 80079ec:	4602      	mov	r2, r0
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d901      	bls.n	80079fa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80079f6:	2303      	movs	r3, #3
 80079f8:	e057      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079fa:	4b10      	ldr	r3, [pc, #64]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d0f0      	beq.n	80079e8 <HAL_RCC_OscConfig+0x478>
 8007a06:	e04f      	b.n	8007aa8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a08:	4b0c      	ldr	r3, [pc, #48]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a0b      	ldr	r2, [pc, #44]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 8007a0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a14:	f7fb fa48 	bl	8002ea8 <HAL_GetTick>
 8007a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a1a:	e008      	b.n	8007a2e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a1c:	f7fb fa44 	bl	8002ea8 <HAL_GetTick>
 8007a20:	4602      	mov	r2, r0
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d901      	bls.n	8007a2e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e03d      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a2e:	4b03      	ldr	r3, [pc, #12]	@ (8007a3c <HAL_RCC_OscConfig+0x4cc>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1f0      	bne.n	8007a1c <HAL_RCC_OscConfig+0x4ac>
 8007a3a:	e035      	b.n	8007aa8 <HAL_RCC_OscConfig+0x538>
 8007a3c:	40023800 	.word	0x40023800
 8007a40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007a44:	4b1b      	ldr	r3, [pc, #108]	@ (8007ab4 <HAL_RCC_OscConfig+0x544>)
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d028      	beq.n	8007aa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d121      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d11a      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007a74:	4013      	ands	r3, r2
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007a7a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d111      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a8a:	085b      	lsrs	r3, r3, #1
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d107      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a9e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d001      	beq.n	8007aa8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e000      	b.n	8007aaa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3718      	adds	r7, #24
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	40023800 	.word	0x40023800

08007ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d101      	bne.n	8007ad0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e0d0      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ad0:	4b6a      	ldr	r3, [pc, #424]	@ (8007c7c <HAL_RCC_ClockConfig+0x1c4>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 030f 	and.w	r3, r3, #15
 8007ad8:	683a      	ldr	r2, [r7, #0]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d910      	bls.n	8007b00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ade:	4b67      	ldr	r3, [pc, #412]	@ (8007c7c <HAL_RCC_ClockConfig+0x1c4>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f023 020f 	bic.w	r2, r3, #15
 8007ae6:	4965      	ldr	r1, [pc, #404]	@ (8007c7c <HAL_RCC_ClockConfig+0x1c4>)
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aee:	4b63      	ldr	r3, [pc, #396]	@ (8007c7c <HAL_RCC_ClockConfig+0x1c4>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 030f 	and.w	r3, r3, #15
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d001      	beq.n	8007b00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e0b8      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 0302 	and.w	r3, r3, #2
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d020      	beq.n	8007b4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0304 	and.w	r3, r3, #4
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d005      	beq.n	8007b24 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b18:	4b59      	ldr	r3, [pc, #356]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	4a58      	ldr	r2, [pc, #352]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007b1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007b22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0308 	and.w	r3, r3, #8
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d005      	beq.n	8007b3c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b30:	4b53      	ldr	r3, [pc, #332]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	4a52      	ldr	r2, [pc, #328]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007b36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007b3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b3c:	4b50      	ldr	r3, [pc, #320]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	494d      	ldr	r1, [pc, #308]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d040      	beq.n	8007bdc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d107      	bne.n	8007b72 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b62:	4b47      	ldr	r3, [pc, #284]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d115      	bne.n	8007b9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e07f      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d107      	bne.n	8007b8a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b7a:	4b41      	ldr	r3, [pc, #260]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d109      	bne.n	8007b9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e073      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b8a:	4b3d      	ldr	r3, [pc, #244]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0302 	and.w	r3, r3, #2
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d101      	bne.n	8007b9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e06b      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b9a:	4b39      	ldr	r3, [pc, #228]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f023 0203 	bic.w	r2, r3, #3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	4936      	ldr	r1, [pc, #216]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bac:	f7fb f97c 	bl	8002ea8 <HAL_GetTick>
 8007bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bb2:	e00a      	b.n	8007bca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bb4:	f7fb f978 	bl	8002ea8 <HAL_GetTick>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d901      	bls.n	8007bca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e053      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bca:	4b2d      	ldr	r3, [pc, #180]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f003 020c 	and.w	r2, r3, #12
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d1eb      	bne.n	8007bb4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007bdc:	4b27      	ldr	r3, [pc, #156]	@ (8007c7c <HAL_RCC_ClockConfig+0x1c4>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 030f 	and.w	r3, r3, #15
 8007be4:	683a      	ldr	r2, [r7, #0]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d210      	bcs.n	8007c0c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bea:	4b24      	ldr	r3, [pc, #144]	@ (8007c7c <HAL_RCC_ClockConfig+0x1c4>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f023 020f 	bic.w	r2, r3, #15
 8007bf2:	4922      	ldr	r1, [pc, #136]	@ (8007c7c <HAL_RCC_ClockConfig+0x1c4>)
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bfa:	4b20      	ldr	r3, [pc, #128]	@ (8007c7c <HAL_RCC_ClockConfig+0x1c4>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 030f 	and.w	r3, r3, #15
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d001      	beq.n	8007c0c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e032      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0304 	and.w	r3, r3, #4
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d008      	beq.n	8007c2a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c18:	4b19      	ldr	r3, [pc, #100]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	4916      	ldr	r1, [pc, #88]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 0308 	and.w	r3, r3, #8
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d009      	beq.n	8007c4a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007c36:	4b12      	ldr	r3, [pc, #72]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	00db      	lsls	r3, r3, #3
 8007c44:	490e      	ldr	r1, [pc, #56]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007c46:	4313      	orrs	r3, r2
 8007c48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007c4a:	f000 f821 	bl	8007c90 <HAL_RCC_GetSysClockFreq>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	4b0b      	ldr	r3, [pc, #44]	@ (8007c80 <HAL_RCC_ClockConfig+0x1c8>)
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	091b      	lsrs	r3, r3, #4
 8007c56:	f003 030f 	and.w	r3, r3, #15
 8007c5a:	490a      	ldr	r1, [pc, #40]	@ (8007c84 <HAL_RCC_ClockConfig+0x1cc>)
 8007c5c:	5ccb      	ldrb	r3, [r1, r3]
 8007c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c62:	4a09      	ldr	r2, [pc, #36]	@ (8007c88 <HAL_RCC_ClockConfig+0x1d0>)
 8007c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007c66:	4b09      	ldr	r3, [pc, #36]	@ (8007c8c <HAL_RCC_ClockConfig+0x1d4>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fa ffa8 	bl	8002bc0 <HAL_InitTick>

  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	40023c00 	.word	0x40023c00
 8007c80:	40023800 	.word	0x40023800
 8007c84:	08013b6c 	.word	0x08013b6c
 8007c88:	20000000 	.word	0x20000000
 8007c8c:	20000004 	.word	0x20000004

08007c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c94:	b090      	sub	sp, #64	@ 0x40
 8007c96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ca8:	4b59      	ldr	r3, [pc, #356]	@ (8007e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	f003 030c 	and.w	r3, r3, #12
 8007cb0:	2b08      	cmp	r3, #8
 8007cb2:	d00d      	beq.n	8007cd0 <HAL_RCC_GetSysClockFreq+0x40>
 8007cb4:	2b08      	cmp	r3, #8
 8007cb6:	f200 80a1 	bhi.w	8007dfc <HAL_RCC_GetSysClockFreq+0x16c>
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d002      	beq.n	8007cc4 <HAL_RCC_GetSysClockFreq+0x34>
 8007cbe:	2b04      	cmp	r3, #4
 8007cc0:	d003      	beq.n	8007cca <HAL_RCC_GetSysClockFreq+0x3a>
 8007cc2:	e09b      	b.n	8007dfc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007cc4:	4b53      	ldr	r3, [pc, #332]	@ (8007e14 <HAL_RCC_GetSysClockFreq+0x184>)
 8007cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007cc8:	e09b      	b.n	8007e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007cca:	4b53      	ldr	r3, [pc, #332]	@ (8007e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8007ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007cce:	e098      	b.n	8007e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007cd0:	4b4f      	ldr	r3, [pc, #316]	@ (8007e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cd8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007cda:	4b4d      	ldr	r3, [pc, #308]	@ (8007e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d028      	beq.n	8007d38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ce6:	4b4a      	ldr	r3, [pc, #296]	@ (8007e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	099b      	lsrs	r3, r3, #6
 8007cec:	2200      	movs	r2, #0
 8007cee:	623b      	str	r3, [r7, #32]
 8007cf0:	627a      	str	r2, [r7, #36]	@ 0x24
 8007cf2:	6a3b      	ldr	r3, [r7, #32]
 8007cf4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	4b47      	ldr	r3, [pc, #284]	@ (8007e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8007cfc:	fb03 f201 	mul.w	r2, r3, r1
 8007d00:	2300      	movs	r3, #0
 8007d02:	fb00 f303 	mul.w	r3, r0, r3
 8007d06:	4413      	add	r3, r2
 8007d08:	4a43      	ldr	r2, [pc, #268]	@ (8007e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8007d0a:	fba0 1202 	umull	r1, r2, r0, r2
 8007d0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d10:	460a      	mov	r2, r1
 8007d12:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007d14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d16:	4413      	add	r3, r2
 8007d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	61bb      	str	r3, [r7, #24]
 8007d20:	61fa      	str	r2, [r7, #28]
 8007d22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007d2a:	f7f8 fa71 	bl	8000210 <__aeabi_uldivmod>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	4613      	mov	r3, r2
 8007d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d36:	e053      	b.n	8007de0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d38:	4b35      	ldr	r3, [pc, #212]	@ (8007e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	099b      	lsrs	r3, r3, #6
 8007d3e:	2200      	movs	r2, #0
 8007d40:	613b      	str	r3, [r7, #16]
 8007d42:	617a      	str	r2, [r7, #20]
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007d4a:	f04f 0b00 	mov.w	fp, #0
 8007d4e:	4652      	mov	r2, sl
 8007d50:	465b      	mov	r3, fp
 8007d52:	f04f 0000 	mov.w	r0, #0
 8007d56:	f04f 0100 	mov.w	r1, #0
 8007d5a:	0159      	lsls	r1, r3, #5
 8007d5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d60:	0150      	lsls	r0, r2, #5
 8007d62:	4602      	mov	r2, r0
 8007d64:	460b      	mov	r3, r1
 8007d66:	ebb2 080a 	subs.w	r8, r2, sl
 8007d6a:	eb63 090b 	sbc.w	r9, r3, fp
 8007d6e:	f04f 0200 	mov.w	r2, #0
 8007d72:	f04f 0300 	mov.w	r3, #0
 8007d76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007d7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007d7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007d82:	ebb2 0408 	subs.w	r4, r2, r8
 8007d86:	eb63 0509 	sbc.w	r5, r3, r9
 8007d8a:	f04f 0200 	mov.w	r2, #0
 8007d8e:	f04f 0300 	mov.w	r3, #0
 8007d92:	00eb      	lsls	r3, r5, #3
 8007d94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d98:	00e2      	lsls	r2, r4, #3
 8007d9a:	4614      	mov	r4, r2
 8007d9c:	461d      	mov	r5, r3
 8007d9e:	eb14 030a 	adds.w	r3, r4, sl
 8007da2:	603b      	str	r3, [r7, #0]
 8007da4:	eb45 030b 	adc.w	r3, r5, fp
 8007da8:	607b      	str	r3, [r7, #4]
 8007daa:	f04f 0200 	mov.w	r2, #0
 8007dae:	f04f 0300 	mov.w	r3, #0
 8007db2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007db6:	4629      	mov	r1, r5
 8007db8:	028b      	lsls	r3, r1, #10
 8007dba:	4621      	mov	r1, r4
 8007dbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007dc0:	4621      	mov	r1, r4
 8007dc2:	028a      	lsls	r2, r1, #10
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dca:	2200      	movs	r2, #0
 8007dcc:	60bb      	str	r3, [r7, #8]
 8007dce:	60fa      	str	r2, [r7, #12]
 8007dd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007dd4:	f7f8 fa1c 	bl	8000210 <__aeabi_uldivmod>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	4613      	mov	r3, r2
 8007dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007de0:	4b0b      	ldr	r3, [pc, #44]	@ (8007e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	0c1b      	lsrs	r3, r3, #16
 8007de6:	f003 0303 	and.w	r3, r3, #3
 8007dea:	3301      	adds	r3, #1
 8007dec:	005b      	lsls	r3, r3, #1
 8007dee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007df0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007dfa:	e002      	b.n	8007e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007dfc:	4b05      	ldr	r3, [pc, #20]	@ (8007e14 <HAL_RCC_GetSysClockFreq+0x184>)
 8007dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3740      	adds	r7, #64	@ 0x40
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e0e:	bf00      	nop
 8007e10:	40023800 	.word	0x40023800
 8007e14:	00f42400 	.word	0x00f42400
 8007e18:	017d7840 	.word	0x017d7840

08007e1c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e20:	4b03      	ldr	r3, [pc, #12]	@ (8007e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e22:	681b      	ldr	r3, [r3, #0]
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	20000000 	.word	0x20000000

08007e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007e38:	f7ff fff0 	bl	8007e1c <HAL_RCC_GetHCLKFreq>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	4b05      	ldr	r3, [pc, #20]	@ (8007e54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	0a9b      	lsrs	r3, r3, #10
 8007e44:	f003 0307 	and.w	r3, r3, #7
 8007e48:	4903      	ldr	r1, [pc, #12]	@ (8007e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e4a:	5ccb      	ldrb	r3, [r1, r3]
 8007e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	40023800 	.word	0x40023800
 8007e58:	08013b7c 	.word	0x08013b7c

08007e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007e60:	f7ff ffdc 	bl	8007e1c <HAL_RCC_GetHCLKFreq>
 8007e64:	4602      	mov	r2, r0
 8007e66:	4b05      	ldr	r3, [pc, #20]	@ (8007e7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	0b5b      	lsrs	r3, r3, #13
 8007e6c:	f003 0307 	and.w	r3, r3, #7
 8007e70:	4903      	ldr	r1, [pc, #12]	@ (8007e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e72:	5ccb      	ldrb	r3, [r1, r3]
 8007e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	40023800 	.word	0x40023800
 8007e80:	08013b7c 	.word	0x08013b7c

08007e84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	220f      	movs	r2, #15
 8007e92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007e94:	4b12      	ldr	r3, [pc, #72]	@ (8007ee0 <HAL_RCC_GetClockConfig+0x5c>)
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	f003 0203 	and.w	r2, r3, #3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8007ee0 <HAL_RCC_GetClockConfig+0x5c>)
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007eac:	4b0c      	ldr	r3, [pc, #48]	@ (8007ee0 <HAL_RCC_GetClockConfig+0x5c>)
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007eb8:	4b09      	ldr	r3, [pc, #36]	@ (8007ee0 <HAL_RCC_GetClockConfig+0x5c>)
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	08db      	lsrs	r3, r3, #3
 8007ebe:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007ec6:	4b07      	ldr	r3, [pc, #28]	@ (8007ee4 <HAL_RCC_GetClockConfig+0x60>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 020f 	and.w	r2, r3, #15
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	601a      	str	r2, [r3, #0]
}
 8007ed2:	bf00      	nop
 8007ed4:	370c      	adds	r7, #12
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	40023800 	.word	0x40023800
 8007ee4:	40023c00 	.word	0x40023c00

08007ee8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b088      	sub	sp, #32
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007efc:	2300      	movs	r3, #0
 8007efe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007f00:	2300      	movs	r3, #0
 8007f02:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0301 	and.w	r3, r3, #1
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d012      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007f10:	4b69      	ldr	r3, [pc, #420]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	4a68      	ldr	r2, [pc, #416]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f16:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007f1a:	6093      	str	r3, [r2, #8]
 8007f1c:	4b66      	ldr	r3, [pc, #408]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f1e:	689a      	ldr	r2, [r3, #8]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f24:	4964      	ldr	r1, [pc, #400]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f26:	4313      	orrs	r3, r2
 8007f28:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007f32:	2301      	movs	r3, #1
 8007f34:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d017      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f42:	4b5d      	ldr	r3, [pc, #372]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f48:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f50:	4959      	ldr	r1, [pc, #356]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f52:	4313      	orrs	r3, r2
 8007f54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f60:	d101      	bne.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007f62:	2301      	movs	r3, #1
 8007f64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d101      	bne.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d017      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007f7e:	4b4e      	ldr	r3, [pc, #312]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f84:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f8c:	494a      	ldr	r1, [pc, #296]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f9c:	d101      	bne.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d101      	bne.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007faa:	2301      	movs	r3, #1
 8007fac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d001      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 0320 	and.w	r3, r3, #32
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f000 808b 	beq.w	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007fcc:	4b3a      	ldr	r3, [pc, #232]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd0:	4a39      	ldr	r2, [pc, #228]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8007fd8:	4b37      	ldr	r3, [pc, #220]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fe0:	60bb      	str	r3, [r7, #8]
 8007fe2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007fe4:	4b35      	ldr	r3, [pc, #212]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a34      	ldr	r2, [pc, #208]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007fea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ff0:	f7fa ff5a 	bl	8002ea8 <HAL_GetTick>
 8007ff4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007ff6:	e008      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ff8:	f7fa ff56 	bl	8002ea8 <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	2b64      	cmp	r3, #100	@ 0x64
 8008004:	d901      	bls.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e357      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800800a:	4b2c      	ldr	r3, [pc, #176]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008012:	2b00      	cmp	r3, #0
 8008014:	d0f0      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008016:	4b28      	ldr	r3, [pc, #160]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800801a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800801e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d035      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800802a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	429a      	cmp	r2, r3
 8008032:	d02e      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008034:	4b20      	ldr	r3, [pc, #128]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008038:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800803c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800803e:	4b1e      	ldr	r3, [pc, #120]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008042:	4a1d      	ldr	r2, [pc, #116]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008048:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800804a:	4b1b      	ldr	r3, [pc, #108]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800804c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800804e:	4a1a      	ldr	r2, [pc, #104]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008050:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008054:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008056:	4a18      	ldr	r2, [pc, #96]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800805c:	4b16      	ldr	r3, [pc, #88]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800805e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008060:	f003 0301 	and.w	r3, r3, #1
 8008064:	2b01      	cmp	r3, #1
 8008066:	d114      	bne.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008068:	f7fa ff1e 	bl	8002ea8 <HAL_GetTick>
 800806c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800806e:	e00a      	b.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008070:	f7fa ff1a 	bl	8002ea8 <HAL_GetTick>
 8008074:	4602      	mov	r2, r0
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800807e:	4293      	cmp	r3, r2
 8008080:	d901      	bls.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e319      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008086:	4b0c      	ldr	r3, [pc, #48]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800808a:	f003 0302 	and.w	r3, r3, #2
 800808e:	2b00      	cmp	r3, #0
 8008090:	d0ee      	beq.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008096:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800809a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800809e:	d111      	bne.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80080a0:	4b05      	ldr	r3, [pc, #20]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80080ac:	4b04      	ldr	r3, [pc, #16]	@ (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80080ae:	400b      	ands	r3, r1
 80080b0:	4901      	ldr	r1, [pc, #4]	@ (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080b2:	4313      	orrs	r3, r2
 80080b4:	608b      	str	r3, [r1, #8]
 80080b6:	e00b      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80080b8:	40023800 	.word	0x40023800
 80080bc:	40007000 	.word	0x40007000
 80080c0:	0ffffcff 	.word	0x0ffffcff
 80080c4:	4baa      	ldr	r3, [pc, #680]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	4aa9      	ldr	r2, [pc, #676]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080ca:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80080ce:	6093      	str	r3, [r2, #8]
 80080d0:	4ba7      	ldr	r3, [pc, #668]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080dc:	49a4      	ldr	r1, [pc, #656]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080de:	4313      	orrs	r3, r2
 80080e0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0310 	and.w	r3, r3, #16
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d010      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80080ee:	4ba0      	ldr	r3, [pc, #640]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080f4:	4a9e      	ldr	r2, [pc, #632]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80080fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80080fe:	4b9c      	ldr	r3, [pc, #624]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008100:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008108:	4999      	ldr	r1, [pc, #612]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800810a:	4313      	orrs	r3, r2
 800810c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00a      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800811c:	4b94      	ldr	r3, [pc, #592]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800811e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008122:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800812a:	4991      	ldr	r1, [pc, #580]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800812c:	4313      	orrs	r3, r2
 800812e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00a      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800813e:	4b8c      	ldr	r3, [pc, #560]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008144:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800814c:	4988      	ldr	r1, [pc, #544]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800814e:	4313      	orrs	r3, r2
 8008150:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00a      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008160:	4b83      	ldr	r3, [pc, #524]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008166:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800816e:	4980      	ldr	r1, [pc, #512]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008170:	4313      	orrs	r3, r2
 8008172:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00a      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008182:	4b7b      	ldr	r3, [pc, #492]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008188:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008190:	4977      	ldr	r1, [pc, #476]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008192:	4313      	orrs	r3, r2
 8008194:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00a      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80081a4:	4b72      	ldr	r3, [pc, #456]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081aa:	f023 0203 	bic.w	r2, r3, #3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081b2:	496f      	ldr	r1, [pc, #444]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081b4:	4313      	orrs	r3, r2
 80081b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00a      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80081c6:	4b6a      	ldr	r3, [pc, #424]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081cc:	f023 020c 	bic.w	r2, r3, #12
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081d4:	4966      	ldr	r1, [pc, #408]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00a      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80081e8:	4b61      	ldr	r3, [pc, #388]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081ee:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081f6:	495e      	ldr	r1, [pc, #376]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00a      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800820a:	4b59      	ldr	r3, [pc, #356]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800820c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008210:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008218:	4955      	ldr	r1, [pc, #340]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800821a:	4313      	orrs	r3, r2
 800821c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00a      	beq.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800822c:	4b50      	ldr	r3, [pc, #320]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800822e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008232:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800823a:	494d      	ldr	r1, [pc, #308]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800823c:	4313      	orrs	r3, r2
 800823e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00a      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800824e:	4b48      	ldr	r3, [pc, #288]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008254:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800825c:	4944      	ldr	r1, [pc, #272]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800825e:	4313      	orrs	r3, r2
 8008260:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00a      	beq.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008270:	4b3f      	ldr	r3, [pc, #252]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008276:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800827e:	493c      	ldr	r1, [pc, #240]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008280:	4313      	orrs	r3, r2
 8008282:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00a      	beq.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008292:	4b37      	ldr	r3, [pc, #220]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008298:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082a0:	4933      	ldr	r1, [pc, #204]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082a2:	4313      	orrs	r3, r2
 80082a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00a      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80082b4:	4b2e      	ldr	r3, [pc, #184]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082ba:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082c2:	492b      	ldr	r1, [pc, #172]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082c4:	4313      	orrs	r3, r2
 80082c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d011      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80082d6:	4b26      	ldr	r3, [pc, #152]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082dc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082e4:	4922      	ldr	r1, [pc, #136]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082e6:	4313      	orrs	r3, r2
 80082e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082f4:	d101      	bne.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80082f6:	2301      	movs	r3, #1
 80082f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0308 	and.w	r3, r3, #8
 8008302:	2b00      	cmp	r3, #0
 8008304:	d001      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008306:	2301      	movs	r3, #1
 8008308:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00a      	beq.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008316:	4b16      	ldr	r3, [pc, #88]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800831c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008324:	4912      	ldr	r1, [pc, #72]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008326:	4313      	orrs	r3, r2
 8008328:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00b      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008338:	4b0d      	ldr	r3, [pc, #52]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800833a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800833e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008348:	4909      	ldr	r1, [pc, #36]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800834a:	4313      	orrs	r3, r2
 800834c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	2b01      	cmp	r3, #1
 8008354:	d006      	beq.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800835e:	2b00      	cmp	r3, #0
 8008360:	f000 80d9 	beq.w	8008516 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008364:	4b02      	ldr	r3, [pc, #8]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a01      	ldr	r2, [pc, #4]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800836a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800836e:	e001      	b.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008370:	40023800 	.word	0x40023800
 8008374:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008376:	f7fa fd97 	bl	8002ea8 <HAL_GetTick>
 800837a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800837c:	e008      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800837e:	f7fa fd93 	bl	8002ea8 <HAL_GetTick>
 8008382:	4602      	mov	r2, r0
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	2b64      	cmp	r3, #100	@ 0x64
 800838a:	d901      	bls.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	e194      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008390:	4b6c      	ldr	r3, [pc, #432]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1f0      	bne.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 0301 	and.w	r3, r3, #1
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d021      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x504>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d11d      	bne.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80083b0:	4b64      	ldr	r3, [pc, #400]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083b6:	0c1b      	lsrs	r3, r3, #16
 80083b8:	f003 0303 	and.w	r3, r3, #3
 80083bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80083be:	4b61      	ldr	r3, [pc, #388]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083c4:	0e1b      	lsrs	r3, r3, #24
 80083c6:	f003 030f 	and.w	r3, r3, #15
 80083ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	019a      	lsls	r2, r3, #6
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	041b      	lsls	r3, r3, #16
 80083d6:	431a      	orrs	r2, r3
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	061b      	lsls	r3, r3, #24
 80083dc:	431a      	orrs	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	071b      	lsls	r3, r3, #28
 80083e4:	4957      	ldr	r1, [pc, #348]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d004      	beq.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008400:	d00a      	beq.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800840a:	2b00      	cmp	r3, #0
 800840c:	d02e      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008412:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008416:	d129      	bne.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008418:	4b4a      	ldr	r3, [pc, #296]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800841a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800841e:	0c1b      	lsrs	r3, r3, #16
 8008420:	f003 0303 	and.w	r3, r3, #3
 8008424:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008426:	4b47      	ldr	r3, [pc, #284]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008428:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800842c:	0f1b      	lsrs	r3, r3, #28
 800842e:	f003 0307 	and.w	r3, r3, #7
 8008432:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	019a      	lsls	r2, r3, #6
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	041b      	lsls	r3, r3, #16
 800843e:	431a      	orrs	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	061b      	lsls	r3, r3, #24
 8008446:	431a      	orrs	r2, r3
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	071b      	lsls	r3, r3, #28
 800844c:	493d      	ldr	r1, [pc, #244]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800844e:	4313      	orrs	r3, r2
 8008450:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008454:	4b3b      	ldr	r3, [pc, #236]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008456:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800845a:	f023 021f 	bic.w	r2, r3, #31
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008462:	3b01      	subs	r3, #1
 8008464:	4937      	ldr	r1, [pc, #220]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008466:	4313      	orrs	r3, r2
 8008468:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d01d      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008478:	4b32      	ldr	r3, [pc, #200]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800847a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800847e:	0e1b      	lsrs	r3, r3, #24
 8008480:	f003 030f 	and.w	r3, r3, #15
 8008484:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008486:	4b2f      	ldr	r3, [pc, #188]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008488:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800848c:	0f1b      	lsrs	r3, r3, #28
 800848e:	f003 0307 	and.w	r3, r3, #7
 8008492:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	019a      	lsls	r2, r3, #6
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	041b      	lsls	r3, r3, #16
 80084a0:	431a      	orrs	r2, r3
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	061b      	lsls	r3, r3, #24
 80084a6:	431a      	orrs	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	071b      	lsls	r3, r3, #28
 80084ac:	4925      	ldr	r1, [pc, #148]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084ae:	4313      	orrs	r3, r2
 80084b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d011      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	019a      	lsls	r2, r3, #6
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	041b      	lsls	r3, r3, #16
 80084cc:	431a      	orrs	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	061b      	lsls	r3, r3, #24
 80084d4:	431a      	orrs	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	071b      	lsls	r3, r3, #28
 80084dc:	4919      	ldr	r1, [pc, #100]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084de:	4313      	orrs	r3, r2
 80084e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80084e4:	4b17      	ldr	r3, [pc, #92]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a16      	ldr	r2, [pc, #88]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80084ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084f0:	f7fa fcda 	bl	8002ea8 <HAL_GetTick>
 80084f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80084f6:	e008      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80084f8:	f7fa fcd6 	bl	8002ea8 <HAL_GetTick>
 80084fc:	4602      	mov	r2, r0
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	2b64      	cmp	r3, #100	@ 0x64
 8008504:	d901      	bls.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008506:	2303      	movs	r3, #3
 8008508:	e0d7      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800850a:	4b0e      	ldr	r3, [pc, #56]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d0f0      	beq.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	2b01      	cmp	r3, #1
 800851a:	f040 80cd 	bne.w	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800851e:	4b09      	ldr	r3, [pc, #36]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a08      	ldr	r2, [pc, #32]	@ (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008524:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008528:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800852a:	f7fa fcbd 	bl	8002ea8 <HAL_GetTick>
 800852e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008530:	e00a      	b.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008532:	f7fa fcb9 	bl	8002ea8 <HAL_GetTick>
 8008536:	4602      	mov	r2, r0
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	2b64      	cmp	r3, #100	@ 0x64
 800853e:	d903      	bls.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008540:	2303      	movs	r3, #3
 8008542:	e0ba      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008544:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008548:	4b5e      	ldr	r3, [pc, #376]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008550:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008554:	d0ed      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800855e:	2b00      	cmp	r3, #0
 8008560:	d003      	beq.n	800856a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008566:	2b00      	cmp	r3, #0
 8008568:	d009      	beq.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008572:	2b00      	cmp	r3, #0
 8008574:	d02e      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800857a:	2b00      	cmp	r3, #0
 800857c:	d12a      	bne.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800857e:	4b51      	ldr	r3, [pc, #324]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008584:	0c1b      	lsrs	r3, r3, #16
 8008586:	f003 0303 	and.w	r3, r3, #3
 800858a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800858c:	4b4d      	ldr	r3, [pc, #308]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800858e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008592:	0f1b      	lsrs	r3, r3, #28
 8008594:	f003 0307 	and.w	r3, r3, #7
 8008598:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	019a      	lsls	r2, r3, #6
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	041b      	lsls	r3, r3, #16
 80085a4:	431a      	orrs	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	061b      	lsls	r3, r3, #24
 80085ac:	431a      	orrs	r2, r3
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	071b      	lsls	r3, r3, #28
 80085b2:	4944      	ldr	r1, [pc, #272]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80085ba:	4b42      	ldr	r3, [pc, #264]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085c0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c8:	3b01      	subs	r3, #1
 80085ca:	021b      	lsls	r3, r3, #8
 80085cc:	493d      	ldr	r1, [pc, #244]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085ce:	4313      	orrs	r3, r2
 80085d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d022      	beq.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085e8:	d11d      	bne.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80085ea:	4b36      	ldr	r3, [pc, #216]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085f0:	0e1b      	lsrs	r3, r3, #24
 80085f2:	f003 030f 	and.w	r3, r3, #15
 80085f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80085f8:	4b32      	ldr	r3, [pc, #200]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085fe:	0f1b      	lsrs	r3, r3, #28
 8008600:	f003 0307 	and.w	r3, r3, #7
 8008604:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	695b      	ldr	r3, [r3, #20]
 800860a:	019a      	lsls	r2, r3, #6
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a1b      	ldr	r3, [r3, #32]
 8008610:	041b      	lsls	r3, r3, #16
 8008612:	431a      	orrs	r2, r3
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	061b      	lsls	r3, r3, #24
 8008618:	431a      	orrs	r2, r3
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	071b      	lsls	r3, r3, #28
 800861e:	4929      	ldr	r1, [pc, #164]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008620:	4313      	orrs	r3, r2
 8008622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 0308 	and.w	r3, r3, #8
 800862e:	2b00      	cmp	r3, #0
 8008630:	d028      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008632:	4b24      	ldr	r3, [pc, #144]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008638:	0e1b      	lsrs	r3, r3, #24
 800863a:	f003 030f 	and.w	r3, r3, #15
 800863e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008640:	4b20      	ldr	r3, [pc, #128]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008646:	0c1b      	lsrs	r3, r3, #16
 8008648:	f003 0303 	and.w	r3, r3, #3
 800864c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	695b      	ldr	r3, [r3, #20]
 8008652:	019a      	lsls	r2, r3, #6
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	041b      	lsls	r3, r3, #16
 8008658:	431a      	orrs	r2, r3
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	061b      	lsls	r3, r3, #24
 800865e:	431a      	orrs	r2, r3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	69db      	ldr	r3, [r3, #28]
 8008664:	071b      	lsls	r3, r3, #28
 8008666:	4917      	ldr	r1, [pc, #92]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008668:	4313      	orrs	r3, r2
 800866a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800866e:	4b15      	ldr	r3, [pc, #84]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008670:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008674:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800867c:	4911      	ldr	r1, [pc, #68]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800867e:	4313      	orrs	r3, r2
 8008680:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008684:	4b0f      	ldr	r3, [pc, #60]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a0e      	ldr	r2, [pc, #56]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800868a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800868e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008690:	f7fa fc0a 	bl	8002ea8 <HAL_GetTick>
 8008694:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008696:	e008      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008698:	f7fa fc06 	bl	8002ea8 <HAL_GetTick>
 800869c:	4602      	mov	r2, r0
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	2b64      	cmp	r3, #100	@ 0x64
 80086a4:	d901      	bls.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e007      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80086aa:	4b06      	ldr	r3, [pc, #24]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086b6:	d1ef      	bne.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3720      	adds	r7, #32
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	40023800 	.word	0x40023800

080086c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b087      	sub	sp, #28
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80086d0:	2300      	movs	r3, #0
 80086d2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80086d4:	2300      	movs	r3, #0
 80086d6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80086d8:	2300      	movs	r3, #0
 80086da:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80086dc:	2300      	movs	r3, #0
 80086de:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80086e6:	f040 808d 	bne.w	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 80086ea:	4b93      	ldr	r3, [pc, #588]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80086ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086f0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80086f8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008700:	d07c      	beq.n	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008708:	d87b      	bhi.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d004      	beq.n	800871a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008716:	d039      	beq.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008718:	e073      	b.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800871a:	4b87      	ldr	r3, [pc, #540]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008722:	2b00      	cmp	r3, #0
 8008724:	d108      	bne.n	8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008726:	4b84      	ldr	r3, [pc, #528]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800872e:	4a83      	ldr	r2, [pc, #524]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008730:	fbb2 f3f3 	udiv	r3, r2, r3
 8008734:	613b      	str	r3, [r7, #16]
 8008736:	e007      	b.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008738:	4b7f      	ldr	r3, [pc, #508]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008740:	4a7f      	ldr	r2, [pc, #508]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008742:	fbb2 f3f3 	udiv	r3, r2, r3
 8008746:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008748:	4b7b      	ldr	r3, [pc, #492]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800874a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800874e:	0e1b      	lsrs	r3, r3, #24
 8008750:	f003 030f 	and.w	r3, r3, #15
 8008754:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008756:	4b78      	ldr	r3, [pc, #480]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800875c:	099b      	lsrs	r3, r3, #6
 800875e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008762:	693a      	ldr	r2, [r7, #16]
 8008764:	fb03 f202 	mul.w	r2, r3, r2
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	fbb2 f3f3 	udiv	r3, r2, r3
 800876e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008770:	4b71      	ldr	r3, [pc, #452]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008772:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008776:	0a1b      	lsrs	r3, r3, #8
 8008778:	f003 031f 	and.w	r3, r3, #31
 800877c:	3301      	adds	r3, #1
 800877e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008780:	697a      	ldr	r2, [r7, #20]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	fbb2 f3f3 	udiv	r3, r2, r3
 8008788:	617b      	str	r3, [r7, #20]
        break;
 800878a:	e03b      	b.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800878c:	4b6a      	ldr	r3, [pc, #424]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008794:	2b00      	cmp	r3, #0
 8008796:	d108      	bne.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008798:	4b67      	ldr	r3, [pc, #412]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087a0:	4a66      	ldr	r2, [pc, #408]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80087a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80087a6:	613b      	str	r3, [r7, #16]
 80087a8:	e007      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80087aa:	4b63      	ldr	r3, [pc, #396]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087b2:	4a63      	ldr	r2, [pc, #396]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80087b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087b8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80087ba:	4b5f      	ldr	r3, [pc, #380]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087c0:	0e1b      	lsrs	r3, r3, #24
 80087c2:	f003 030f 	and.w	r3, r3, #15
 80087c6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80087c8:	4b5b      	ldr	r3, [pc, #364]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087ce:	099b      	lsrs	r3, r3, #6
 80087d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087d4:	693a      	ldr	r2, [r7, #16]
 80087d6:	fb03 f202 	mul.w	r2, r3, r2
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80087e0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80087e2:	4b55      	ldr	r3, [pc, #340]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087e8:	f003 031f 	and.w	r3, r3, #31
 80087ec:	3301      	adds	r3, #1
 80087ee:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80087f0:	697a      	ldr	r2, [r7, #20]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087f8:	617b      	str	r3, [r7, #20]
        break;
 80087fa:	e003      	b.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 80087fc:	4b51      	ldr	r3, [pc, #324]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80087fe:	617b      	str	r3, [r7, #20]
        break;
 8008800:	e000      	b.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8008802:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800880a:	f040 808d 	bne.w	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800880e:	4b4a      	ldr	r3, [pc, #296]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008810:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008814:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800881c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008824:	d07c      	beq.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800882c:	d87b      	bhi.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d004      	beq.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800883a:	d039      	beq.n	80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800883c:	e073      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800883e:	4b3e      	ldr	r3, [pc, #248]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008846:	2b00      	cmp	r3, #0
 8008848:	d108      	bne.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800884a:	4b3b      	ldr	r3, [pc, #236]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008852:	4a3a      	ldr	r2, [pc, #232]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008854:	fbb2 f3f3 	udiv	r3, r2, r3
 8008858:	613b      	str	r3, [r7, #16]
 800885a:	e007      	b.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800885c:	4b36      	ldr	r3, [pc, #216]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008864:	4a36      	ldr	r2, [pc, #216]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008866:	fbb2 f3f3 	udiv	r3, r2, r3
 800886a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800886c:	4b32      	ldr	r3, [pc, #200]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800886e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008872:	0e1b      	lsrs	r3, r3, #24
 8008874:	f003 030f 	and.w	r3, r3, #15
 8008878:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800887a:	4b2f      	ldr	r3, [pc, #188]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800887c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008880:	099b      	lsrs	r3, r3, #6
 8008882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008886:	693a      	ldr	r2, [r7, #16]
 8008888:	fb03 f202 	mul.w	r2, r3, r2
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008892:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008894:	4b28      	ldr	r3, [pc, #160]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008896:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800889a:	0a1b      	lsrs	r3, r3, #8
 800889c:	f003 031f 	and.w	r3, r3, #31
 80088a0:	3301      	adds	r3, #1
 80088a2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80088a4:	697a      	ldr	r2, [r7, #20]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ac:	617b      	str	r3, [r7, #20]
        break;
 80088ae:	e03b      	b.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80088b0:	4b21      	ldr	r3, [pc, #132]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d108      	bne.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80088bc:	4b1e      	ldr	r3, [pc, #120]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088c4:	4a1d      	ldr	r2, [pc, #116]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80088c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ca:	613b      	str	r3, [r7, #16]
 80088cc:	e007      	b.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80088ce:	4b1a      	ldr	r3, [pc, #104]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088d6:	4a1a      	ldr	r2, [pc, #104]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80088d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80088dc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80088de:	4b16      	ldr	r3, [pc, #88]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088e4:	0e1b      	lsrs	r3, r3, #24
 80088e6:	f003 030f 	and.w	r3, r3, #15
 80088ea:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80088ec:	4b12      	ldr	r3, [pc, #72]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088f2:	099b      	lsrs	r3, r3, #6
 80088f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f8:	693a      	ldr	r2, [r7, #16]
 80088fa:	fb03 f202 	mul.w	r2, r3, r2
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	fbb2 f3f3 	udiv	r3, r2, r3
 8008904:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008906:	4b0c      	ldr	r3, [pc, #48]	@ (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008908:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800890c:	f003 031f 	and.w	r3, r3, #31
 8008910:	3301      	adds	r3, #1
 8008912:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008914:	697a      	ldr	r2, [r7, #20]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	fbb2 f3f3 	udiv	r3, r2, r3
 800891c:	617b      	str	r3, [r7, #20]
        break;
 800891e:	e003      	b.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008920:	4b08      	ldr	r3, [pc, #32]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008922:	617b      	str	r3, [r7, #20]
        break;
 8008924:	e000      	b.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8008926:	bf00      	nop
      }
    }
  }

  return frequency;
 8008928:	697b      	ldr	r3, [r7, #20]
}
 800892a:	4618      	mov	r0, r3
 800892c:	371c      	adds	r7, #28
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	40023800 	.word	0x40023800
 800893c:	00f42400 	.word	0x00f42400
 8008940:	017d7840 	.word	0x017d7840
 8008944:	00bb8000 	.word	0x00bb8000

08008948 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d101      	bne.n	800895a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	e071      	b.n	8008a3e <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	7f5b      	ldrb	r3, [r3, #29]
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b00      	cmp	r3, #0
 8008962:	d105      	bne.n	8008970 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f7f9 fcaa 	bl	80022c4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2202      	movs	r2, #2
 8008974:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	f003 0310 	and.w	r3, r3, #16
 8008980:	2b10      	cmp	r3, #16
 8008982:	d053      	beq.n	8008a2c <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	22ca      	movs	r2, #202	@ 0xca
 800898a:	625a      	str	r2, [r3, #36]	@ 0x24
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2253      	movs	r2, #83	@ 0x53
 8008992:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 fac7 	bl	8008f28 <RTC_EnterInitMode>
 800899a:	4603      	mov	r3, r0
 800899c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800899e:	7bfb      	ldrb	r3, [r7, #15]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d12a      	bne.n	80089fa <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	6899      	ldr	r1, [r3, #8]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	4b26      	ldr	r3, [pc, #152]	@ (8008a48 <HAL_RTC_Init+0x100>)
 80089b0:	400b      	ands	r3, r1
 80089b2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	6899      	ldr	r1, [r3, #8]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	685a      	ldr	r2, [r3, #4]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	431a      	orrs	r2, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	695b      	ldr	r3, [r3, #20]
 80089c8:	431a      	orrs	r2, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	430a      	orrs	r2, r1
 80089d0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	68d2      	ldr	r2, [r2, #12]
 80089da:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6919      	ldr	r1, [r3, #16]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	041a      	lsls	r2, r3, #16
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	430a      	orrs	r2, r1
 80089ee:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 fad0 	bl	8008f96 <RTC_ExitInitMode>
 80089f6:	4603      	mov	r3, r0
 80089f8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80089fa:	7bfb      	ldrb	r3, [r7, #15]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d110      	bne.n	8008a22 <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f022 0208 	bic.w	r2, r2, #8
 8008a0e:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	699a      	ldr	r2, [r3, #24]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	430a      	orrs	r2, r1
 8008a20:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	22ff      	movs	r2, #255	@ 0xff
 8008a28:	625a      	str	r2, [r3, #36]	@ 0x24
 8008a2a:	e001      	b.n	8008a30 <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d102      	bne.n	8008a3c <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	ff8fffbf 	.word	0xff8fffbf

08008a4c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008a4c:	b590      	push	{r4, r7, lr}
 8008a4e:	b087      	sub	sp, #28
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	7f1b      	ldrb	r3, [r3, #28]
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d101      	bne.n	8008a68 <HAL_RTC_SetTime+0x1c>
 8008a64:	2302      	movs	r3, #2
 8008a66:	e085      	b.n	8008b74 <HAL_RTC_SetTime+0x128>
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2202      	movs	r2, #2
 8008a72:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d126      	bne.n	8008ac8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d102      	bne.n	8008a8e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f000 faa4 	bl	8008fe0 <RTC_ByteToBcd2>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	785b      	ldrb	r3, [r3, #1]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 fa9d 	bl	8008fe0 <RTC_ByteToBcd2>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008aaa:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	789b      	ldrb	r3, [r3, #2]
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f000 fa95 	bl	8008fe0 <RTC_ByteToBcd2>
 8008ab6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008ab8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	78db      	ldrb	r3, [r3, #3]
 8008ac0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	617b      	str	r3, [r7, #20]
 8008ac6:	e018      	b.n	8008afa <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d102      	bne.n	8008adc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	785b      	ldrb	r3, [r3, #1]
 8008ae6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008ae8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008aee:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	78db      	ldrb	r3, [r3, #3]
 8008af4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008af6:	4313      	orrs	r3, r2
 8008af8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	22ca      	movs	r2, #202	@ 0xca
 8008b00:	625a      	str	r2, [r3, #36]	@ 0x24
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2253      	movs	r2, #83	@ 0x53
 8008b08:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f000 fa0c 	bl	8008f28 <RTC_EnterInitMode>
 8008b10:	4603      	mov	r3, r0
 8008b12:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008b14:	7cfb      	ldrb	r3, [r7, #19]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d11e      	bne.n	8008b58 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	6979      	ldr	r1, [r7, #20]
 8008b20:	4b16      	ldr	r3, [pc, #88]	@ (8008b7c <HAL_RTC_SetTime+0x130>)
 8008b22:	400b      	ands	r3, r1
 8008b24:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	689a      	ldr	r2, [r3, #8]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008b34:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	6899      	ldr	r1, [r3, #8]
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	68da      	ldr	r2, [r3, #12]
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	431a      	orrs	r2, r3
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	430a      	orrs	r2, r1
 8008b4c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f000 fa21 	bl	8008f96 <RTC_ExitInitMode>
 8008b54:	4603      	mov	r3, r0
 8008b56:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008b58:	7cfb      	ldrb	r3, [r7, #19]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d102      	bne.n	8008b64 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2201      	movs	r2, #1
 8008b62:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	22ff      	movs	r2, #255	@ 0xff
 8008b6a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	771a      	strb	r2, [r3, #28]

  return status;
 8008b72:	7cfb      	ldrb	r3, [r7, #19]
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	371c      	adds	r7, #28
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd90      	pop	{r4, r7, pc}
 8008b7c:	007f7f7f 	.word	0x007f7f7f

08008b80 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008b80:	b590      	push	{r4, r7, lr}
 8008b82:	b087      	sub	sp, #28
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	7f1b      	ldrb	r3, [r3, #28]
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d101      	bne.n	8008b9c <HAL_RTC_SetDate+0x1c>
 8008b98:	2302      	movs	r3, #2
 8008b9a:	e06f      	b.n	8008c7c <HAL_RTC_SetDate+0xfc>
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2202      	movs	r2, #2
 8008ba6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d10e      	bne.n	8008bcc <HAL_RTC_SetDate+0x4c>
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	785b      	ldrb	r3, [r3, #1]
 8008bb2:	f003 0310 	and.w	r3, r3, #16
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d008      	beq.n	8008bcc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	785b      	ldrb	r3, [r3, #1]
 8008bbe:	f023 0310 	bic.w	r3, r3, #16
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	330a      	adds	r3, #10
 8008bc6:	b2da      	uxtb	r2, r3
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d11c      	bne.n	8008c0c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	78db      	ldrb	r3, [r3, #3]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f000 fa02 	bl	8008fe0 <RTC_ByteToBcd2>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	785b      	ldrb	r3, [r3, #1]
 8008be4:	4618      	mov	r0, r3
 8008be6:	f000 f9fb 	bl	8008fe0 <RTC_ByteToBcd2>
 8008bea:	4603      	mov	r3, r0
 8008bec:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008bee:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	789b      	ldrb	r3, [r3, #2]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f000 f9f3 	bl	8008fe0 <RTC_ByteToBcd2>
 8008bfa:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008bfc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008c06:	4313      	orrs	r3, r2
 8008c08:	617b      	str	r3, [r7, #20]
 8008c0a:	e00e      	b.n	8008c2a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	78db      	ldrb	r3, [r3, #3]
 8008c10:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	785b      	ldrb	r3, [r3, #1]
 8008c16:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008c18:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008c1a:	68ba      	ldr	r2, [r7, #8]
 8008c1c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008c1e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008c26:	4313      	orrs	r3, r2
 8008c28:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	22ca      	movs	r2, #202	@ 0xca
 8008c30:	625a      	str	r2, [r3, #36]	@ 0x24
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2253      	movs	r2, #83	@ 0x53
 8008c38:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f000 f974 	bl	8008f28 <RTC_EnterInitMode>
 8008c40:	4603      	mov	r3, r0
 8008c42:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008c44:	7cfb      	ldrb	r3, [r7, #19]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d10a      	bne.n	8008c60 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	6979      	ldr	r1, [r7, #20]
 8008c50:	4b0c      	ldr	r3, [pc, #48]	@ (8008c84 <HAL_RTC_SetDate+0x104>)
 8008c52:	400b      	ands	r3, r1
 8008c54:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f000 f99d 	bl	8008f96 <RTC_ExitInitMode>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008c60:	7cfb      	ldrb	r3, [r7, #19]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d102      	bne.n	8008c6c <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	22ff      	movs	r2, #255	@ 0xff
 8008c72:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2200      	movs	r2, #0
 8008c78:	771a      	strb	r2, [r3, #28]

  return status;
 8008c7a:	7cfb      	ldrb	r3, [r7, #19]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	371c      	adds	r7, #28
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd90      	pop	{r4, r7, pc}
 8008c84:	00ffff3f 	.word	0x00ffff3f

08008c88 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008c88:	b590      	push	{r4, r7, lr}
 8008c8a:	b089      	sub	sp, #36	@ 0x24
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008c94:	2300      	movs	r3, #0
 8008c96:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	7f1b      	ldrb	r3, [r3, #28]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d101      	bne.n	8008cac <HAL_RTC_SetAlarm+0x24>
 8008ca8:	2302      	movs	r3, #2
 8008caa:	e113      	b.n	8008ed4 <HAL_RTC_SetAlarm+0x24c>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2202      	movs	r2, #2
 8008cb6:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d137      	bne.n	8008d2e <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d102      	bne.n	8008cd2 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f000 f982 	bl	8008fe0 <RTC_ByteToBcd2>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	785b      	ldrb	r3, [r3, #1]
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f000 f97b 	bl	8008fe0 <RTC_ByteToBcd2>
 8008cea:	4603      	mov	r3, r0
 8008cec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008cee:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	789b      	ldrb	r3, [r3, #2]
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f000 f973 	bl	8008fe0 <RTC_ByteToBcd2>
 8008cfa:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008cfc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	78db      	ldrb	r3, [r3, #3]
 8008d04:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008d06:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d10:	4618      	mov	r0, r3
 8008d12:	f000 f965 	bl	8008fe0 <RTC_ByteToBcd2>
 8008d16:	4603      	mov	r3, r0
 8008d18:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8008d1a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008d22:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	61fb      	str	r3, [r7, #28]
 8008d2c:	e023      	b.n	8008d76 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d102      	bne.n	8008d42 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	785b      	ldrb	r3, [r3, #1]
 8008d4c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008d4e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008d50:	68ba      	ldr	r2, [r7, #8]
 8008d52:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008d54:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	78db      	ldrb	r3, [r3, #3]
 8008d5a:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008d5c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d64:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8008d66:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008d6c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008d72:	4313      	orrs	r3, r2
 8008d74:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	22ca      	movs	r2, #202	@ 0xca
 8008d88:	625a      	str	r2, [r3, #36]	@ 0x24
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2253      	movs	r2, #83	@ 0x53
 8008d90:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d9a:	d148      	bne.n	8008e2e <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	689a      	ldr	r2, [r3, #8]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008daa:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	689a      	ldr	r2, [r3, #8]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008dba:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	b2da      	uxtb	r2, r3
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8008dcc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008dce:	f7fa f86b 	bl	8002ea8 <HAL_GetTick>
 8008dd2:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008dd4:	e013      	b.n	8008dfe <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008dd6:	f7fa f867 	bl	8002ea8 <HAL_GetTick>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	1ad3      	subs	r3, r2, r3
 8008de0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008de4:	d90b      	bls.n	8008dfe <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	22ff      	movs	r2, #255	@ 0xff
 8008dec:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2203      	movs	r2, #3
 8008df2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2200      	movs	r2, #0
 8008df8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008dfa:	2303      	movs	r3, #3
 8008dfc:	e06a      	b.n	8008ed4 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	f003 0301 	and.w	r3, r3, #1
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d0e4      	beq.n	8008dd6 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	69fa      	ldr	r2, [r7, #28]
 8008e12:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	697a      	ldr	r2, [r7, #20]
 8008e1a:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	689a      	ldr	r2, [r3, #8]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008e2a:	609a      	str	r2, [r3, #8]
 8008e2c:	e047      	b.n	8008ebe <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	689a      	ldr	r2, [r3, #8]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008e3c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	689a      	ldr	r2, [r3, #8]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008e4c:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	b2da      	uxtb	r2, r3
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8008e5e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008e60:	f7fa f822 	bl	8002ea8 <HAL_GetTick>
 8008e64:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008e66:	e013      	b.n	8008e90 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008e68:	f7fa f81e 	bl	8002ea8 <HAL_GetTick>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	1ad3      	subs	r3, r2, r3
 8008e72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e76:	d90b      	bls.n	8008e90 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	22ff      	movs	r2, #255	@ 0xff
 8008e7e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2203      	movs	r2, #3
 8008e84:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	e021      	b.n	8008ed4 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	f003 0302 	and.w	r3, r3, #2
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d0e4      	beq.n	8008e68 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	69fa      	ldr	r2, [r7, #28]
 8008ea4:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	697a      	ldr	r2, [r7, #20]
 8008eac:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	689a      	ldr	r2, [r3, #8]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ebc:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	22ff      	movs	r2, #255	@ 0xff
 8008ec4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008ed2:	2300      	movs	r3, #0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3724      	adds	r7, #36	@ 0x24
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd90      	pop	{r4, r7, pc}

08008edc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a0d      	ldr	r2, [pc, #52]	@ (8008f24 <HAL_RTC_WaitForSynchro+0x48>)
 8008eee:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008ef0:	f7f9 ffda 	bl	8002ea8 <HAL_GetTick>
 8008ef4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008ef6:	e009      	b.n	8008f0c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008ef8:	f7f9 ffd6 	bl	8002ea8 <HAL_GetTick>
 8008efc:	4602      	mov	r2, r0
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008f06:	d901      	bls.n	8008f0c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	e007      	b.n	8008f1c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	f003 0320 	and.w	r3, r3, #32
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d0ee      	beq.n	8008ef8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	0001ff5f 	.word	0x0001ff5f

08008f28 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008f30:	2300      	movs	r3, #0
 8008f32:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008f34:	2300      	movs	r3, #0
 8008f36:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d122      	bne.n	8008f8c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68da      	ldr	r2, [r3, #12]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008f54:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008f56:	f7f9 ffa7 	bl	8002ea8 <HAL_GetTick>
 8008f5a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008f5c:	e00c      	b.n	8008f78 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008f5e:	f7f9 ffa3 	bl	8002ea8 <HAL_GetTick>
 8008f62:	4602      	mov	r2, r0
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	1ad3      	subs	r3, r2, r3
 8008f68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008f6c:	d904      	bls.n	8008f78 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2204      	movs	r2, #4
 8008f72:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d102      	bne.n	8008f8c <RTC_EnterInitMode+0x64>
 8008f86:	7bfb      	ldrb	r3, [r7, #15]
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d1e8      	bne.n	8008f5e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3710      	adds	r7, #16
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b084      	sub	sp, #16
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68da      	ldr	r2, [r3, #12]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008fb0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	f003 0320 	and.w	r3, r3, #32
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d10a      	bne.n	8008fd6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f7ff ff8b 	bl	8008edc <HAL_RTC_WaitForSynchro>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d004      	beq.n	8008fd6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2204      	movs	r2, #4
 8008fd0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008fea:	2300      	movs	r3, #0
 8008fec:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8008fee:	e005      	b.n	8008ffc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8008ff6:	79fb      	ldrb	r3, [r7, #7]
 8008ff8:	3b0a      	subs	r3, #10
 8008ffa:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8008ffc:	79fb      	ldrb	r3, [r7, #7]
 8008ffe:	2b09      	cmp	r3, #9
 8009000:	d8f6      	bhi.n	8008ff0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	b2db      	uxtb	r3, r3
 8009006:	011b      	lsls	r3, r3, #4
 8009008:	b2da      	uxtb	r2, r3
 800900a:	79fb      	ldrb	r3, [r7, #7]
 800900c:	4313      	orrs	r3, r2
 800900e:	b2db      	uxtb	r3, r3
}
 8009010:	4618      	mov	r0, r3
 8009012:	3714      	adds	r7, #20
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800901c:	b480      	push	{r7}
 800901e:	b087      	sub	sp, #28
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009028:	2300      	movs	r3, #0
 800902a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	7f1b      	ldrb	r3, [r3, #28]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d101      	bne.n	8009038 <HAL_RTCEx_SetTimeStamp+0x1c>
 8009034:	2302      	movs	r3, #2
 8009036:	e050      	b.n	80090da <HAL_RTCEx_SetTimeStamp+0xbe>
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2201      	movs	r2, #1
 800903c:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2202      	movs	r2, #2
 8009042:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f022 0206 	bic.w	r2, r2, #6
 8009052:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	430a      	orrs	r2, r1
 8009062:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	689a      	ldr	r2, [r3, #8]
 800906a:	4b1f      	ldr	r3, [pc, #124]	@ (80090e8 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800906c:	4013      	ands	r3, r2
 800906e:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8009070:	697a      	ldr	r2, [r7, #20]
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	4313      	orrs	r3, r2
 8009076:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	22ca      	movs	r2, #202	@ 0xca
 800907e:	625a      	str	r2, [r3, #36]	@ 0x24
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	2253      	movs	r2, #83	@ 0x53
 8009086:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	697a      	ldr	r2, [r7, #20]
 800908e:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	b2da      	uxtb	r2, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 80090a0:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	b2da      	uxtb	r2, r3
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 80090b2:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	689a      	ldr	r2, [r3, #8]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090c2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	22ff      	movs	r2, #255	@ 0xff
 80090ca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2201      	movs	r2, #1
 80090d0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2200      	movs	r2, #0
 80090d6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	371c      	adds	r7, #28
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	fffff7f7 	.word	0xfffff7f7

080090ec <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b088      	sub	sp, #32
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80090f4:	2300      	movs	r3, #0
 80090f6:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80090f8:	2300      	movs	r3, #0
 80090fa:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80090fc:	2300      	movs	r3, #0
 80090fe:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d101      	bne.n	800910a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e156      	b.n	80093b8 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8009110:	b2db      	uxtb	r3, r3
 8009112:	2b00      	cmp	r3, #0
 8009114:	d106      	bne.n	8009124 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f7f9 fce4 	bl	8002aec <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2202      	movs	r2, #2
 8009128:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 f95b 	bl	80093e8 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	2b02      	cmp	r3, #2
 8009138:	d00c      	beq.n	8009154 <HAL_SAI_Init+0x68>
 800913a:	2b02      	cmp	r3, #2
 800913c:	d80d      	bhi.n	800915a <HAL_SAI_Init+0x6e>
 800913e:	2b00      	cmp	r3, #0
 8009140:	d002      	beq.n	8009148 <HAL_SAI_Init+0x5c>
 8009142:	2b01      	cmp	r3, #1
 8009144:	d003      	beq.n	800914e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8009146:	e008      	b.n	800915a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8009148:	2300      	movs	r3, #0
 800914a:	61fb      	str	r3, [r7, #28]
      break;
 800914c:	e006      	b.n	800915c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800914e:	2310      	movs	r3, #16
 8009150:	61fb      	str	r3, [r7, #28]
      break;
 8009152:	e003      	b.n	800915c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009154:	2320      	movs	r3, #32
 8009156:	61fb      	str	r3, [r7, #28]
      break;
 8009158:	e000      	b.n	800915c <HAL_SAI_Init+0x70>
      break;
 800915a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	2b03      	cmp	r3, #3
 8009162:	d81e      	bhi.n	80091a2 <HAL_SAI_Init+0xb6>
 8009164:	a201      	add	r2, pc, #4	@ (adr r2, 800916c <HAL_SAI_Init+0x80>)
 8009166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916a:	bf00      	nop
 800916c:	0800917d 	.word	0x0800917d
 8009170:	08009183 	.word	0x08009183
 8009174:	0800918b 	.word	0x0800918b
 8009178:	08009193 	.word	0x08009193
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800917c:	2300      	movs	r3, #0
 800917e:	617b      	str	r3, [r7, #20]
    }
    break;
 8009180:	e010      	b.n	80091a4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009182:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009186:	617b      	str	r3, [r7, #20]
    }
    break;
 8009188:	e00c      	b.n	80091a4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800918a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800918e:	617b      	str	r3, [r7, #20]
    }
    break;
 8009190:	e008      	b.n	80091a4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009192:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009196:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	f043 0301 	orr.w	r3, r3, #1
 800919e:	61fb      	str	r3, [r7, #28]
    }
    break;
 80091a0:	e000      	b.n	80091a4 <HAL_SAI_Init+0xb8>
    default:
      break;
 80091a2:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a85      	ldr	r2, [pc, #532]	@ (80093c0 <HAL_SAI_Init+0x2d4>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d004      	beq.n	80091b8 <HAL_SAI_Init+0xcc>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a84      	ldr	r2, [pc, #528]	@ (80093c4 <HAL_SAI_Init+0x2d8>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d103      	bne.n	80091c0 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80091b8:	4a83      	ldr	r2, [pc, #524]	@ (80093c8 <HAL_SAI_Init+0x2dc>)
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	6013      	str	r3, [r2, #0]
 80091be:	e002      	b.n	80091c6 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80091c0:	4a82      	ldr	r2, [pc, #520]	@ (80093cc <HAL_SAI_Init+0x2e0>)
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	69db      	ldr	r3, [r3, #28]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d04c      	beq.n	8009268 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 80091ce:	2300      	movs	r3, #0
 80091d0:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a7a      	ldr	r2, [pc, #488]	@ (80093c0 <HAL_SAI_Init+0x2d4>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d004      	beq.n	80091e6 <HAL_SAI_Init+0xfa>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a78      	ldr	r2, [pc, #480]	@ (80093c4 <HAL_SAI_Init+0x2d8>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d104      	bne.n	80091f0 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80091e6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80091ea:	f7ff fa6d 	bl	80086c8 <HAL_RCCEx_GetPeriphCLKFreq>
 80091ee:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a76      	ldr	r2, [pc, #472]	@ (80093d0 <HAL_SAI_Init+0x2e4>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d004      	beq.n	8009204 <HAL_SAI_Init+0x118>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a75      	ldr	r2, [pc, #468]	@ (80093d4 <HAL_SAI_Init+0x2e8>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d104      	bne.n	800920e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009204:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009208:	f7ff fa5e 	bl	80086c8 <HAL_RCCEx_GetPeriphCLKFreq>
 800920c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800920e:	693a      	ldr	r2, [r7, #16]
 8009210:	4613      	mov	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4413      	add	r3, r2
 8009216:	005b      	lsls	r3, r3, #1
 8009218:	461a      	mov	r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	69db      	ldr	r3, [r3, #28]
 800921e:	025b      	lsls	r3, r3, #9
 8009220:	fbb2 f3f3 	udiv	r3, r2, r3
 8009224:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	4a6b      	ldr	r2, [pc, #428]	@ (80093d8 <HAL_SAI_Init+0x2ec>)
 800922a:	fba2 2303 	umull	r2, r3, r2, r3
 800922e:	08da      	lsrs	r2, r3, #3
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8009234:	68f9      	ldr	r1, [r7, #12]
 8009236:	4b68      	ldr	r3, [pc, #416]	@ (80093d8 <HAL_SAI_Init+0x2ec>)
 8009238:	fba3 2301 	umull	r2, r3, r3, r1
 800923c:	08da      	lsrs	r2, r3, #3
 800923e:	4613      	mov	r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	4413      	add	r3, r2
 8009244:	005b      	lsls	r3, r3, #1
 8009246:	1aca      	subs	r2, r1, r3
 8009248:	2a08      	cmp	r2, #8
 800924a:	d904      	bls.n	8009256 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a1b      	ldr	r3, [r3, #32]
 8009250:	1c5a      	adds	r2, r3, #1
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800925a:	2b04      	cmp	r3, #4
 800925c:	d104      	bne.n	8009268 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a1b      	ldr	r3, [r3, #32]
 8009262:	085a      	lsrs	r2, r3, #1
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d003      	beq.n	8009278 <HAL_SAI_Init+0x18c>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	2b02      	cmp	r3, #2
 8009276:	d109      	bne.n	800928c <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800927c:	2b01      	cmp	r3, #1
 800927e:	d101      	bne.n	8009284 <HAL_SAI_Init+0x198>
 8009280:	2300      	movs	r3, #0
 8009282:	e001      	b.n	8009288 <HAL_SAI_Init+0x19c>
 8009284:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009288:	61bb      	str	r3, [r7, #24]
 800928a:	e008      	b.n	800929e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009290:	2b01      	cmp	r3, #1
 8009292:	d102      	bne.n	800929a <HAL_SAI_Init+0x1ae>
 8009294:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009298:	e000      	b.n	800929c <HAL_SAI_Init+0x1b0>
 800929a:	2300      	movs	r3, #0
 800929c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	6819      	ldr	r1, [r3, #0]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	4b4c      	ldr	r3, [pc, #304]	@ (80093dc <HAL_SAI_Init+0x2f0>)
 80092aa:	400b      	ands	r3, r1
 80092ac:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	6819      	ldr	r1, [r3, #0]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	685a      	ldr	r2, [r3, #4]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092bc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80092c2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092c8:	431a      	orrs	r2, r3
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 80092d6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	691b      	ldr	r3, [r3, #16]
 80092dc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80092e2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a1b      	ldr	r3, [r3, #32]
 80092e8:	051b      	lsls	r3, r3, #20
 80092ea:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	430a      	orrs	r2, r1
 80092f2:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	6859      	ldr	r1, [r3, #4]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	4b38      	ldr	r3, [pc, #224]	@ (80093e0 <HAL_SAI_Init+0x2f4>)
 8009300:	400b      	ands	r3, r1
 8009302:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	6859      	ldr	r1, [r3, #4]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	699a      	ldr	r2, [r3, #24]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009312:	431a      	orrs	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009318:	431a      	orrs	r2, r3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	430a      	orrs	r2, r1
 8009320:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	6899      	ldr	r1, [r3, #8]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	4b2d      	ldr	r3, [pc, #180]	@ (80093e4 <HAL_SAI_Init+0x2f8>)
 800932e:	400b      	ands	r3, r1
 8009330:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	6899      	ldr	r1, [r3, #8]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800933c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009342:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8009348:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800934e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009354:	3b01      	subs	r3, #1
 8009356:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009358:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	430a      	orrs	r2, r1
 8009360:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68d9      	ldr	r1, [r3, #12]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8009370:	400b      	ands	r3, r1
 8009372:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	68d9      	ldr	r1, [r3, #12]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009382:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009388:	041b      	lsls	r3, r3, #16
 800938a:	431a      	orrs	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009390:	3b01      	subs	r3, #1
 8009392:	021b      	lsls	r3, r3, #8
 8009394:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	430a      	orrs	r2, r1
 800939c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2201      	movs	r2, #1
 80093aa:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80093b6:	2300      	movs	r3, #0
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3720      	adds	r7, #32
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	40015804 	.word	0x40015804
 80093c4:	40015824 	.word	0x40015824
 80093c8:	40015800 	.word	0x40015800
 80093cc:	40015c00 	.word	0x40015c00
 80093d0:	40015c04 	.word	0x40015c04
 80093d4:	40015c24 	.word	0x40015c24
 80093d8:	cccccccd 	.word	0xcccccccd
 80093dc:	ff05c010 	.word	0xff05c010
 80093e0:	ffff1ff0 	.word	0xffff1ff0
 80093e4:	fff88000 	.word	0xfff88000

080093e8 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80093f0:	4b17      	ldr	r3, [pc, #92]	@ (8009450 <SAI_Disable+0x68>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a17      	ldr	r2, [pc, #92]	@ (8009454 <SAI_Disable+0x6c>)
 80093f6:	fba2 2303 	umull	r2, r3, r2, r3
 80093fa:	0b1b      	lsrs	r3, r3, #12
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009400:	2300      	movs	r3, #0
 8009402:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009412:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	1e5a      	subs	r2, r3, #1
 8009418:	60fa      	str	r2, [r7, #12]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10a      	bne.n	8009434 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009424:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800942e:	2303      	movs	r3, #3
 8009430:	72fb      	strb	r3, [r7, #11]
      break;
 8009432:	e006      	b.n	8009442 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1e8      	bne.n	8009414 <SAI_Disable+0x2c>

  return status;
 8009442:	7afb      	ldrb	r3, [r7, #11]
}
 8009444:	4618      	mov	r0, r3
 8009446:	3714      	adds	r7, #20
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr
 8009450:	20000000 	.word	0x20000000
 8009454:	95cbec1b 	.word	0x95cbec1b

08009458 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d101      	bne.n	800946a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	e022      	b.n	80094b0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009470:	b2db      	uxtb	r3, r3
 8009472:	2b00      	cmp	r3, #0
 8009474:	d105      	bne.n	8009482 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f7f8 ff4f 	bl	8002320 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2203      	movs	r2, #3
 8009486:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f814 	bl	80094b8 <HAL_SD_InitCard>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d001      	beq.n	800949a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	e00a      	b.n	80094b0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2201      	movs	r2, #1
 80094aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80094b8:	b5b0      	push	{r4, r5, r7, lr}
 80094ba:	b08e      	sub	sp, #56	@ 0x38
 80094bc:	af04      	add	r7, sp, #16
 80094be:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80094c0:	2300      	movs	r3, #0
 80094c2:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80094c4:	2300      	movs	r3, #0
 80094c6:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80094c8:	2300      	movs	r3, #0
 80094ca:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80094cc:	2300      	movs	r3, #0
 80094ce:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80094d0:	2300      	movs	r3, #0
 80094d2:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80094d4:	2376      	movs	r3, #118	@ 0x76
 80094d6:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681d      	ldr	r5, [r3, #0]
 80094dc:	466c      	mov	r4, sp
 80094de:	f107 0318 	add.w	r3, r7, #24
 80094e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80094e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80094ea:	f107 030c 	add.w	r3, r7, #12
 80094ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80094f0:	4628      	mov	r0, r5
 80094f2:	f002 ffc3 	bl	800c47c <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	685a      	ldr	r2, [r3, #4]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009504:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4618      	mov	r0, r3
 800950c:	f002 ffef 	bl	800c4ee <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	685a      	ldr	r2, [r3, #4]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800951e:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009520:	2002      	movs	r0, #2
 8009522:	f7f9 fccd 	bl	8002ec0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 fe10 	bl	800a14c <SD_PowerON>
 800952c:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800952e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00b      	beq.n	800954c <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009542:	431a      	orrs	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	e02e      	b.n	80095aa <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 fd2f 	bl	8009fb0 <SD_InitCard>
 8009552:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8009554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00b      	beq.n	8009572 <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2201      	movs	r2, #1
 800955e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009568:	431a      	orrs	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	e01b      	b.n	80095aa <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800957a:	4618      	mov	r0, r3
 800957c:	f003 f84a 	bl	800c614 <SDMMC_CmdBlockLength>
 8009580:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8009582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00f      	beq.n	80095a8 <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a09      	ldr	r2, [pc, #36]	@ (80095b4 <HAL_SD_InitCard+0xfc>)
 800958e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009596:	431a      	orrs	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	e000      	b.n	80095aa <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3728      	adds	r7, #40	@ 0x28
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bdb0      	pop	{r4, r5, r7, pc}
 80095b2:	bf00      	nop
 80095b4:	004005ff 	.word	0x004005ff

080095b8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b08c      	sub	sp, #48	@ 0x30
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
 80095c4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d107      	bne.n	80095e0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095d4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80095dc:	2301      	movs	r3, #1
 80095de:	e0c3      	b.n	8009768 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	f040 80bc 	bne.w	8009766 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80095f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	441a      	add	r2, r3
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095fe:	429a      	cmp	r2, r3
 8009600:	d907      	bls.n	8009612 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009606:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	e0aa      	b.n	8009768 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2203      	movs	r2, #3
 8009616:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2200      	movs	r2, #0
 8009620:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8009630:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009636:	4a4e      	ldr	r2, [pc, #312]	@ (8009770 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8009638:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800963e:	4a4d      	ldr	r2, [pc, #308]	@ (8009774 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8009640:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009646:	2200      	movs	r2, #0
 8009648:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800964e:	2200      	movs	r2, #0
 8009650:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009662:	689a      	ldr	r2, [r3, #8]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	430a      	orrs	r2, r1
 800966c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	3380      	adds	r3, #128	@ 0x80
 8009678:	4619      	mov	r1, r3
 800967a:	68ba      	ldr	r2, [r7, #8]
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	025b      	lsls	r3, r3, #9
 8009680:	089b      	lsrs	r3, r3, #2
 8009682:	f7fa f927 	bl	80038d4 <HAL_DMA_Start_IT>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d017      	beq.n	80096bc <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800969a:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a35      	ldr	r2, [pc, #212]	@ (8009778 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80096a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096a8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80096b8:	2301      	movs	r3, #1
 80096ba:	e055      	b.n	8009768 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f042 0208 	orr.w	r2, r2, #8
 80096ca:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d002      	beq.n	80096da <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80096d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096d6:	025b      	lsls	r3, r3, #9
 80096d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80096da:	f04f 33ff 	mov.w	r3, #4294967295
 80096de:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	025b      	lsls	r3, r3, #9
 80096e4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80096e6:	2390      	movs	r3, #144	@ 0x90
 80096e8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80096ea:	2302      	movs	r3, #2
 80096ec:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80096ee:	2300      	movs	r3, #0
 80096f0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80096f2:	2301      	movs	r3, #1
 80096f4:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f107 0210 	add.w	r2, r7, #16
 80096fe:	4611      	mov	r1, r2
 8009700:	4618      	mov	r0, r3
 8009702:	f002 ff5b 	bl	800c5bc <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	2b01      	cmp	r3, #1
 800970a:	d90a      	bls.n	8009722 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2282      	movs	r2, #130	@ 0x82
 8009710:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009718:	4618      	mov	r0, r3
 800971a:	f002 ffbf 	bl	800c69c <SDMMC_CmdReadMultiBlock>
 800971e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009720:	e009      	b.n	8009736 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2281      	movs	r2, #129	@ 0x81
 8009726:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800972e:	4618      	mov	r0, r3
 8009730:	f002 ff92 	bl	800c658 <SDMMC_CmdReadSingleBlock>
 8009734:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009738:	2b00      	cmp	r3, #0
 800973a:	d012      	beq.n	8009762 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a0d      	ldr	r2, [pc, #52]	@ (8009778 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009742:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800974a:	431a      	orrs	r2, r3
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2200      	movs	r2, #0
 800975c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	e002      	b.n	8009768 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8009762:	2300      	movs	r3, #0
 8009764:	e000      	b.n	8009768 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8009766:	2302      	movs	r3, #2
  }
}
 8009768:	4618      	mov	r0, r3
 800976a:	3730      	adds	r7, #48	@ 0x30
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	08009e9b 	.word	0x08009e9b
 8009774:	08009f0d 	.word	0x08009f0d
 8009778:	004005ff 	.word	0x004005ff

0800977c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b08c      	sub	sp, #48	@ 0x30
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
 8009788:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d107      	bne.n	80097a4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009798:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	e0c6      	b.n	8009932 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	f040 80bf 	bne.w	8009930 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2200      	movs	r2, #0
 80097b6:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80097b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	441a      	add	r2, r3
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d907      	bls.n	80097d6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ca:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	e0ad      	b.n	8009932 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2203      	movs	r2, #3
 80097da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2200      	movs	r2, #0
 80097e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f042 021a 	orr.w	r2, r2, #26
 80097f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097fa:	4a50      	ldr	r2, [pc, #320]	@ (800993c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80097fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009802:	4a4f      	ldr	r2, [pc, #316]	@ (8009940 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8009804:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800980a:	2200      	movs	r2, #0
 800980c:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009812:	2b01      	cmp	r3, #1
 8009814:	d002      	beq.n	800981c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8009816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009818:	025b      	lsls	r3, r3, #9
 800981a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	2b01      	cmp	r3, #1
 8009820:	d90a      	bls.n	8009838 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	22a0      	movs	r2, #160	@ 0xa0
 8009826:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800982e:	4618      	mov	r0, r3
 8009830:	f002 ff78 	bl	800c724 <SDMMC_CmdWriteMultiBlock>
 8009834:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009836:	e009      	b.n	800984c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2290      	movs	r2, #144	@ 0x90
 800983c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009844:	4618      	mov	r0, r3
 8009846:	f002 ff4b 	bl	800c6e0 <SDMMC_CmdWriteSingleBlock>
 800984a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800984c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800984e:	2b00      	cmp	r3, #0
 8009850:	d012      	beq.n	8009878 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a3b      	ldr	r2, [pc, #236]	@ (8009944 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009858:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800985e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009860:	431a      	orrs	r2, r3
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2201      	movs	r2, #1
 800986a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2200      	movs	r2, #0
 8009872:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	e05c      	b.n	8009932 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f042 0208 	orr.w	r2, r2, #8
 8009886:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800988c:	2240      	movs	r2, #64	@ 0x40
 800988e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098a0:	689a      	ldr	r2, [r3, #8]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	430a      	orrs	r2, r1
 80098aa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80098b0:	68b9      	ldr	r1, [r7, #8]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	3380      	adds	r3, #128	@ 0x80
 80098b8:	461a      	mov	r2, r3
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	025b      	lsls	r3, r3, #9
 80098be:	089b      	lsrs	r3, r3, #2
 80098c0:	f7fa f808 	bl	80038d4 <HAL_DMA_Start_IT>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d01a      	beq.n	8009900 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f022 021a 	bic.w	r2, r2, #26
 80098d8:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a19      	ldr	r2, [pc, #100]	@ (8009944 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80098e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098e6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2201      	movs	r2, #1
 80098f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2200      	movs	r2, #0
 80098fa:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	e018      	b.n	8009932 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009900:	f04f 33ff 	mov.w	r3, #4294967295
 8009904:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	025b      	lsls	r3, r3, #9
 800990a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800990c:	2390      	movs	r3, #144	@ 0x90
 800990e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009910:	2300      	movs	r3, #0
 8009912:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009914:	2300      	movs	r3, #0
 8009916:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009918:	2301      	movs	r3, #1
 800991a:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f107 0210 	add.w	r2, r7, #16
 8009924:	4611      	mov	r1, r2
 8009926:	4618      	mov	r0, r3
 8009928:	f002 fe48 	bl	800c5bc <SDMMC_ConfigData>

      return HAL_OK;
 800992c:	2300      	movs	r3, #0
 800992e:	e000      	b.n	8009932 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8009930:	2302      	movs	r3, #2
  }
}
 8009932:	4618      	mov	r0, r3
 8009934:	3730      	adds	r7, #48	@ 0x30
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	08009e71 	.word	0x08009e71
 8009940:	08009f0d 	.word	0x08009f0d
 8009944:	004005ff 	.word	0x004005ff

08009948 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009950:	bf00      	nop
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800996a:	0f9b      	lsrs	r3, r3, #30
 800996c:	b2da      	uxtb	r2, r3
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009976:	0e9b      	lsrs	r3, r3, #26
 8009978:	b2db      	uxtb	r3, r3
 800997a:	f003 030f 	and.w	r3, r3, #15
 800997e:	b2da      	uxtb	r2, r3
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009988:	0e1b      	lsrs	r3, r3, #24
 800998a:	b2db      	uxtb	r3, r3
 800998c:	f003 0303 	and.w	r3, r3, #3
 8009990:	b2da      	uxtb	r2, r3
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800999a:	0c1b      	lsrs	r3, r3, #16
 800999c:	b2da      	uxtb	r2, r3
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099a6:	0a1b      	lsrs	r3, r3, #8
 80099a8:	b2da      	uxtb	r2, r3
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099b2:	b2da      	uxtb	r2, r3
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099bc:	0d1b      	lsrs	r3, r3, #20
 80099be:	b29a      	uxth	r2, r3
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099c8:	0c1b      	lsrs	r3, r3, #16
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	f003 030f 	and.w	r3, r3, #15
 80099d0:	b2da      	uxtb	r2, r3
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099da:	0bdb      	lsrs	r3, r3, #15
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	f003 0301 	and.w	r3, r3, #1
 80099e2:	b2da      	uxtb	r2, r3
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099ec:	0b9b      	lsrs	r3, r3, #14
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	f003 0301 	and.w	r3, r3, #1
 80099f4:	b2da      	uxtb	r2, r3
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099fe:	0b5b      	lsrs	r3, r3, #13
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	f003 0301 	and.w	r3, r3, #1
 8009a06:	b2da      	uxtb	r2, r3
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a10:	0b1b      	lsrs	r3, r3, #12
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	f003 0301 	and.w	r3, r3, #1
 8009a18:	b2da      	uxtb	r2, r3
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	2200      	movs	r2, #0
 8009a22:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d163      	bne.n	8009af4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a30:	009a      	lsls	r2, r3, #2
 8009a32:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009a36:	4013      	ands	r3, r2
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8009a3c:	0f92      	lsrs	r2, r2, #30
 8009a3e:	431a      	orrs	r2, r3
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a48:	0edb      	lsrs	r3, r3, #27
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	f003 0307 	and.w	r3, r3, #7
 8009a50:	b2da      	uxtb	r2, r3
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a5a:	0e1b      	lsrs	r3, r3, #24
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	f003 0307 	and.w	r3, r3, #7
 8009a62:	b2da      	uxtb	r2, r3
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a6c:	0d5b      	lsrs	r3, r3, #21
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	f003 0307 	and.w	r3, r3, #7
 8009a74:	b2da      	uxtb	r2, r3
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a7e:	0c9b      	lsrs	r3, r3, #18
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	f003 0307 	and.w	r3, r3, #7
 8009a86:	b2da      	uxtb	r2, r3
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a90:	0bdb      	lsrs	r3, r3, #15
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	f003 0307 	and.w	r3, r3, #7
 8009a98:	b2da      	uxtb	r2, r3
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	1c5a      	adds	r2, r3, #1
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	7e1b      	ldrb	r3, [r3, #24]
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	f003 0307 	and.w	r3, r3, #7
 8009ab2:	3302      	adds	r3, #2
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009abe:	fb03 f202 	mul.w	r2, r3, r2
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	7a1b      	ldrb	r3, [r3, #8]
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	f003 030f 	and.w	r3, r3, #15
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	409a      	lsls	r2, r3
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8009ae0:	0a52      	lsrs	r2, r2, #9
 8009ae2:	fb03 f202 	mul.w	r2, r3, r2
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009af0:	661a      	str	r2, [r3, #96]	@ 0x60
 8009af2:	e031      	b.n	8009b58 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d11d      	bne.n	8009b38 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b00:	041b      	lsls	r3, r3, #16
 8009b02:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b0a:	0c1b      	lsrs	r3, r3, #16
 8009b0c:	431a      	orrs	r2, r3
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	3301      	adds	r3, #1
 8009b18:	029a      	lsls	r2, r3, #10
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b2c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	661a      	str	r2, [r3, #96]	@ 0x60
 8009b36:	e00f      	b.n	8009b58 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a58      	ldr	r2, [pc, #352]	@ (8009ca0 <HAL_SD_GetCardCSD+0x344>)
 8009b3e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b44:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	e09d      	b.n	8009c94 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b5c:	0b9b      	lsrs	r3, r3, #14
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	f003 0301 	and.w	r3, r3, #1
 8009b64:	b2da      	uxtb	r2, r3
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b6e:	09db      	lsrs	r3, r3, #7
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b76:	b2da      	uxtb	r2, r3
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b86:	b2da      	uxtb	r2, r3
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b90:	0fdb      	lsrs	r3, r3, #31
 8009b92:	b2da      	uxtb	r2, r3
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b9c:	0f5b      	lsrs	r3, r3, #29
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	f003 0303 	and.w	r3, r3, #3
 8009ba4:	b2da      	uxtb	r2, r3
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bae:	0e9b      	lsrs	r3, r3, #26
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	f003 0307 	and.w	r3, r3, #7
 8009bb6:	b2da      	uxtb	r2, r3
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bc0:	0d9b      	lsrs	r3, r3, #22
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	f003 030f 	and.w	r3, r3, #15
 8009bc8:	b2da      	uxtb	r2, r3
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bd2:	0d5b      	lsrs	r3, r3, #21
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	f003 0301 	and.w	r3, r3, #1
 8009bda:	b2da      	uxtb	r2, r3
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	2200      	movs	r2, #0
 8009be6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bee:	0c1b      	lsrs	r3, r3, #16
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	f003 0301 	and.w	r3, r3, #1
 8009bf6:	b2da      	uxtb	r2, r3
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c02:	0bdb      	lsrs	r3, r3, #15
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	f003 0301 	and.w	r3, r3, #1
 8009c0a:	b2da      	uxtb	r2, r3
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c16:	0b9b      	lsrs	r3, r3, #14
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	f003 0301 	and.w	r3, r3, #1
 8009c1e:	b2da      	uxtb	r2, r3
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c2a:	0b5b      	lsrs	r3, r3, #13
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	f003 0301 	and.w	r3, r3, #1
 8009c32:	b2da      	uxtb	r2, r3
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c3e:	0b1b      	lsrs	r3, r3, #12
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	f003 0301 	and.w	r3, r3, #1
 8009c46:	b2da      	uxtb	r2, r3
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c52:	0a9b      	lsrs	r3, r3, #10
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	f003 0303 	and.w	r3, r3, #3
 8009c5a:	b2da      	uxtb	r2, r3
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c66:	0a1b      	lsrs	r3, r3, #8
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	f003 0303 	and.w	r3, r3, #3
 8009c6e:	b2da      	uxtb	r2, r3
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c7a:	085b      	lsrs	r3, r3, #1
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c82:	b2da      	uxtb	r2, r3
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009c92:	2300      	movs	r3, #0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr
 8009ca0:	004005ff 	.word	0x004005ff

08009ca4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009cfc:	b5b0      	push	{r4, r5, r7, lr}
 8009cfe:	b08e      	sub	sp, #56	@ 0x38
 8009d00:	af04      	add	r7, sp, #16
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009d06:	2300      	movs	r3, #0
 8009d08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2203      	movs	r2, #3
 8009d10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d18:	2b03      	cmp	r3, #3
 8009d1a:	d02e      	beq.n	8009d7a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d22:	d106      	bne.n	8009d32 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d28:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009d30:	e029      	b.n	8009d86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d38:	d10a      	bne.n	8009d50 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 fabc 	bl	800a2b8 <SD_WideBus_Enable>
 8009d40:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d46:	6a3b      	ldr	r3, [r7, #32]
 8009d48:	431a      	orrs	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	639a      	str	r2, [r3, #56]	@ 0x38
 8009d4e:	e01a      	b.n	8009d86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d10a      	bne.n	8009d6c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 faf9 	bl	800a34e <SD_WideBus_Disable>
 8009d5c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d62:	6a3b      	ldr	r3, [r7, #32]
 8009d64:	431a      	orrs	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	639a      	str	r2, [r3, #56]	@ 0x38
 8009d6a:	e00c      	b.n	8009d86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d70:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	639a      	str	r2, [r3, #56]	@ 0x38
 8009d78:	e005      	b.n	8009d86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d7e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00b      	beq.n	8009da6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a26      	ldr	r2, [pc, #152]	@ (8009e2c <HAL_SD_ConfigWideBusOperation+0x130>)
 8009d94:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2201      	movs	r2, #1
 8009d9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009da4:	e01f      	b.n	8009de6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	695b      	ldr	r3, [r3, #20]
 8009dc0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	699b      	ldr	r3, [r3, #24]
 8009dc6:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681d      	ldr	r5, [r3, #0]
 8009dcc:	466c      	mov	r4, sp
 8009dce:	f107 0314 	add.w	r3, r7, #20
 8009dd2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009dd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009dda:	f107 0308 	add.w	r3, r7, #8
 8009dde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009de0:	4628      	mov	r0, r5
 8009de2:	f002 fb4b 	bl	800c47c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009dee:	4618      	mov	r0, r3
 8009df0:	f002 fc10 	bl	800c614 <SDMMC_CmdBlockLength>
 8009df4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009df6:	6a3b      	ldr	r3, [r7, #32]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00c      	beq.n	8009e16 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a0a      	ldr	r2, [pc, #40]	@ (8009e2c <HAL_SD_ConfigWideBusOperation+0x130>)
 8009e02:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e08:	6a3b      	ldr	r3, [r7, #32]
 8009e0a:	431a      	orrs	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8009e10:	2301      	movs	r3, #1
 8009e12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2201      	movs	r2, #1
 8009e1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8009e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3728      	adds	r7, #40	@ 0x28
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bdb0      	pop	{r4, r5, r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	004005ff 	.word	0x004005ff

08009e30 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b086      	sub	sp, #24
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009e3c:	f107 030c 	add.w	r3, r7, #12
 8009e40:	4619      	mov	r1, r3
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fa10 	bl	800a268 <SD_SendStatus>
 8009e48:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d005      	beq.n	8009e5c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	431a      	orrs	r2, r3
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	0a5b      	lsrs	r3, r3, #9
 8009e60:	f003 030f 	and.w	r3, r3, #15
 8009e64:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009e66:	693b      	ldr	r3, [r7, #16]
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3718      	adds	r7, #24
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b085      	sub	sp, #20
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e7c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009e8c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8009e8e:	bf00      	nop
 8009e90:	3714      	adds	r7, #20
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr

08009e9a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b084      	sub	sp, #16
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ea6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eac:	2b82      	cmp	r3, #130	@ 0x82
 8009eae:	d111      	bne.n	8009ed4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f002 fc57 	bl	800c768 <SDMMC_CmdStopTransfer>
 8009eba:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d008      	beq.n	8009ed4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	431a      	orrs	r2, r3
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009ece:	68f8      	ldr	r0, [r7, #12]
 8009ed0:	f7ff fd3a 	bl	8009948 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f022 0208 	bic.w	r2, r2, #8
 8009ee2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009eec:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009efc:	68f8      	ldr	r0, [r7, #12]
 8009efe:	f004 fa0b 	bl	800e318 <HAL_SD_RxCpltCallback>
#endif
}
 8009f02:	bf00      	nop
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
	...

08009f0c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b086      	sub	sp, #24
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f18:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f7f9 fd3a 	bl	8003994 <HAL_DMA_GetError>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b02      	cmp	r3, #2
 8009f24:	d03e      	beq.n	8009fa4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f2c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f34:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d002      	beq.n	8009f42 <SD_DMAError+0x36>
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d12d      	bne.n	8009f9e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a19      	ldr	r2, [pc, #100]	@ (8009fac <SD_DMAError+0xa0>)
 8009f48:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8009f58:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f5e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009f66:	6978      	ldr	r0, [r7, #20]
 8009f68:	f7ff ff62 	bl	8009e30 <HAL_SD_GetCardState>
 8009f6c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	2b06      	cmp	r3, #6
 8009f72:	d002      	beq.n	8009f7a <SD_DMAError+0x6e>
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	2b05      	cmp	r3, #5
 8009f78:	d10a      	bne.n	8009f90 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f002 fbf2 	bl	800c768 <SDMMC_CmdStopTransfer>
 8009f84:	4602      	mov	r2, r0
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f8a:	431a      	orrs	r2, r3
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009f9e:	6978      	ldr	r0, [r7, #20]
 8009fa0:	f7ff fcd2 	bl	8009948 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009fa4:	bf00      	nop
 8009fa6:	3718      	adds	r7, #24
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	004005ff 	.word	0x004005ff

08009fb0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009fb0:	b5b0      	push	{r4, r5, r7, lr}
 8009fb2:	b094      	sub	sp, #80	@ 0x50
 8009fb4:	af04      	add	r7, sp, #16
 8009fb6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f002 faa2 	bl	800c50a <SDMMC_GetPowerState>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d102      	bne.n	8009fd2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009fcc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009fd0:	e0b8      	b.n	800a144 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fd6:	2b03      	cmp	r3, #3
 8009fd8:	d02f      	beq.n	800a03a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f002 fccd 	bl	800c97e <SDMMC_CmdSendCID>
 8009fe4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d001      	beq.n	8009ff0 <SD_InitCard+0x40>
    {
      return errorstate;
 8009fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fee:	e0a9      	b.n	800a144 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f002 facd 	bl	800c596 <SDMMC_GetResponse>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2104      	movs	r1, #4
 800a008:	4618      	mov	r0, r3
 800a00a:	f002 fac4 	bl	800c596 <SDMMC_GetResponse>
 800a00e:	4602      	mov	r2, r0
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	2108      	movs	r1, #8
 800a01a:	4618      	mov	r0, r3
 800a01c:	f002 fabb 	bl	800c596 <SDMMC_GetResponse>
 800a020:	4602      	mov	r2, r0
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	210c      	movs	r1, #12
 800a02c:	4618      	mov	r0, r3
 800a02e:	f002 fab2 	bl	800c596 <SDMMC_GetResponse>
 800a032:	4602      	mov	r2, r0
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a03e:	2b03      	cmp	r3, #3
 800a040:	d00d      	beq.n	800a05e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f107 020e 	add.w	r2, r7, #14
 800a04a:	4611      	mov	r1, r2
 800a04c:	4618      	mov	r0, r3
 800a04e:	f002 fcd3 	bl	800c9f8 <SDMMC_CmdSetRelAdd>
 800a052:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a056:	2b00      	cmp	r3, #0
 800a058:	d001      	beq.n	800a05e <SD_InitCard+0xae>
    {
      return errorstate;
 800a05a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a05c:	e072      	b.n	800a144 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a062:	2b03      	cmp	r3, #3
 800a064:	d036      	beq.n	800a0d4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a066:	89fb      	ldrh	r3, [r7, #14]
 800a068:	461a      	mov	r2, r3
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a076:	041b      	lsls	r3, r3, #16
 800a078:	4619      	mov	r1, r3
 800a07a:	4610      	mov	r0, r2
 800a07c:	f002 fc9d 	bl	800c9ba <SDMMC_CmdSendCSD>
 800a080:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a084:	2b00      	cmp	r3, #0
 800a086:	d001      	beq.n	800a08c <SD_InitCard+0xdc>
    {
      return errorstate;
 800a088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a08a:	e05b      	b.n	800a144 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2100      	movs	r1, #0
 800a092:	4618      	mov	r0, r3
 800a094:	f002 fa7f 	bl	800c596 <SDMMC_GetResponse>
 800a098:	4602      	mov	r2, r0
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	2104      	movs	r1, #4
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f002 fa76 	bl	800c596 <SDMMC_GetResponse>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	2108      	movs	r1, #8
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f002 fa6d 	bl	800c596 <SDMMC_GetResponse>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	210c      	movs	r1, #12
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f002 fa64 	bl	800c596 <SDMMC_GetResponse>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2104      	movs	r1, #4
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f002 fa5b 	bl	800c596 <SDMMC_GetResponse>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	0d1a      	lsrs	r2, r3, #20
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a0e8:	f107 0310 	add.w	r3, r7, #16
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f7ff fc34 	bl	800995c <HAL_SD_GetCardCSD>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d002      	beq.n	800a100 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a0fa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a0fe:	e021      	b.n	800a144 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6819      	ldr	r1, [r3, #0]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a108:	041b      	lsls	r3, r3, #16
 800a10a:	2200      	movs	r2, #0
 800a10c:	461c      	mov	r4, r3
 800a10e:	4615      	mov	r5, r2
 800a110:	4622      	mov	r2, r4
 800a112:	462b      	mov	r3, r5
 800a114:	4608      	mov	r0, r1
 800a116:	f002 fb49 	bl	800c7ac <SDMMC_CmdSelDesel>
 800a11a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a11c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d001      	beq.n	800a126 <SD_InitCard+0x176>
  {
    return errorstate;
 800a122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a124:	e00e      	b.n	800a144 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681d      	ldr	r5, [r3, #0]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	466c      	mov	r4, sp
 800a12e:	f103 0210 	add.w	r2, r3, #16
 800a132:	ca07      	ldmia	r2, {r0, r1, r2}
 800a134:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a138:	3304      	adds	r3, #4
 800a13a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a13c:	4628      	mov	r0, r5
 800a13e:	f002 f99d 	bl	800c47c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a142:	2300      	movs	r3, #0
}
 800a144:	4618      	mov	r0, r3
 800a146:	3740      	adds	r7, #64	@ 0x40
 800a148:	46bd      	mov	sp, r7
 800a14a:	bdb0      	pop	{r4, r5, r7, pc}

0800a14c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b086      	sub	sp, #24
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a154:	2300      	movs	r3, #0
 800a156:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a158:	2300      	movs	r3, #0
 800a15a:	617b      	str	r3, [r7, #20]
 800a15c:	2300      	movs	r3, #0
 800a15e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4618      	mov	r0, r3
 800a166:	f002 fb44 	bl	800c7f2 <SDMMC_CmdGoIdleState>
 800a16a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d001      	beq.n	800a176 <SD_PowerON+0x2a>
  {
    return errorstate;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	e072      	b.n	800a25c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4618      	mov	r0, r3
 800a17c:	f002 fb57 	bl	800c82e <SDMMC_CmdOperCond>
 800a180:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00d      	beq.n	800a1a4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4618      	mov	r0, r3
 800a194:	f002 fb2d 	bl	800c7f2 <SDMMC_CmdGoIdleState>
 800a198:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d004      	beq.n	800a1aa <SD_PowerON+0x5e>
    {
      return errorstate;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	e05b      	b.n	800a25c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d137      	bne.n	800a222 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f002 fb57 	bl	800c86c <SDMMC_CmdAppCommand>
 800a1be:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d02d      	beq.n	800a222 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a1c6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a1ca:	e047      	b.n	800a25c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f002 fb4a 	bl	800c86c <SDMMC_CmdAppCommand>
 800a1d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d001      	beq.n	800a1e4 <SD_PowerON+0x98>
    {
      return errorstate;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	e03b      	b.n	800a25c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	491e      	ldr	r1, [pc, #120]	@ (800a264 <SD_PowerON+0x118>)
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f002 fb60 	bl	800c8b0 <SDMMC_CmdAppOperCommand>
 800a1f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d002      	beq.n	800a1fe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a1f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a1fc:	e02e      	b.n	800a25c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	2100      	movs	r1, #0
 800a204:	4618      	mov	r0, r3
 800a206:	f002 f9c6 	bl	800c596 <SDMMC_GetResponse>
 800a20a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	0fdb      	lsrs	r3, r3, #31
 800a210:	2b01      	cmp	r3, #1
 800a212:	d101      	bne.n	800a218 <SD_PowerON+0xcc>
 800a214:	2301      	movs	r3, #1
 800a216:	e000      	b.n	800a21a <SD_PowerON+0xce>
 800a218:	2300      	movs	r3, #0
 800a21a:	613b      	str	r3, [r7, #16]

    count++;
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	3301      	adds	r3, #1
 800a220:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a228:	4293      	cmp	r3, r2
 800a22a:	d802      	bhi.n	800a232 <SD_PowerON+0xe6>
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d0cc      	beq.n	800a1cc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a238:	4293      	cmp	r3, r2
 800a23a:	d902      	bls.n	800a242 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a23c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a240:	e00c      	b.n	800a25c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d003      	beq.n	800a254 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2201      	movs	r2, #1
 800a250:	645a      	str	r2, [r3, #68]	@ 0x44
 800a252:	e002      	b.n	800a25a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a25a:	2300      	movs	r3, #0
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3718      	adds	r7, #24
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	c1100000 	.word	0xc1100000

0800a268 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d102      	bne.n	800a27e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a278:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a27c:	e018      	b.n	800a2b0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a286:	041b      	lsls	r3, r3, #16
 800a288:	4619      	mov	r1, r3
 800a28a:	4610      	mov	r0, r2
 800a28c:	f002 fbd5 	bl	800ca3a <SDMMC_CmdSendStatus>
 800a290:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d001      	beq.n	800a29c <SD_SendStatus+0x34>
  {
    return errorstate;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	e009      	b.n	800a2b0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2100      	movs	r1, #0
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f002 f977 	bl	800c596 <SDMMC_GetResponse>
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3710      	adds	r7, #16
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b086      	sub	sp, #24
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	60fb      	str	r3, [r7, #12]
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2100      	movs	r1, #0
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f002 f961 	bl	800c596 <SDMMC_GetResponse>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a2da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2de:	d102      	bne.n	800a2e6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a2e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a2e4:	e02f      	b.n	800a346 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a2e6:	f107 030c 	add.w	r3, r7, #12
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 f879 	bl	800a3e4 <SD_FindSCR>
 800a2f2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d001      	beq.n	800a2fe <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	e023      	b.n	800a346 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a304:	2b00      	cmp	r3, #0
 800a306:	d01c      	beq.n	800a342 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a310:	041b      	lsls	r3, r3, #16
 800a312:	4619      	mov	r1, r3
 800a314:	4610      	mov	r0, r2
 800a316:	f002 faa9 	bl	800c86c <SDMMC_CmdAppCommand>
 800a31a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d001      	beq.n	800a326 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	e00f      	b.n	800a346 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2102      	movs	r1, #2
 800a32c:	4618      	mov	r0, r3
 800a32e:	f002 fae3 	bl	800c8f8 <SDMMC_CmdBusWidth>
 800a332:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d001      	beq.n	800a33e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	e003      	b.n	800a346 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a33e:	2300      	movs	r3, #0
 800a340:	e001      	b.n	800a346 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a342:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a346:	4618      	mov	r0, r3
 800a348:	3718      	adds	r7, #24
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b086      	sub	sp, #24
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a356:	2300      	movs	r3, #0
 800a358:	60fb      	str	r3, [r7, #12]
 800a35a:	2300      	movs	r3, #0
 800a35c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2100      	movs	r1, #0
 800a364:	4618      	mov	r0, r3
 800a366:	f002 f916 	bl	800c596 <SDMMC_GetResponse>
 800a36a:	4603      	mov	r3, r0
 800a36c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a370:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a374:	d102      	bne.n	800a37c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a376:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a37a:	e02f      	b.n	800a3dc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a37c:	f107 030c 	add.w	r3, r7, #12
 800a380:	4619      	mov	r1, r3
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 f82e 	bl	800a3e4 <SD_FindSCR>
 800a388:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d001      	beq.n	800a394 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	e023      	b.n	800a3dc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d01c      	beq.n	800a3d8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3a6:	041b      	lsls	r3, r3, #16
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	4610      	mov	r0, r2
 800a3ac:	f002 fa5e 	bl	800c86c <SDMMC_CmdAppCommand>
 800a3b0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d001      	beq.n	800a3bc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	e00f      	b.n	800a3dc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2100      	movs	r1, #0
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f002 fa98 	bl	800c8f8 <SDMMC_CmdBusWidth>
 800a3c8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d001      	beq.n	800a3d4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	e003      	b.n	800a3dc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	e001      	b.n	800a3dc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a3d8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3718      	adds	r7, #24
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a3e4:	b590      	push	{r4, r7, lr}
 800a3e6:	b08f      	sub	sp, #60	@ 0x3c
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a3ee:	f7f8 fd5b 	bl	8002ea8 <HAL_GetTick>
 800a3f2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	60bb      	str	r3, [r7, #8]
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2108      	movs	r1, #8
 800a40a:	4618      	mov	r0, r3
 800a40c:	f002 f902 	bl	800c614 <SDMMC_CmdBlockLength>
 800a410:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a414:	2b00      	cmp	r3, #0
 800a416:	d001      	beq.n	800a41c <SD_FindSCR+0x38>
  {
    return errorstate;
 800a418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a41a:	e0b2      	b.n	800a582 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a424:	041b      	lsls	r3, r3, #16
 800a426:	4619      	mov	r1, r3
 800a428:	4610      	mov	r0, r2
 800a42a:	f002 fa1f 	bl	800c86c <SDMMC_CmdAppCommand>
 800a42e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a432:	2b00      	cmp	r3, #0
 800a434:	d001      	beq.n	800a43a <SD_FindSCR+0x56>
  {
    return errorstate;
 800a436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a438:	e0a3      	b.n	800a582 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a43a:	f04f 33ff 	mov.w	r3, #4294967295
 800a43e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a440:	2308      	movs	r3, #8
 800a442:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a444:	2330      	movs	r3, #48	@ 0x30
 800a446:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a448:	2302      	movs	r3, #2
 800a44a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a44c:	2300      	movs	r3, #0
 800a44e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a450:	2301      	movs	r3, #1
 800a452:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f107 0210 	add.w	r2, r7, #16
 800a45c:	4611      	mov	r1, r2
 800a45e:	4618      	mov	r0, r3
 800a460:	f002 f8ac 	bl	800c5bc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4618      	mov	r0, r3
 800a46a:	f002 fa67 	bl	800c93c <SDMMC_CmdSendSCR>
 800a46e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a472:	2b00      	cmp	r3, #0
 800a474:	d02a      	beq.n	800a4cc <SD_FindSCR+0xe8>
  {
    return errorstate;
 800a476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a478:	e083      	b.n	800a582 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a480:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a484:	2b00      	cmp	r3, #0
 800a486:	d00f      	beq.n	800a4a8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6819      	ldr	r1, [r3, #0]
 800a48c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	f107 0208 	add.w	r2, r7, #8
 800a494:	18d4      	adds	r4, r2, r3
 800a496:	4608      	mov	r0, r1
 800a498:	f002 f81c 	bl	800c4d4 <SDMMC_ReadFIFO>
 800a49c:	4603      	mov	r3, r0
 800a49e:	6023      	str	r3, [r4, #0]
      index++;
 800a4a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4a6:	e006      	b.n	800a4b6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d012      	beq.n	800a4dc <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800a4b6:	f7f8 fcf7 	bl	8002ea8 <HAL_GetTick>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4be:	1ad3      	subs	r3, r2, r3
 800a4c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4c4:	d102      	bne.n	800a4cc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a4c6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a4ca:	e05a      	b.n	800a582 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4d2:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d0cf      	beq.n	800a47a <SD_FindSCR+0x96>
 800a4da:	e000      	b.n	800a4de <SD_FindSCR+0xfa>
      break;
 800a4dc:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4e4:	f003 0308 	and.w	r3, r3, #8
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d005      	beq.n	800a4f8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2208      	movs	r2, #8
 800a4f2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a4f4:	2308      	movs	r3, #8
 800a4f6:	e044      	b.n	800a582 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4fe:	f003 0302 	and.w	r3, r3, #2
 800a502:	2b00      	cmp	r3, #0
 800a504:	d005      	beq.n	800a512 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2202      	movs	r2, #2
 800a50c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a50e:	2302      	movs	r3, #2
 800a510:	e037      	b.n	800a582 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a518:	f003 0320 	and.w	r3, r3, #32
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d005      	beq.n	800a52c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	2220      	movs	r2, #32
 800a526:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a528:	2320      	movs	r3, #32
 800a52a:	e02a      	b.n	800a582 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a534:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	061a      	lsls	r2, r3, #24
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	021b      	lsls	r3, r3, #8
 800a53e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a542:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	0a1b      	lsrs	r3, r3, #8
 800a548:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a54c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	0e1b      	lsrs	r3, r3, #24
 800a552:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a556:	601a      	str	r2, [r3, #0]
    scr++;
 800a558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a55a:	3304      	adds	r3, #4
 800a55c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	061a      	lsls	r2, r3, #24
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	021b      	lsls	r3, r3, #8
 800a566:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a56a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	0a1b      	lsrs	r3, r3, #8
 800a570:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a574:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	0e1b      	lsrs	r3, r3, #24
 800a57a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a57c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a57e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a580:	2300      	movs	r3, #0
}
 800a582:	4618      	mov	r0, r3
 800a584:	373c      	adds	r7, #60	@ 0x3c
 800a586:	46bd      	mov	sp, r7
 800a588:	bd90      	pop	{r4, r7, pc}

0800a58a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b082      	sub	sp, #8
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
 800a592:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d101      	bne.n	800a59e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	e025      	b.n	800a5ea <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d106      	bne.n	800a5b8 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f7f8 fa90 	bl	8002ad8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2202      	movs	r2, #2
 800a5bc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	3304      	adds	r3, #4
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	4610      	mov	r0, r2
 800a5cc:	f001 fe90 	bl	800c2f0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6818      	ldr	r0, [r3, #0]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	461a      	mov	r2, r3
 800a5da:	6839      	ldr	r1, [r7, #0]
 800a5dc:	f001 fee4 	bl	800c3a8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a5e8:	2300      	movs	r3, #0
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3708      	adds	r7, #8
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
	...

0800a5f4 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d101      	bne.n	800a606 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	e04c      	b.n	800a6a0 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d106      	bne.n	800a620 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f7f7 fee2 	bl	80023e4 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2202      	movs	r2, #2
 800a624:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f022 0203 	bic.w	r2, r2, #3
 800a636:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	4b19      	ldr	r3, [pc, #100]	@ (800a6a8 <HAL_SPDIFRX_Init+0xb4>)
 800a644:	4013      	ands	r3, r2
 800a646:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800a650:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800a656:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800a65c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800a662:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800a668:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800a66e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800a674:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800a67a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800a680:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800a682:	68fa      	ldr	r2, [r7, #12]
 800a684:	4313      	orrs	r3, r2
 800a686:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	68fa      	ldr	r2, [r7, #12]
 800a68e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2201      	movs	r2, #1
 800a69a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800a69e:	2300      	movs	r3, #0
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3710      	adds	r7, #16
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	fff88407 	.word	0xfff88407

0800a6ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d101      	bne.n	800a6be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e09d      	b.n	800a7fa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d108      	bne.n	800a6d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a6ce:	d009      	beq.n	800a6e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	61da      	str	r2, [r3, #28]
 800a6d6:	e005      	b.n	800a6e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d106      	bne.n	800a704 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f7f7 fed4 	bl	80024ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2202      	movs	r2, #2
 800a708:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a71a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a724:	d902      	bls.n	800a72c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a726:	2300      	movs	r3, #0
 800a728:	60fb      	str	r3, [r7, #12]
 800a72a:	e002      	b.n	800a732 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a72c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a730:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	68db      	ldr	r3, [r3, #12]
 800a736:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a73a:	d007      	beq.n	800a74c <HAL_SPI_Init+0xa0>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a744:	d002      	beq.n	800a74c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a75c:	431a      	orrs	r2, r3
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	691b      	ldr	r3, [r3, #16]
 800a762:	f003 0302 	and.w	r3, r3, #2
 800a766:	431a      	orrs	r2, r3
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	695b      	ldr	r3, [r3, #20]
 800a76c:	f003 0301 	and.w	r3, r3, #1
 800a770:	431a      	orrs	r2, r3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	699b      	ldr	r3, [r3, #24]
 800a776:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a77a:	431a      	orrs	r2, r3
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	69db      	ldr	r3, [r3, #28]
 800a780:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a784:	431a      	orrs	r2, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6a1b      	ldr	r3, [r3, #32]
 800a78a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a78e:	ea42 0103 	orr.w	r1, r2, r3
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a796:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	430a      	orrs	r2, r1
 800a7a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	699b      	ldr	r3, [r3, #24]
 800a7a6:	0c1b      	lsrs	r3, r3, #16
 800a7a8:	f003 0204 	and.w	r2, r3, #4
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7b0:	f003 0310 	and.w	r3, r3, #16
 800a7b4:	431a      	orrs	r2, r3
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7ba:	f003 0308 	and.w	r3, r3, #8
 800a7be:	431a      	orrs	r2, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a7c8:	ea42 0103 	orr.w	r1, r2, r3
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	430a      	orrs	r2, r1
 800a7d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	69da      	ldr	r2, [r3, #28]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a7e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800a7f8:	2300      	movs	r3, #0
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3710      	adds	r7, #16
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}

0800a802 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a802:	b580      	push	{r7, lr}
 800a804:	b082      	sub	sp, #8
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d101      	bne.n	800a814 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a810:	2301      	movs	r3, #1
 800a812:	e049      	b.n	800a8a8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d106      	bne.n	800a82e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f7f7 fea1 	bl	8002570 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2202      	movs	r2, #2
 800a832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	3304      	adds	r3, #4
 800a83e:	4619      	mov	r1, r3
 800a840:	4610      	mov	r0, r2
 800a842:	f000 fc11 	bl	800b068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2201      	movs	r2, #1
 800a84a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2201      	movs	r2, #1
 800a852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2201      	movs	r2, #1
 800a85a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2201      	movs	r2, #1
 800a862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2201      	movs	r2, #1
 800a86a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2201      	movs	r2, #1
 800a872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2201      	movs	r2, #1
 800a87a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2201      	movs	r2, #1
 800a882:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2201      	movs	r2, #1
 800a88a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2201      	movs	r2, #1
 800a892:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2201      	movs	r2, #1
 800a89a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a8a6:	2300      	movs	r3, #0
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3708      	adds	r7, #8
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b085      	sub	sp, #20
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d001      	beq.n	800a8c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e054      	b.n	800a972 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2202      	movs	r2, #2
 800a8cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68da      	ldr	r2, [r3, #12]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f042 0201 	orr.w	r2, r2, #1
 800a8de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a26      	ldr	r2, [pc, #152]	@ (800a980 <HAL_TIM_Base_Start_IT+0xd0>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d022      	beq.n	800a930 <HAL_TIM_Base_Start_IT+0x80>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8f2:	d01d      	beq.n	800a930 <HAL_TIM_Base_Start_IT+0x80>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a22      	ldr	r2, [pc, #136]	@ (800a984 <HAL_TIM_Base_Start_IT+0xd4>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d018      	beq.n	800a930 <HAL_TIM_Base_Start_IT+0x80>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a21      	ldr	r2, [pc, #132]	@ (800a988 <HAL_TIM_Base_Start_IT+0xd8>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d013      	beq.n	800a930 <HAL_TIM_Base_Start_IT+0x80>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a1f      	ldr	r2, [pc, #124]	@ (800a98c <HAL_TIM_Base_Start_IT+0xdc>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d00e      	beq.n	800a930 <HAL_TIM_Base_Start_IT+0x80>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a1e      	ldr	r2, [pc, #120]	@ (800a990 <HAL_TIM_Base_Start_IT+0xe0>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d009      	beq.n	800a930 <HAL_TIM_Base_Start_IT+0x80>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a1c      	ldr	r2, [pc, #112]	@ (800a994 <HAL_TIM_Base_Start_IT+0xe4>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d004      	beq.n	800a930 <HAL_TIM_Base_Start_IT+0x80>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a1b      	ldr	r2, [pc, #108]	@ (800a998 <HAL_TIM_Base_Start_IT+0xe8>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d115      	bne.n	800a95c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	689a      	ldr	r2, [r3, #8]
 800a936:	4b19      	ldr	r3, [pc, #100]	@ (800a99c <HAL_TIM_Base_Start_IT+0xec>)
 800a938:	4013      	ands	r3, r2
 800a93a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2b06      	cmp	r3, #6
 800a940:	d015      	beq.n	800a96e <HAL_TIM_Base_Start_IT+0xbe>
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a948:	d011      	beq.n	800a96e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f042 0201 	orr.w	r2, r2, #1
 800a958:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a95a:	e008      	b.n	800a96e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f042 0201 	orr.w	r2, r2, #1
 800a96a:	601a      	str	r2, [r3, #0]
 800a96c:	e000      	b.n	800a970 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a96e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a970:	2300      	movs	r3, #0
}
 800a972:	4618      	mov	r0, r3
 800a974:	3714      	adds	r7, #20
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	40010000 	.word	0x40010000
 800a984:	40000400 	.word	0x40000400
 800a988:	40000800 	.word	0x40000800
 800a98c:	40000c00 	.word	0x40000c00
 800a990:	40010400 	.word	0x40010400
 800a994:	40014000 	.word	0x40014000
 800a998:	40001800 	.word	0x40001800
 800a99c:	00010007 	.word	0x00010007

0800a9a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d101      	bne.n	800a9b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	e049      	b.n	800aa46 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d106      	bne.n	800a9cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f7f7 fe40 	bl	800264c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2202      	movs	r2, #2
 800a9d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681a      	ldr	r2, [r3, #0]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	3304      	adds	r3, #4
 800a9dc:	4619      	mov	r1, r3
 800a9de:	4610      	mov	r0, r2
 800a9e0:	f000 fb42 	bl	800b068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2201      	movs	r2, #1
 800aa08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2201      	movs	r2, #1
 800aa18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2201      	movs	r2, #1
 800aa28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2201      	movs	r2, #1
 800aa38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aa44:	2300      	movs	r3, #0
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3708      	adds	r7, #8
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa4e:	b580      	push	{r7, lr}
 800aa50:	b084      	sub	sp, #16
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	691b      	ldr	r3, [r3, #16]
 800aa64:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	f003 0302 	and.w	r3, r3, #2
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d020      	beq.n	800aab2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f003 0302 	and.w	r3, r3, #2
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d01b      	beq.n	800aab2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f06f 0202 	mvn.w	r2, #2
 800aa82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	699b      	ldr	r3, [r3, #24]
 800aa90:	f003 0303 	and.w	r3, r3, #3
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d003      	beq.n	800aaa0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 fac7 	bl	800b02c <HAL_TIM_IC_CaptureCallback>
 800aa9e:	e005      	b.n	800aaac <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f000 fab9 	bl	800b018 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 faca 	bl	800b040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2200      	movs	r2, #0
 800aab0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	f003 0304 	and.w	r3, r3, #4
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d020      	beq.n	800aafe <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f003 0304 	and.w	r3, r3, #4
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d01b      	beq.n	800aafe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f06f 0204 	mvn.w	r2, #4
 800aace:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2202      	movs	r2, #2
 800aad4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	699b      	ldr	r3, [r3, #24]
 800aadc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d003      	beq.n	800aaec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 faa1 	bl	800b02c <HAL_TIM_IC_CaptureCallback>
 800aaea:	e005      	b.n	800aaf8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 fa93 	bl	800b018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 faa4 	bl	800b040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2200      	movs	r2, #0
 800aafc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	f003 0308 	and.w	r3, r3, #8
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d020      	beq.n	800ab4a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f003 0308 	and.w	r3, r3, #8
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d01b      	beq.n	800ab4a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f06f 0208 	mvn.w	r2, #8
 800ab1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2204      	movs	r2, #4
 800ab20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	69db      	ldr	r3, [r3, #28]
 800ab28:	f003 0303 	and.w	r3, r3, #3
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d003      	beq.n	800ab38 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 fa7b 	bl	800b02c <HAL_TIM_IC_CaptureCallback>
 800ab36:	e005      	b.n	800ab44 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 fa6d 	bl	800b018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 fa7e 	bl	800b040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2200      	movs	r2, #0
 800ab48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	f003 0310 	and.w	r3, r3, #16
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d020      	beq.n	800ab96 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f003 0310 	and.w	r3, r3, #16
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d01b      	beq.n	800ab96 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f06f 0210 	mvn.w	r2, #16
 800ab66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2208      	movs	r2, #8
 800ab6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	69db      	ldr	r3, [r3, #28]
 800ab74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d003      	beq.n	800ab84 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f000 fa55 	bl	800b02c <HAL_TIM_IC_CaptureCallback>
 800ab82:	e005      	b.n	800ab90 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 fa47 	bl	800b018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 fa58 	bl	800b040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2200      	movs	r2, #0
 800ab94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	f003 0301 	and.w	r3, r3, #1
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00c      	beq.n	800abba <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f003 0301 	and.w	r3, r3, #1
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d007      	beq.n	800abba <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f06f 0201 	mvn.w	r2, #1
 800abb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f7f6 ff4f 	bl	8001a58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d104      	bne.n	800abce <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d00c      	beq.n	800abe8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d007      	beq.n	800abe8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800abe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 fef4 	bl	800b9d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d00c      	beq.n	800ac0c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d007      	beq.n	800ac0c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ac04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 feec 	bl	800b9e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d00c      	beq.n	800ac30 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d007      	beq.n	800ac30 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ac28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 fa12 	bl	800b054 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	f003 0320 	and.w	r3, r3, #32
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d00c      	beq.n	800ac54 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f003 0320 	and.w	r3, r3, #32
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d007      	beq.n	800ac54 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f06f 0220 	mvn.w	r2, #32
 800ac4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 feb4 	bl	800b9bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac54:	bf00      	nop
 800ac56:	3710      	adds	r7, #16
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b086      	sub	sp, #24
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	60b9      	str	r1, [r7, #8]
 800ac66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d101      	bne.n	800ac7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ac76:	2302      	movs	r3, #2
 800ac78:	e0ff      	b.n	800ae7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2b14      	cmp	r3, #20
 800ac86:	f200 80f0 	bhi.w	800ae6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ac8a:	a201      	add	r2, pc, #4	@ (adr r2, 800ac90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ac8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac90:	0800ace5 	.word	0x0800ace5
 800ac94:	0800ae6b 	.word	0x0800ae6b
 800ac98:	0800ae6b 	.word	0x0800ae6b
 800ac9c:	0800ae6b 	.word	0x0800ae6b
 800aca0:	0800ad25 	.word	0x0800ad25
 800aca4:	0800ae6b 	.word	0x0800ae6b
 800aca8:	0800ae6b 	.word	0x0800ae6b
 800acac:	0800ae6b 	.word	0x0800ae6b
 800acb0:	0800ad67 	.word	0x0800ad67
 800acb4:	0800ae6b 	.word	0x0800ae6b
 800acb8:	0800ae6b 	.word	0x0800ae6b
 800acbc:	0800ae6b 	.word	0x0800ae6b
 800acc0:	0800ada7 	.word	0x0800ada7
 800acc4:	0800ae6b 	.word	0x0800ae6b
 800acc8:	0800ae6b 	.word	0x0800ae6b
 800accc:	0800ae6b 	.word	0x0800ae6b
 800acd0:	0800ade9 	.word	0x0800ade9
 800acd4:	0800ae6b 	.word	0x0800ae6b
 800acd8:	0800ae6b 	.word	0x0800ae6b
 800acdc:	0800ae6b 	.word	0x0800ae6b
 800ace0:	0800ae29 	.word	0x0800ae29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	68b9      	ldr	r1, [r7, #8]
 800acea:	4618      	mov	r0, r3
 800acec:	f000 fa62 	bl	800b1b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	699a      	ldr	r2, [r3, #24]
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f042 0208 	orr.w	r2, r2, #8
 800acfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	699a      	ldr	r2, [r3, #24]
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f022 0204 	bic.w	r2, r2, #4
 800ad0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	6999      	ldr	r1, [r3, #24]
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	691a      	ldr	r2, [r3, #16]
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	430a      	orrs	r2, r1
 800ad20:	619a      	str	r2, [r3, #24]
      break;
 800ad22:	e0a5      	b.n	800ae70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	68b9      	ldr	r1, [r7, #8]
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f000 fab4 	bl	800b298 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	699a      	ldr	r2, [r3, #24]
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ad3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	699a      	ldr	r2, [r3, #24]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ad4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	6999      	ldr	r1, [r3, #24]
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	691b      	ldr	r3, [r3, #16]
 800ad5a:	021a      	lsls	r2, r3, #8
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	430a      	orrs	r2, r1
 800ad62:	619a      	str	r2, [r3, #24]
      break;
 800ad64:	e084      	b.n	800ae70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	68b9      	ldr	r1, [r7, #8]
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f000 fb0b 	bl	800b388 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	69da      	ldr	r2, [r3, #28]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f042 0208 	orr.w	r2, r2, #8
 800ad80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	69da      	ldr	r2, [r3, #28]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f022 0204 	bic.w	r2, r2, #4
 800ad90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	69d9      	ldr	r1, [r3, #28]
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	691a      	ldr	r2, [r3, #16]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	430a      	orrs	r2, r1
 800ada2:	61da      	str	r2, [r3, #28]
      break;
 800ada4:	e064      	b.n	800ae70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	68b9      	ldr	r1, [r7, #8]
 800adac:	4618      	mov	r0, r3
 800adae:	f000 fb61 	bl	800b474 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	69da      	ldr	r2, [r3, #28]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800adc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	69da      	ldr	r2, [r3, #28]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800add0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	69d9      	ldr	r1, [r3, #28]
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	691b      	ldr	r3, [r3, #16]
 800addc:	021a      	lsls	r2, r3, #8
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	430a      	orrs	r2, r1
 800ade4:	61da      	str	r2, [r3, #28]
      break;
 800ade6:	e043      	b.n	800ae70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	68b9      	ldr	r1, [r7, #8]
 800adee:	4618      	mov	r0, r3
 800adf0:	f000 fb98 	bl	800b524 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f042 0208 	orr.w	r2, r2, #8
 800ae02:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f022 0204 	bic.w	r2, r2, #4
 800ae12:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	691a      	ldr	r2, [r3, #16]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	430a      	orrs	r2, r1
 800ae24:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ae26:	e023      	b.n	800ae70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	68b9      	ldr	r1, [r7, #8]
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f000 fbca 	bl	800b5c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ae42:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ae52:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	691b      	ldr	r3, [r3, #16]
 800ae5e:	021a      	lsls	r2, r3, #8
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	430a      	orrs	r2, r1
 800ae66:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ae68:	e002      	b.n	800ae70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	75fb      	strb	r3, [r7, #23]
      break;
 800ae6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ae78:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3718      	adds	r7, #24
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop

0800ae84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d101      	bne.n	800aea0 <HAL_TIM_ConfigClockSource+0x1c>
 800ae9c:	2302      	movs	r3, #2
 800ae9e:	e0b4      	b.n	800b00a <HAL_TIM_ConfigClockSource+0x186>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2201      	movs	r2, #1
 800aea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2202      	movs	r2, #2
 800aeac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aeb8:	68ba      	ldr	r2, [r7, #8]
 800aeba:	4b56      	ldr	r3, [pc, #344]	@ (800b014 <HAL_TIM_ConfigClockSource+0x190>)
 800aebc:	4013      	ands	r3, r2
 800aebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aec6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	68ba      	ldr	r2, [r7, #8]
 800aece:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aed8:	d03e      	beq.n	800af58 <HAL_TIM_ConfigClockSource+0xd4>
 800aeda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aede:	f200 8087 	bhi.w	800aff0 <HAL_TIM_ConfigClockSource+0x16c>
 800aee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aee6:	f000 8086 	beq.w	800aff6 <HAL_TIM_ConfigClockSource+0x172>
 800aeea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aeee:	d87f      	bhi.n	800aff0 <HAL_TIM_ConfigClockSource+0x16c>
 800aef0:	2b70      	cmp	r3, #112	@ 0x70
 800aef2:	d01a      	beq.n	800af2a <HAL_TIM_ConfigClockSource+0xa6>
 800aef4:	2b70      	cmp	r3, #112	@ 0x70
 800aef6:	d87b      	bhi.n	800aff0 <HAL_TIM_ConfigClockSource+0x16c>
 800aef8:	2b60      	cmp	r3, #96	@ 0x60
 800aefa:	d050      	beq.n	800af9e <HAL_TIM_ConfigClockSource+0x11a>
 800aefc:	2b60      	cmp	r3, #96	@ 0x60
 800aefe:	d877      	bhi.n	800aff0 <HAL_TIM_ConfigClockSource+0x16c>
 800af00:	2b50      	cmp	r3, #80	@ 0x50
 800af02:	d03c      	beq.n	800af7e <HAL_TIM_ConfigClockSource+0xfa>
 800af04:	2b50      	cmp	r3, #80	@ 0x50
 800af06:	d873      	bhi.n	800aff0 <HAL_TIM_ConfigClockSource+0x16c>
 800af08:	2b40      	cmp	r3, #64	@ 0x40
 800af0a:	d058      	beq.n	800afbe <HAL_TIM_ConfigClockSource+0x13a>
 800af0c:	2b40      	cmp	r3, #64	@ 0x40
 800af0e:	d86f      	bhi.n	800aff0 <HAL_TIM_ConfigClockSource+0x16c>
 800af10:	2b30      	cmp	r3, #48	@ 0x30
 800af12:	d064      	beq.n	800afde <HAL_TIM_ConfigClockSource+0x15a>
 800af14:	2b30      	cmp	r3, #48	@ 0x30
 800af16:	d86b      	bhi.n	800aff0 <HAL_TIM_ConfigClockSource+0x16c>
 800af18:	2b20      	cmp	r3, #32
 800af1a:	d060      	beq.n	800afde <HAL_TIM_ConfigClockSource+0x15a>
 800af1c:	2b20      	cmp	r3, #32
 800af1e:	d867      	bhi.n	800aff0 <HAL_TIM_ConfigClockSource+0x16c>
 800af20:	2b00      	cmp	r3, #0
 800af22:	d05c      	beq.n	800afde <HAL_TIM_ConfigClockSource+0x15a>
 800af24:	2b10      	cmp	r3, #16
 800af26:	d05a      	beq.n	800afde <HAL_TIM_ConfigClockSource+0x15a>
 800af28:	e062      	b.n	800aff0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800af3a:	f000 fc13 	bl	800b764 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800af4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	68ba      	ldr	r2, [r7, #8]
 800af54:	609a      	str	r2, [r3, #8]
      break;
 800af56:	e04f      	b.n	800aff8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800af68:	f000 fbfc 	bl	800b764 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	689a      	ldr	r2, [r3, #8]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800af7a:	609a      	str	r2, [r3, #8]
      break;
 800af7c:	e03c      	b.n	800aff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800af8a:	461a      	mov	r2, r3
 800af8c:	f000 fb70 	bl	800b670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2150      	movs	r1, #80	@ 0x50
 800af96:	4618      	mov	r0, r3
 800af98:	f000 fbc9 	bl	800b72e <TIM_ITRx_SetConfig>
      break;
 800af9c:	e02c      	b.n	800aff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800afaa:	461a      	mov	r2, r3
 800afac:	f000 fb8f 	bl	800b6ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	2160      	movs	r1, #96	@ 0x60
 800afb6:	4618      	mov	r0, r3
 800afb8:	f000 fbb9 	bl	800b72e <TIM_ITRx_SetConfig>
      break;
 800afbc:	e01c      	b.n	800aff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800afca:	461a      	mov	r2, r3
 800afcc:	f000 fb50 	bl	800b670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	2140      	movs	r1, #64	@ 0x40
 800afd6:	4618      	mov	r0, r3
 800afd8:	f000 fba9 	bl	800b72e <TIM_ITRx_SetConfig>
      break;
 800afdc:	e00c      	b.n	800aff8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4619      	mov	r1, r3
 800afe8:	4610      	mov	r0, r2
 800afea:	f000 fba0 	bl	800b72e <TIM_ITRx_SetConfig>
      break;
 800afee:	e003      	b.n	800aff8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800aff0:	2301      	movs	r3, #1
 800aff2:	73fb      	strb	r3, [r7, #15]
      break;
 800aff4:	e000      	b.n	800aff8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800aff6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2201      	movs	r2, #1
 800affc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b008:	7bfb      	ldrb	r3, [r7, #15]
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3710      	adds	r7, #16
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
 800b012:	bf00      	nop
 800b014:	fffeff88 	.word	0xfffeff88

0800b018 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b018:	b480      	push	{r7}
 800b01a:	b083      	sub	sp, #12
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b020:	bf00      	nop
 800b022:	370c      	adds	r7, #12
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr

0800b02c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b083      	sub	sp, #12
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b034:	bf00      	nop
 800b036:	370c      	adds	r7, #12
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr

0800b040 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b048:	bf00      	nop
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr

0800b054 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b05c:	bf00      	nop
 800b05e:	370c      	adds	r7, #12
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b068:	b480      	push	{r7}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	4a43      	ldr	r2, [pc, #268]	@ (800b188 <TIM_Base_SetConfig+0x120>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d013      	beq.n	800b0a8 <TIM_Base_SetConfig+0x40>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b086:	d00f      	beq.n	800b0a8 <TIM_Base_SetConfig+0x40>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	4a40      	ldr	r2, [pc, #256]	@ (800b18c <TIM_Base_SetConfig+0x124>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d00b      	beq.n	800b0a8 <TIM_Base_SetConfig+0x40>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	4a3f      	ldr	r2, [pc, #252]	@ (800b190 <TIM_Base_SetConfig+0x128>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d007      	beq.n	800b0a8 <TIM_Base_SetConfig+0x40>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	4a3e      	ldr	r2, [pc, #248]	@ (800b194 <TIM_Base_SetConfig+0x12c>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d003      	beq.n	800b0a8 <TIM_Base_SetConfig+0x40>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	4a3d      	ldr	r2, [pc, #244]	@ (800b198 <TIM_Base_SetConfig+0x130>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d108      	bne.n	800b0ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	68fa      	ldr	r2, [r7, #12]
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	4a32      	ldr	r2, [pc, #200]	@ (800b188 <TIM_Base_SetConfig+0x120>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d02b      	beq.n	800b11a <TIM_Base_SetConfig+0xb2>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0c8:	d027      	beq.n	800b11a <TIM_Base_SetConfig+0xb2>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	4a2f      	ldr	r2, [pc, #188]	@ (800b18c <TIM_Base_SetConfig+0x124>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d023      	beq.n	800b11a <TIM_Base_SetConfig+0xb2>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	4a2e      	ldr	r2, [pc, #184]	@ (800b190 <TIM_Base_SetConfig+0x128>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d01f      	beq.n	800b11a <TIM_Base_SetConfig+0xb2>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	4a2d      	ldr	r2, [pc, #180]	@ (800b194 <TIM_Base_SetConfig+0x12c>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d01b      	beq.n	800b11a <TIM_Base_SetConfig+0xb2>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	4a2c      	ldr	r2, [pc, #176]	@ (800b198 <TIM_Base_SetConfig+0x130>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d017      	beq.n	800b11a <TIM_Base_SetConfig+0xb2>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	4a2b      	ldr	r2, [pc, #172]	@ (800b19c <TIM_Base_SetConfig+0x134>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d013      	beq.n	800b11a <TIM_Base_SetConfig+0xb2>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	4a2a      	ldr	r2, [pc, #168]	@ (800b1a0 <TIM_Base_SetConfig+0x138>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d00f      	beq.n	800b11a <TIM_Base_SetConfig+0xb2>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	4a29      	ldr	r2, [pc, #164]	@ (800b1a4 <TIM_Base_SetConfig+0x13c>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d00b      	beq.n	800b11a <TIM_Base_SetConfig+0xb2>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4a28      	ldr	r2, [pc, #160]	@ (800b1a8 <TIM_Base_SetConfig+0x140>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d007      	beq.n	800b11a <TIM_Base_SetConfig+0xb2>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	4a27      	ldr	r2, [pc, #156]	@ (800b1ac <TIM_Base_SetConfig+0x144>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d003      	beq.n	800b11a <TIM_Base_SetConfig+0xb2>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	4a26      	ldr	r2, [pc, #152]	@ (800b1b0 <TIM_Base_SetConfig+0x148>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d108      	bne.n	800b12c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b120:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	68fa      	ldr	r2, [r7, #12]
 800b128:	4313      	orrs	r3, r2
 800b12a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	695b      	ldr	r3, [r3, #20]
 800b136:	4313      	orrs	r3, r2
 800b138:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	689a      	ldr	r2, [r3, #8]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	4a0e      	ldr	r2, [pc, #56]	@ (800b188 <TIM_Base_SetConfig+0x120>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d003      	beq.n	800b15a <TIM_Base_SetConfig+0xf2>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	4a10      	ldr	r2, [pc, #64]	@ (800b198 <TIM_Base_SetConfig+0x130>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d103      	bne.n	800b162 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	691a      	ldr	r2, [r3, #16]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f043 0204 	orr.w	r2, r3, #4
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2201      	movs	r2, #1
 800b172:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	68fa      	ldr	r2, [r7, #12]
 800b178:	601a      	str	r2, [r3, #0]
}
 800b17a:	bf00      	nop
 800b17c:	3714      	adds	r7, #20
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr
 800b186:	bf00      	nop
 800b188:	40010000 	.word	0x40010000
 800b18c:	40000400 	.word	0x40000400
 800b190:	40000800 	.word	0x40000800
 800b194:	40000c00 	.word	0x40000c00
 800b198:	40010400 	.word	0x40010400
 800b19c:	40014000 	.word	0x40014000
 800b1a0:	40014400 	.word	0x40014400
 800b1a4:	40014800 	.word	0x40014800
 800b1a8:	40001800 	.word	0x40001800
 800b1ac:	40001c00 	.word	0x40001c00
 800b1b0:	40002000 	.word	0x40002000

0800b1b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b087      	sub	sp, #28
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a1b      	ldr	r3, [r3, #32]
 800b1c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6a1b      	ldr	r3, [r3, #32]
 800b1c8:	f023 0201 	bic.w	r2, r3, #1
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	699b      	ldr	r3, [r3, #24]
 800b1da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b1dc:	68fa      	ldr	r2, [r7, #12]
 800b1de:	4b2b      	ldr	r3, [pc, #172]	@ (800b28c <TIM_OC1_SetConfig+0xd8>)
 800b1e0:	4013      	ands	r3, r2
 800b1e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f023 0303 	bic.w	r3, r3, #3
 800b1ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	68fa      	ldr	r2, [r7, #12]
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	f023 0302 	bic.w	r3, r3, #2
 800b1fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	689b      	ldr	r3, [r3, #8]
 800b202:	697a      	ldr	r2, [r7, #20]
 800b204:	4313      	orrs	r3, r2
 800b206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	4a21      	ldr	r2, [pc, #132]	@ (800b290 <TIM_OC1_SetConfig+0xdc>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d003      	beq.n	800b218 <TIM_OC1_SetConfig+0x64>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	4a20      	ldr	r2, [pc, #128]	@ (800b294 <TIM_OC1_SetConfig+0xe0>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d10c      	bne.n	800b232 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	f023 0308 	bic.w	r3, r3, #8
 800b21e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	697a      	ldr	r2, [r7, #20]
 800b226:	4313      	orrs	r3, r2
 800b228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	f023 0304 	bic.w	r3, r3, #4
 800b230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	4a16      	ldr	r2, [pc, #88]	@ (800b290 <TIM_OC1_SetConfig+0xdc>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d003      	beq.n	800b242 <TIM_OC1_SetConfig+0x8e>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	4a15      	ldr	r2, [pc, #84]	@ (800b294 <TIM_OC1_SetConfig+0xe0>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d111      	bne.n	800b266 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	695b      	ldr	r3, [r3, #20]
 800b256:	693a      	ldr	r2, [r7, #16]
 800b258:	4313      	orrs	r3, r2
 800b25a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	699b      	ldr	r3, [r3, #24]
 800b260:	693a      	ldr	r2, [r7, #16]
 800b262:	4313      	orrs	r3, r2
 800b264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	693a      	ldr	r2, [r7, #16]
 800b26a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	68fa      	ldr	r2, [r7, #12]
 800b270:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	685a      	ldr	r2, [r3, #4]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	697a      	ldr	r2, [r7, #20]
 800b27e:	621a      	str	r2, [r3, #32]
}
 800b280:	bf00      	nop
 800b282:	371c      	adds	r7, #28
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr
 800b28c:	fffeff8f 	.word	0xfffeff8f
 800b290:	40010000 	.word	0x40010000
 800b294:	40010400 	.word	0x40010400

0800b298 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b298:	b480      	push	{r7}
 800b29a:	b087      	sub	sp, #28
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6a1b      	ldr	r3, [r3, #32]
 800b2a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6a1b      	ldr	r3, [r3, #32]
 800b2ac:	f023 0210 	bic.w	r2, r3, #16
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	699b      	ldr	r3, [r3, #24]
 800b2be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b2c0:	68fa      	ldr	r2, [r7, #12]
 800b2c2:	4b2e      	ldr	r3, [pc, #184]	@ (800b37c <TIM_OC2_SetConfig+0xe4>)
 800b2c4:	4013      	ands	r3, r2
 800b2c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b2ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	021b      	lsls	r3, r3, #8
 800b2d6:	68fa      	ldr	r2, [r7, #12]
 800b2d8:	4313      	orrs	r3, r2
 800b2da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	f023 0320 	bic.w	r3, r3, #32
 800b2e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	689b      	ldr	r3, [r3, #8]
 800b2e8:	011b      	lsls	r3, r3, #4
 800b2ea:	697a      	ldr	r2, [r7, #20]
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	4a23      	ldr	r2, [pc, #140]	@ (800b380 <TIM_OC2_SetConfig+0xe8>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d003      	beq.n	800b300 <TIM_OC2_SetConfig+0x68>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	4a22      	ldr	r2, [pc, #136]	@ (800b384 <TIM_OC2_SetConfig+0xec>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d10d      	bne.n	800b31c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	011b      	lsls	r3, r3, #4
 800b30e:	697a      	ldr	r2, [r7, #20]
 800b310:	4313      	orrs	r3, r2
 800b312:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b31a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	4a18      	ldr	r2, [pc, #96]	@ (800b380 <TIM_OC2_SetConfig+0xe8>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d003      	beq.n	800b32c <TIM_OC2_SetConfig+0x94>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	4a17      	ldr	r2, [pc, #92]	@ (800b384 <TIM_OC2_SetConfig+0xec>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d113      	bne.n	800b354 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b332:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b33a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	695b      	ldr	r3, [r3, #20]
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	693a      	ldr	r2, [r7, #16]
 800b344:	4313      	orrs	r3, r2
 800b346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	699b      	ldr	r3, [r3, #24]
 800b34c:	009b      	lsls	r3, r3, #2
 800b34e:	693a      	ldr	r2, [r7, #16]
 800b350:	4313      	orrs	r3, r2
 800b352:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	693a      	ldr	r2, [r7, #16]
 800b358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	68fa      	ldr	r2, [r7, #12]
 800b35e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	685a      	ldr	r2, [r3, #4]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	697a      	ldr	r2, [r7, #20]
 800b36c:	621a      	str	r2, [r3, #32]
}
 800b36e:	bf00      	nop
 800b370:	371c      	adds	r7, #28
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop
 800b37c:	feff8fff 	.word	0xfeff8fff
 800b380:	40010000 	.word	0x40010000
 800b384:	40010400 	.word	0x40010400

0800b388 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b388:	b480      	push	{r7}
 800b38a:	b087      	sub	sp, #28
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6a1b      	ldr	r3, [r3, #32]
 800b396:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6a1b      	ldr	r3, [r3, #32]
 800b39c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	69db      	ldr	r3, [r3, #28]
 800b3ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b3b0:	68fa      	ldr	r2, [r7, #12]
 800b3b2:	4b2d      	ldr	r3, [pc, #180]	@ (800b468 <TIM_OC3_SetConfig+0xe0>)
 800b3b4:	4013      	ands	r3, r2
 800b3b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f023 0303 	bic.w	r3, r3, #3
 800b3be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	68fa      	ldr	r2, [r7, #12]
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b3d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	689b      	ldr	r3, [r3, #8]
 800b3d6:	021b      	lsls	r3, r3, #8
 800b3d8:	697a      	ldr	r2, [r7, #20]
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	4a22      	ldr	r2, [pc, #136]	@ (800b46c <TIM_OC3_SetConfig+0xe4>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d003      	beq.n	800b3ee <TIM_OC3_SetConfig+0x66>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	4a21      	ldr	r2, [pc, #132]	@ (800b470 <TIM_OC3_SetConfig+0xe8>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d10d      	bne.n	800b40a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b3f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	68db      	ldr	r3, [r3, #12]
 800b3fa:	021b      	lsls	r3, r3, #8
 800b3fc:	697a      	ldr	r2, [r7, #20]
 800b3fe:	4313      	orrs	r3, r2
 800b400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	4a17      	ldr	r2, [pc, #92]	@ (800b46c <TIM_OC3_SetConfig+0xe4>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d003      	beq.n	800b41a <TIM_OC3_SetConfig+0x92>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	4a16      	ldr	r2, [pc, #88]	@ (800b470 <TIM_OC3_SetConfig+0xe8>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d113      	bne.n	800b442 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	695b      	ldr	r3, [r3, #20]
 800b42e:	011b      	lsls	r3, r3, #4
 800b430:	693a      	ldr	r2, [r7, #16]
 800b432:	4313      	orrs	r3, r2
 800b434:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	699b      	ldr	r3, [r3, #24]
 800b43a:	011b      	lsls	r3, r3, #4
 800b43c:	693a      	ldr	r2, [r7, #16]
 800b43e:	4313      	orrs	r3, r2
 800b440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	693a      	ldr	r2, [r7, #16]
 800b446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	68fa      	ldr	r2, [r7, #12]
 800b44c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	685a      	ldr	r2, [r3, #4]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	697a      	ldr	r2, [r7, #20]
 800b45a:	621a      	str	r2, [r3, #32]
}
 800b45c:	bf00      	nop
 800b45e:	371c      	adds	r7, #28
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr
 800b468:	fffeff8f 	.word	0xfffeff8f
 800b46c:	40010000 	.word	0x40010000
 800b470:	40010400 	.word	0x40010400

0800b474 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b474:	b480      	push	{r7}
 800b476:	b087      	sub	sp, #28
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6a1b      	ldr	r3, [r3, #32]
 800b482:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6a1b      	ldr	r3, [r3, #32]
 800b488:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	69db      	ldr	r3, [r3, #28]
 800b49a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b49c:	68fa      	ldr	r2, [r7, #12]
 800b49e:	4b1e      	ldr	r3, [pc, #120]	@ (800b518 <TIM_OC4_SetConfig+0xa4>)
 800b4a0:	4013      	ands	r3, r2
 800b4a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b4aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	021b      	lsls	r3, r3, #8
 800b4b2:	68fa      	ldr	r2, [r7, #12]
 800b4b4:	4313      	orrs	r3, r2
 800b4b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b4be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	031b      	lsls	r3, r3, #12
 800b4c6:	693a      	ldr	r2, [r7, #16]
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	4a13      	ldr	r2, [pc, #76]	@ (800b51c <TIM_OC4_SetConfig+0xa8>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d003      	beq.n	800b4dc <TIM_OC4_SetConfig+0x68>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	4a12      	ldr	r2, [pc, #72]	@ (800b520 <TIM_OC4_SetConfig+0xac>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d109      	bne.n	800b4f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b4e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	695b      	ldr	r3, [r3, #20]
 800b4e8:	019b      	lsls	r3, r3, #6
 800b4ea:	697a      	ldr	r2, [r7, #20]
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	697a      	ldr	r2, [r7, #20]
 800b4f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	68fa      	ldr	r2, [r7, #12]
 800b4fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	685a      	ldr	r2, [r3, #4]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	693a      	ldr	r2, [r7, #16]
 800b508:	621a      	str	r2, [r3, #32]
}
 800b50a:	bf00      	nop
 800b50c:	371c      	adds	r7, #28
 800b50e:	46bd      	mov	sp, r7
 800b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b514:	4770      	bx	lr
 800b516:	bf00      	nop
 800b518:	feff8fff 	.word	0xfeff8fff
 800b51c:	40010000 	.word	0x40010000
 800b520:	40010400 	.word	0x40010400

0800b524 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b524:	b480      	push	{r7}
 800b526:	b087      	sub	sp, #28
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6a1b      	ldr	r3, [r3, #32]
 800b532:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6a1b      	ldr	r3, [r3, #32]
 800b538:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b54a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b54c:	68fa      	ldr	r2, [r7, #12]
 800b54e:	4b1b      	ldr	r3, [pc, #108]	@ (800b5bc <TIM_OC5_SetConfig+0x98>)
 800b550:	4013      	ands	r3, r2
 800b552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	68fa      	ldr	r2, [r7, #12]
 800b55a:	4313      	orrs	r3, r2
 800b55c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b564:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	689b      	ldr	r3, [r3, #8]
 800b56a:	041b      	lsls	r3, r3, #16
 800b56c:	693a      	ldr	r2, [r7, #16]
 800b56e:	4313      	orrs	r3, r2
 800b570:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	4a12      	ldr	r2, [pc, #72]	@ (800b5c0 <TIM_OC5_SetConfig+0x9c>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d003      	beq.n	800b582 <TIM_OC5_SetConfig+0x5e>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	4a11      	ldr	r2, [pc, #68]	@ (800b5c4 <TIM_OC5_SetConfig+0xa0>)
 800b57e:	4293      	cmp	r3, r2
 800b580:	d109      	bne.n	800b596 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b588:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	695b      	ldr	r3, [r3, #20]
 800b58e:	021b      	lsls	r3, r3, #8
 800b590:	697a      	ldr	r2, [r7, #20]
 800b592:	4313      	orrs	r3, r2
 800b594:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	697a      	ldr	r2, [r7, #20]
 800b59a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	68fa      	ldr	r2, [r7, #12]
 800b5a0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	685a      	ldr	r2, [r3, #4]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	693a      	ldr	r2, [r7, #16]
 800b5ae:	621a      	str	r2, [r3, #32]
}
 800b5b0:	bf00      	nop
 800b5b2:	371c      	adds	r7, #28
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr
 800b5bc:	fffeff8f 	.word	0xfffeff8f
 800b5c0:	40010000 	.word	0x40010000
 800b5c4:	40010400 	.word	0x40010400

0800b5c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b087      	sub	sp, #28
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6a1b      	ldr	r3, [r3, #32]
 800b5d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6a1b      	ldr	r3, [r3, #32]
 800b5dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	685b      	ldr	r3, [r3, #4]
 800b5e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b5f0:	68fa      	ldr	r2, [r7, #12]
 800b5f2:	4b1c      	ldr	r3, [pc, #112]	@ (800b664 <TIM_OC6_SetConfig+0x9c>)
 800b5f4:	4013      	ands	r3, r2
 800b5f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	021b      	lsls	r3, r3, #8
 800b5fe:	68fa      	ldr	r2, [r7, #12]
 800b600:	4313      	orrs	r3, r2
 800b602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b60a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	689b      	ldr	r3, [r3, #8]
 800b610:	051b      	lsls	r3, r3, #20
 800b612:	693a      	ldr	r2, [r7, #16]
 800b614:	4313      	orrs	r3, r2
 800b616:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4a13      	ldr	r2, [pc, #76]	@ (800b668 <TIM_OC6_SetConfig+0xa0>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d003      	beq.n	800b628 <TIM_OC6_SetConfig+0x60>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	4a12      	ldr	r2, [pc, #72]	@ (800b66c <TIM_OC6_SetConfig+0xa4>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d109      	bne.n	800b63c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b62e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	695b      	ldr	r3, [r3, #20]
 800b634:	029b      	lsls	r3, r3, #10
 800b636:	697a      	ldr	r2, [r7, #20]
 800b638:	4313      	orrs	r3, r2
 800b63a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	697a      	ldr	r2, [r7, #20]
 800b640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	68fa      	ldr	r2, [r7, #12]
 800b646:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	685a      	ldr	r2, [r3, #4]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	693a      	ldr	r2, [r7, #16]
 800b654:	621a      	str	r2, [r3, #32]
}
 800b656:	bf00      	nop
 800b658:	371c      	adds	r7, #28
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr
 800b662:	bf00      	nop
 800b664:	feff8fff 	.word	0xfeff8fff
 800b668:	40010000 	.word	0x40010000
 800b66c:	40010400 	.word	0x40010400

0800b670 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b670:	b480      	push	{r7}
 800b672:	b087      	sub	sp, #28
 800b674:	af00      	add	r7, sp, #0
 800b676:	60f8      	str	r0, [r7, #12]
 800b678:	60b9      	str	r1, [r7, #8]
 800b67a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	6a1b      	ldr	r3, [r3, #32]
 800b680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	6a1b      	ldr	r3, [r3, #32]
 800b686:	f023 0201 	bic.w	r2, r3, #1
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	699b      	ldr	r3, [r3, #24]
 800b692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b69a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	011b      	lsls	r3, r3, #4
 800b6a0:	693a      	ldr	r2, [r7, #16]
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	f023 030a 	bic.w	r3, r3, #10
 800b6ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b6ae:	697a      	ldr	r2, [r7, #20]
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	693a      	ldr	r2, [r7, #16]
 800b6ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	697a      	ldr	r2, [r7, #20]
 800b6c0:	621a      	str	r2, [r3, #32]
}
 800b6c2:	bf00      	nop
 800b6c4:	371c      	adds	r7, #28
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr

0800b6ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6ce:	b480      	push	{r7}
 800b6d0:	b087      	sub	sp, #28
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	60f8      	str	r0, [r7, #12]
 800b6d6:	60b9      	str	r1, [r7, #8]
 800b6d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	6a1b      	ldr	r3, [r3, #32]
 800b6de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	6a1b      	ldr	r3, [r3, #32]
 800b6e4:	f023 0210 	bic.w	r2, r3, #16
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	699b      	ldr	r3, [r3, #24]
 800b6f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b6f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	031b      	lsls	r3, r3, #12
 800b6fe:	693a      	ldr	r2, [r7, #16]
 800b700:	4313      	orrs	r3, r2
 800b702:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b70a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	011b      	lsls	r3, r3, #4
 800b710:	697a      	ldr	r2, [r7, #20]
 800b712:	4313      	orrs	r3, r2
 800b714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	693a      	ldr	r2, [r7, #16]
 800b71a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	697a      	ldr	r2, [r7, #20]
 800b720:	621a      	str	r2, [r3, #32]
}
 800b722:	bf00      	nop
 800b724:	371c      	adds	r7, #28
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr

0800b72e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b72e:	b480      	push	{r7}
 800b730:	b085      	sub	sp, #20
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
 800b736:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	689b      	ldr	r3, [r3, #8]
 800b73c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b744:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b746:	683a      	ldr	r2, [r7, #0]
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	4313      	orrs	r3, r2
 800b74c:	f043 0307 	orr.w	r3, r3, #7
 800b750:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	68fa      	ldr	r2, [r7, #12]
 800b756:	609a      	str	r2, [r3, #8]
}
 800b758:	bf00      	nop
 800b75a:	3714      	adds	r7, #20
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b764:	b480      	push	{r7}
 800b766:	b087      	sub	sp, #28
 800b768:	af00      	add	r7, sp, #0
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	60b9      	str	r1, [r7, #8]
 800b76e:	607a      	str	r2, [r7, #4]
 800b770:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	689b      	ldr	r3, [r3, #8]
 800b776:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b77e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	021a      	lsls	r2, r3, #8
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	431a      	orrs	r2, r3
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	4313      	orrs	r3, r2
 800b78c:	697a      	ldr	r2, [r7, #20]
 800b78e:	4313      	orrs	r3, r2
 800b790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	697a      	ldr	r2, [r7, #20]
 800b796:	609a      	str	r2, [r3, #8]
}
 800b798:	bf00      	nop
 800b79a:	371c      	adds	r7, #28
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr

0800b7a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b085      	sub	sp, #20
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b7b4:	2b01      	cmp	r3, #1
 800b7b6:	d101      	bne.n	800b7bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b7b8:	2302      	movs	r3, #2
 800b7ba:	e06d      	b.n	800b898 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2201      	movs	r2, #1
 800b7c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2202      	movs	r2, #2
 800b7c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a30      	ldr	r2, [pc, #192]	@ (800b8a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d004      	beq.n	800b7f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	4a2f      	ldr	r2, [pc, #188]	@ (800b8a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d108      	bne.n	800b802 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b7f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	68fa      	ldr	r2, [r7, #12]
 800b7fe:	4313      	orrs	r3, r2
 800b800:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b808:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	68fa      	ldr	r2, [r7, #12]
 800b810:	4313      	orrs	r3, r2
 800b812:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	68fa      	ldr	r2, [r7, #12]
 800b81a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a20      	ldr	r2, [pc, #128]	@ (800b8a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d022      	beq.n	800b86c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b82e:	d01d      	beq.n	800b86c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a1d      	ldr	r2, [pc, #116]	@ (800b8ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d018      	beq.n	800b86c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4a1c      	ldr	r2, [pc, #112]	@ (800b8b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d013      	beq.n	800b86c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4a1a      	ldr	r2, [pc, #104]	@ (800b8b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d00e      	beq.n	800b86c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4a15      	ldr	r2, [pc, #84]	@ (800b8a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d009      	beq.n	800b86c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a16      	ldr	r2, [pc, #88]	@ (800b8b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d004      	beq.n	800b86c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a15      	ldr	r2, [pc, #84]	@ (800b8bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d10c      	bne.n	800b886 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b872:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	689b      	ldr	r3, [r3, #8]
 800b878:	68ba      	ldr	r2, [r7, #8]
 800b87a:	4313      	orrs	r3, r2
 800b87c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	68ba      	ldr	r2, [r7, #8]
 800b884:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2201      	movs	r2, #1
 800b88a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b896:	2300      	movs	r3, #0
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3714      	adds	r7, #20
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr
 800b8a4:	40010000 	.word	0x40010000
 800b8a8:	40010400 	.word	0x40010400
 800b8ac:	40000400 	.word	0x40000400
 800b8b0:	40000800 	.word	0x40000800
 800b8b4:	40000c00 	.word	0x40000c00
 800b8b8:	40014000 	.word	0x40014000
 800b8bc:	40001800 	.word	0x40001800

0800b8c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b085      	sub	sp, #20
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d101      	bne.n	800b8dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b8d8:	2302      	movs	r3, #2
 800b8da:	e065      	b.n	800b9a8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2201      	movs	r2, #1
 800b8e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	4313      	orrs	r3, r2
 800b8f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	689b      	ldr	r3, [r3, #8]
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	4313      	orrs	r3, r2
 800b90c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4313      	orrs	r3, r2
 800b91a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	691b      	ldr	r3, [r3, #16]
 800b926:	4313      	orrs	r3, r2
 800b928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	695b      	ldr	r3, [r3, #20]
 800b934:	4313      	orrs	r3, r2
 800b936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b942:	4313      	orrs	r3, r2
 800b944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	699b      	ldr	r3, [r3, #24]
 800b950:	041b      	lsls	r3, r3, #16
 800b952:	4313      	orrs	r3, r2
 800b954:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4a16      	ldr	r2, [pc, #88]	@ (800b9b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d004      	beq.n	800b96a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4a14      	ldr	r2, [pc, #80]	@ (800b9b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d115      	bne.n	800b996 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b974:	051b      	lsls	r3, r3, #20
 800b976:	4313      	orrs	r3, r2
 800b978:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	69db      	ldr	r3, [r3, #28]
 800b984:	4313      	orrs	r3, r2
 800b986:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	6a1b      	ldr	r3, [r3, #32]
 800b992:	4313      	orrs	r3, r2
 800b994:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	68fa      	ldr	r2, [r7, #12]
 800b99c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b9a6:	2300      	movs	r3, #0
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3714      	adds	r7, #20
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr
 800b9b4:	40010000 	.word	0x40010000
 800b9b8:	40010400 	.word	0x40010400

0800b9bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b9c4:	bf00      	nop
 800b9c6:	370c      	adds	r7, #12
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr

0800b9d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b083      	sub	sp, #12
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b9d8:	bf00      	nop
 800b9da:	370c      	adds	r7, #12
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr

0800b9e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b9ec:	bf00      	nop
 800b9ee:	370c      	adds	r7, #12
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr

0800b9f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d101      	bne.n	800ba0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba06:	2301      	movs	r3, #1
 800ba08:	e040      	b.n	800ba8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d106      	bne.n	800ba20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2200      	movs	r2, #0
 800ba16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f7f6 ff04 	bl	8002828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2224      	movs	r2, #36	@ 0x24
 800ba24:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f022 0201 	bic.w	r2, r2, #1
 800ba34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d002      	beq.n	800ba44 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f000 fa8c 	bl	800bf5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 f825 	bl	800ba94 <UART_SetConfig>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d101      	bne.n	800ba54 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800ba50:	2301      	movs	r3, #1
 800ba52:	e01b      	b.n	800ba8c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	685a      	ldr	r2, [r3, #4]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ba62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	689a      	ldr	r2, [r3, #8]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ba72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f042 0201 	orr.w	r2, r2, #1
 800ba82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 fb0b 	bl	800c0a0 <UART_CheckIdleState>
 800ba8a:	4603      	mov	r3, r0
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3708      	adds	r7, #8
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b088      	sub	sp, #32
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	689a      	ldr	r2, [r3, #8]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	691b      	ldr	r3, [r3, #16]
 800baa8:	431a      	orrs	r2, r3
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	695b      	ldr	r3, [r3, #20]
 800baae:	431a      	orrs	r2, r3
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	69db      	ldr	r3, [r3, #28]
 800bab4:	4313      	orrs	r3, r2
 800bab6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	4ba6      	ldr	r3, [pc, #664]	@ (800bd58 <UART_SetConfig+0x2c4>)
 800bac0:	4013      	ands	r3, r2
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	6812      	ldr	r2, [r2, #0]
 800bac6:	6979      	ldr	r1, [r7, #20]
 800bac8:	430b      	orrs	r3, r1
 800baca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	68da      	ldr	r2, [r3, #12]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	430a      	orrs	r2, r1
 800bae0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	699b      	ldr	r3, [r3, #24]
 800bae6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6a1b      	ldr	r3, [r3, #32]
 800baec:	697a      	ldr	r2, [r7, #20]
 800baee:	4313      	orrs	r3, r2
 800baf0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	697a      	ldr	r2, [r7, #20]
 800bb02:	430a      	orrs	r2, r1
 800bb04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a94      	ldr	r2, [pc, #592]	@ (800bd5c <UART_SetConfig+0x2c8>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d120      	bne.n	800bb52 <UART_SetConfig+0xbe>
 800bb10:	4b93      	ldr	r3, [pc, #588]	@ (800bd60 <UART_SetConfig+0x2cc>)
 800bb12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb16:	f003 0303 	and.w	r3, r3, #3
 800bb1a:	2b03      	cmp	r3, #3
 800bb1c:	d816      	bhi.n	800bb4c <UART_SetConfig+0xb8>
 800bb1e:	a201      	add	r2, pc, #4	@ (adr r2, 800bb24 <UART_SetConfig+0x90>)
 800bb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb24:	0800bb35 	.word	0x0800bb35
 800bb28:	0800bb41 	.word	0x0800bb41
 800bb2c:	0800bb3b 	.word	0x0800bb3b
 800bb30:	0800bb47 	.word	0x0800bb47
 800bb34:	2301      	movs	r3, #1
 800bb36:	77fb      	strb	r3, [r7, #31]
 800bb38:	e150      	b.n	800bddc <UART_SetConfig+0x348>
 800bb3a:	2302      	movs	r3, #2
 800bb3c:	77fb      	strb	r3, [r7, #31]
 800bb3e:	e14d      	b.n	800bddc <UART_SetConfig+0x348>
 800bb40:	2304      	movs	r3, #4
 800bb42:	77fb      	strb	r3, [r7, #31]
 800bb44:	e14a      	b.n	800bddc <UART_SetConfig+0x348>
 800bb46:	2308      	movs	r3, #8
 800bb48:	77fb      	strb	r3, [r7, #31]
 800bb4a:	e147      	b.n	800bddc <UART_SetConfig+0x348>
 800bb4c:	2310      	movs	r3, #16
 800bb4e:	77fb      	strb	r3, [r7, #31]
 800bb50:	e144      	b.n	800bddc <UART_SetConfig+0x348>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4a83      	ldr	r2, [pc, #524]	@ (800bd64 <UART_SetConfig+0x2d0>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d132      	bne.n	800bbc2 <UART_SetConfig+0x12e>
 800bb5c:	4b80      	ldr	r3, [pc, #512]	@ (800bd60 <UART_SetConfig+0x2cc>)
 800bb5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb62:	f003 030c 	and.w	r3, r3, #12
 800bb66:	2b0c      	cmp	r3, #12
 800bb68:	d828      	bhi.n	800bbbc <UART_SetConfig+0x128>
 800bb6a:	a201      	add	r2, pc, #4	@ (adr r2, 800bb70 <UART_SetConfig+0xdc>)
 800bb6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb70:	0800bba5 	.word	0x0800bba5
 800bb74:	0800bbbd 	.word	0x0800bbbd
 800bb78:	0800bbbd 	.word	0x0800bbbd
 800bb7c:	0800bbbd 	.word	0x0800bbbd
 800bb80:	0800bbb1 	.word	0x0800bbb1
 800bb84:	0800bbbd 	.word	0x0800bbbd
 800bb88:	0800bbbd 	.word	0x0800bbbd
 800bb8c:	0800bbbd 	.word	0x0800bbbd
 800bb90:	0800bbab 	.word	0x0800bbab
 800bb94:	0800bbbd 	.word	0x0800bbbd
 800bb98:	0800bbbd 	.word	0x0800bbbd
 800bb9c:	0800bbbd 	.word	0x0800bbbd
 800bba0:	0800bbb7 	.word	0x0800bbb7
 800bba4:	2300      	movs	r3, #0
 800bba6:	77fb      	strb	r3, [r7, #31]
 800bba8:	e118      	b.n	800bddc <UART_SetConfig+0x348>
 800bbaa:	2302      	movs	r3, #2
 800bbac:	77fb      	strb	r3, [r7, #31]
 800bbae:	e115      	b.n	800bddc <UART_SetConfig+0x348>
 800bbb0:	2304      	movs	r3, #4
 800bbb2:	77fb      	strb	r3, [r7, #31]
 800bbb4:	e112      	b.n	800bddc <UART_SetConfig+0x348>
 800bbb6:	2308      	movs	r3, #8
 800bbb8:	77fb      	strb	r3, [r7, #31]
 800bbba:	e10f      	b.n	800bddc <UART_SetConfig+0x348>
 800bbbc:	2310      	movs	r3, #16
 800bbbe:	77fb      	strb	r3, [r7, #31]
 800bbc0:	e10c      	b.n	800bddc <UART_SetConfig+0x348>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	4a68      	ldr	r2, [pc, #416]	@ (800bd68 <UART_SetConfig+0x2d4>)
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d120      	bne.n	800bc0e <UART_SetConfig+0x17a>
 800bbcc:	4b64      	ldr	r3, [pc, #400]	@ (800bd60 <UART_SetConfig+0x2cc>)
 800bbce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbd2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800bbd6:	2b30      	cmp	r3, #48	@ 0x30
 800bbd8:	d013      	beq.n	800bc02 <UART_SetConfig+0x16e>
 800bbda:	2b30      	cmp	r3, #48	@ 0x30
 800bbdc:	d814      	bhi.n	800bc08 <UART_SetConfig+0x174>
 800bbde:	2b20      	cmp	r3, #32
 800bbe0:	d009      	beq.n	800bbf6 <UART_SetConfig+0x162>
 800bbe2:	2b20      	cmp	r3, #32
 800bbe4:	d810      	bhi.n	800bc08 <UART_SetConfig+0x174>
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d002      	beq.n	800bbf0 <UART_SetConfig+0x15c>
 800bbea:	2b10      	cmp	r3, #16
 800bbec:	d006      	beq.n	800bbfc <UART_SetConfig+0x168>
 800bbee:	e00b      	b.n	800bc08 <UART_SetConfig+0x174>
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	77fb      	strb	r3, [r7, #31]
 800bbf4:	e0f2      	b.n	800bddc <UART_SetConfig+0x348>
 800bbf6:	2302      	movs	r3, #2
 800bbf8:	77fb      	strb	r3, [r7, #31]
 800bbfa:	e0ef      	b.n	800bddc <UART_SetConfig+0x348>
 800bbfc:	2304      	movs	r3, #4
 800bbfe:	77fb      	strb	r3, [r7, #31]
 800bc00:	e0ec      	b.n	800bddc <UART_SetConfig+0x348>
 800bc02:	2308      	movs	r3, #8
 800bc04:	77fb      	strb	r3, [r7, #31]
 800bc06:	e0e9      	b.n	800bddc <UART_SetConfig+0x348>
 800bc08:	2310      	movs	r3, #16
 800bc0a:	77fb      	strb	r3, [r7, #31]
 800bc0c:	e0e6      	b.n	800bddc <UART_SetConfig+0x348>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	4a56      	ldr	r2, [pc, #344]	@ (800bd6c <UART_SetConfig+0x2d8>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d120      	bne.n	800bc5a <UART_SetConfig+0x1c6>
 800bc18:	4b51      	ldr	r3, [pc, #324]	@ (800bd60 <UART_SetConfig+0x2cc>)
 800bc1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc1e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800bc22:	2bc0      	cmp	r3, #192	@ 0xc0
 800bc24:	d013      	beq.n	800bc4e <UART_SetConfig+0x1ba>
 800bc26:	2bc0      	cmp	r3, #192	@ 0xc0
 800bc28:	d814      	bhi.n	800bc54 <UART_SetConfig+0x1c0>
 800bc2a:	2b80      	cmp	r3, #128	@ 0x80
 800bc2c:	d009      	beq.n	800bc42 <UART_SetConfig+0x1ae>
 800bc2e:	2b80      	cmp	r3, #128	@ 0x80
 800bc30:	d810      	bhi.n	800bc54 <UART_SetConfig+0x1c0>
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d002      	beq.n	800bc3c <UART_SetConfig+0x1a8>
 800bc36:	2b40      	cmp	r3, #64	@ 0x40
 800bc38:	d006      	beq.n	800bc48 <UART_SetConfig+0x1b4>
 800bc3a:	e00b      	b.n	800bc54 <UART_SetConfig+0x1c0>
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	77fb      	strb	r3, [r7, #31]
 800bc40:	e0cc      	b.n	800bddc <UART_SetConfig+0x348>
 800bc42:	2302      	movs	r3, #2
 800bc44:	77fb      	strb	r3, [r7, #31]
 800bc46:	e0c9      	b.n	800bddc <UART_SetConfig+0x348>
 800bc48:	2304      	movs	r3, #4
 800bc4a:	77fb      	strb	r3, [r7, #31]
 800bc4c:	e0c6      	b.n	800bddc <UART_SetConfig+0x348>
 800bc4e:	2308      	movs	r3, #8
 800bc50:	77fb      	strb	r3, [r7, #31]
 800bc52:	e0c3      	b.n	800bddc <UART_SetConfig+0x348>
 800bc54:	2310      	movs	r3, #16
 800bc56:	77fb      	strb	r3, [r7, #31]
 800bc58:	e0c0      	b.n	800bddc <UART_SetConfig+0x348>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	4a44      	ldr	r2, [pc, #272]	@ (800bd70 <UART_SetConfig+0x2dc>)
 800bc60:	4293      	cmp	r3, r2
 800bc62:	d125      	bne.n	800bcb0 <UART_SetConfig+0x21c>
 800bc64:	4b3e      	ldr	r3, [pc, #248]	@ (800bd60 <UART_SetConfig+0x2cc>)
 800bc66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bc6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bc72:	d017      	beq.n	800bca4 <UART_SetConfig+0x210>
 800bc74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bc78:	d817      	bhi.n	800bcaa <UART_SetConfig+0x216>
 800bc7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc7e:	d00b      	beq.n	800bc98 <UART_SetConfig+0x204>
 800bc80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc84:	d811      	bhi.n	800bcaa <UART_SetConfig+0x216>
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d003      	beq.n	800bc92 <UART_SetConfig+0x1fe>
 800bc8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc8e:	d006      	beq.n	800bc9e <UART_SetConfig+0x20a>
 800bc90:	e00b      	b.n	800bcaa <UART_SetConfig+0x216>
 800bc92:	2300      	movs	r3, #0
 800bc94:	77fb      	strb	r3, [r7, #31]
 800bc96:	e0a1      	b.n	800bddc <UART_SetConfig+0x348>
 800bc98:	2302      	movs	r3, #2
 800bc9a:	77fb      	strb	r3, [r7, #31]
 800bc9c:	e09e      	b.n	800bddc <UART_SetConfig+0x348>
 800bc9e:	2304      	movs	r3, #4
 800bca0:	77fb      	strb	r3, [r7, #31]
 800bca2:	e09b      	b.n	800bddc <UART_SetConfig+0x348>
 800bca4:	2308      	movs	r3, #8
 800bca6:	77fb      	strb	r3, [r7, #31]
 800bca8:	e098      	b.n	800bddc <UART_SetConfig+0x348>
 800bcaa:	2310      	movs	r3, #16
 800bcac:	77fb      	strb	r3, [r7, #31]
 800bcae:	e095      	b.n	800bddc <UART_SetConfig+0x348>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	4a2f      	ldr	r2, [pc, #188]	@ (800bd74 <UART_SetConfig+0x2e0>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d125      	bne.n	800bd06 <UART_SetConfig+0x272>
 800bcba:	4b29      	ldr	r3, [pc, #164]	@ (800bd60 <UART_SetConfig+0x2cc>)
 800bcbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcc0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bcc4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bcc8:	d017      	beq.n	800bcfa <UART_SetConfig+0x266>
 800bcca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bcce:	d817      	bhi.n	800bd00 <UART_SetConfig+0x26c>
 800bcd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bcd4:	d00b      	beq.n	800bcee <UART_SetConfig+0x25a>
 800bcd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bcda:	d811      	bhi.n	800bd00 <UART_SetConfig+0x26c>
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d003      	beq.n	800bce8 <UART_SetConfig+0x254>
 800bce0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bce4:	d006      	beq.n	800bcf4 <UART_SetConfig+0x260>
 800bce6:	e00b      	b.n	800bd00 <UART_SetConfig+0x26c>
 800bce8:	2301      	movs	r3, #1
 800bcea:	77fb      	strb	r3, [r7, #31]
 800bcec:	e076      	b.n	800bddc <UART_SetConfig+0x348>
 800bcee:	2302      	movs	r3, #2
 800bcf0:	77fb      	strb	r3, [r7, #31]
 800bcf2:	e073      	b.n	800bddc <UART_SetConfig+0x348>
 800bcf4:	2304      	movs	r3, #4
 800bcf6:	77fb      	strb	r3, [r7, #31]
 800bcf8:	e070      	b.n	800bddc <UART_SetConfig+0x348>
 800bcfa:	2308      	movs	r3, #8
 800bcfc:	77fb      	strb	r3, [r7, #31]
 800bcfe:	e06d      	b.n	800bddc <UART_SetConfig+0x348>
 800bd00:	2310      	movs	r3, #16
 800bd02:	77fb      	strb	r3, [r7, #31]
 800bd04:	e06a      	b.n	800bddc <UART_SetConfig+0x348>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a1b      	ldr	r2, [pc, #108]	@ (800bd78 <UART_SetConfig+0x2e4>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d138      	bne.n	800bd82 <UART_SetConfig+0x2ee>
 800bd10:	4b13      	ldr	r3, [pc, #76]	@ (800bd60 <UART_SetConfig+0x2cc>)
 800bd12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd16:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800bd1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bd1e:	d017      	beq.n	800bd50 <UART_SetConfig+0x2bc>
 800bd20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bd24:	d82a      	bhi.n	800bd7c <UART_SetConfig+0x2e8>
 800bd26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd2a:	d00b      	beq.n	800bd44 <UART_SetConfig+0x2b0>
 800bd2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd30:	d824      	bhi.n	800bd7c <UART_SetConfig+0x2e8>
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d003      	beq.n	800bd3e <UART_SetConfig+0x2aa>
 800bd36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd3a:	d006      	beq.n	800bd4a <UART_SetConfig+0x2b6>
 800bd3c:	e01e      	b.n	800bd7c <UART_SetConfig+0x2e8>
 800bd3e:	2300      	movs	r3, #0
 800bd40:	77fb      	strb	r3, [r7, #31]
 800bd42:	e04b      	b.n	800bddc <UART_SetConfig+0x348>
 800bd44:	2302      	movs	r3, #2
 800bd46:	77fb      	strb	r3, [r7, #31]
 800bd48:	e048      	b.n	800bddc <UART_SetConfig+0x348>
 800bd4a:	2304      	movs	r3, #4
 800bd4c:	77fb      	strb	r3, [r7, #31]
 800bd4e:	e045      	b.n	800bddc <UART_SetConfig+0x348>
 800bd50:	2308      	movs	r3, #8
 800bd52:	77fb      	strb	r3, [r7, #31]
 800bd54:	e042      	b.n	800bddc <UART_SetConfig+0x348>
 800bd56:	bf00      	nop
 800bd58:	efff69f3 	.word	0xefff69f3
 800bd5c:	40011000 	.word	0x40011000
 800bd60:	40023800 	.word	0x40023800
 800bd64:	40004400 	.word	0x40004400
 800bd68:	40004800 	.word	0x40004800
 800bd6c:	40004c00 	.word	0x40004c00
 800bd70:	40005000 	.word	0x40005000
 800bd74:	40011400 	.word	0x40011400
 800bd78:	40007800 	.word	0x40007800
 800bd7c:	2310      	movs	r3, #16
 800bd7e:	77fb      	strb	r3, [r7, #31]
 800bd80:	e02c      	b.n	800bddc <UART_SetConfig+0x348>
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	4a72      	ldr	r2, [pc, #456]	@ (800bf50 <UART_SetConfig+0x4bc>)
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d125      	bne.n	800bdd8 <UART_SetConfig+0x344>
 800bd8c:	4b71      	ldr	r3, [pc, #452]	@ (800bf54 <UART_SetConfig+0x4c0>)
 800bd8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd92:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800bd96:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800bd9a:	d017      	beq.n	800bdcc <UART_SetConfig+0x338>
 800bd9c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800bda0:	d817      	bhi.n	800bdd2 <UART_SetConfig+0x33e>
 800bda2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bda6:	d00b      	beq.n	800bdc0 <UART_SetConfig+0x32c>
 800bda8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bdac:	d811      	bhi.n	800bdd2 <UART_SetConfig+0x33e>
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d003      	beq.n	800bdba <UART_SetConfig+0x326>
 800bdb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bdb6:	d006      	beq.n	800bdc6 <UART_SetConfig+0x332>
 800bdb8:	e00b      	b.n	800bdd2 <UART_SetConfig+0x33e>
 800bdba:	2300      	movs	r3, #0
 800bdbc:	77fb      	strb	r3, [r7, #31]
 800bdbe:	e00d      	b.n	800bddc <UART_SetConfig+0x348>
 800bdc0:	2302      	movs	r3, #2
 800bdc2:	77fb      	strb	r3, [r7, #31]
 800bdc4:	e00a      	b.n	800bddc <UART_SetConfig+0x348>
 800bdc6:	2304      	movs	r3, #4
 800bdc8:	77fb      	strb	r3, [r7, #31]
 800bdca:	e007      	b.n	800bddc <UART_SetConfig+0x348>
 800bdcc:	2308      	movs	r3, #8
 800bdce:	77fb      	strb	r3, [r7, #31]
 800bdd0:	e004      	b.n	800bddc <UART_SetConfig+0x348>
 800bdd2:	2310      	movs	r3, #16
 800bdd4:	77fb      	strb	r3, [r7, #31]
 800bdd6:	e001      	b.n	800bddc <UART_SetConfig+0x348>
 800bdd8:	2310      	movs	r3, #16
 800bdda:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	69db      	ldr	r3, [r3, #28]
 800bde0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bde4:	d15b      	bne.n	800be9e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800bde6:	7ffb      	ldrb	r3, [r7, #31]
 800bde8:	2b08      	cmp	r3, #8
 800bdea:	d828      	bhi.n	800be3e <UART_SetConfig+0x3aa>
 800bdec:	a201      	add	r2, pc, #4	@ (adr r2, 800bdf4 <UART_SetConfig+0x360>)
 800bdee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdf2:	bf00      	nop
 800bdf4:	0800be19 	.word	0x0800be19
 800bdf8:	0800be21 	.word	0x0800be21
 800bdfc:	0800be29 	.word	0x0800be29
 800be00:	0800be3f 	.word	0x0800be3f
 800be04:	0800be2f 	.word	0x0800be2f
 800be08:	0800be3f 	.word	0x0800be3f
 800be0c:	0800be3f 	.word	0x0800be3f
 800be10:	0800be3f 	.word	0x0800be3f
 800be14:	0800be37 	.word	0x0800be37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be18:	f7fc f80c 	bl	8007e34 <HAL_RCC_GetPCLK1Freq>
 800be1c:	61b8      	str	r0, [r7, #24]
        break;
 800be1e:	e013      	b.n	800be48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be20:	f7fc f81c 	bl	8007e5c <HAL_RCC_GetPCLK2Freq>
 800be24:	61b8      	str	r0, [r7, #24]
        break;
 800be26:	e00f      	b.n	800be48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800be28:	4b4b      	ldr	r3, [pc, #300]	@ (800bf58 <UART_SetConfig+0x4c4>)
 800be2a:	61bb      	str	r3, [r7, #24]
        break;
 800be2c:	e00c      	b.n	800be48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800be2e:	f7fb ff2f 	bl	8007c90 <HAL_RCC_GetSysClockFreq>
 800be32:	61b8      	str	r0, [r7, #24]
        break;
 800be34:	e008      	b.n	800be48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be3a:	61bb      	str	r3, [r7, #24]
        break;
 800be3c:	e004      	b.n	800be48 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800be3e:	2300      	movs	r3, #0
 800be40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800be42:	2301      	movs	r3, #1
 800be44:	77bb      	strb	r3, [r7, #30]
        break;
 800be46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800be48:	69bb      	ldr	r3, [r7, #24]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d074      	beq.n	800bf38 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800be4e:	69bb      	ldr	r3, [r7, #24]
 800be50:	005a      	lsls	r2, r3, #1
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	085b      	lsrs	r3, r3, #1
 800be58:	441a      	add	r2, r3
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800be62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	2b0f      	cmp	r3, #15
 800be68:	d916      	bls.n	800be98 <UART_SetConfig+0x404>
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be70:	d212      	bcs.n	800be98 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	b29b      	uxth	r3, r3
 800be76:	f023 030f 	bic.w	r3, r3, #15
 800be7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	085b      	lsrs	r3, r3, #1
 800be80:	b29b      	uxth	r3, r3
 800be82:	f003 0307 	and.w	r3, r3, #7
 800be86:	b29a      	uxth	r2, r3
 800be88:	89fb      	ldrh	r3, [r7, #14]
 800be8a:	4313      	orrs	r3, r2
 800be8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	89fa      	ldrh	r2, [r7, #14]
 800be94:	60da      	str	r2, [r3, #12]
 800be96:	e04f      	b.n	800bf38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800be98:	2301      	movs	r3, #1
 800be9a:	77bb      	strb	r3, [r7, #30]
 800be9c:	e04c      	b.n	800bf38 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800be9e:	7ffb      	ldrb	r3, [r7, #31]
 800bea0:	2b08      	cmp	r3, #8
 800bea2:	d828      	bhi.n	800bef6 <UART_SetConfig+0x462>
 800bea4:	a201      	add	r2, pc, #4	@ (adr r2, 800beac <UART_SetConfig+0x418>)
 800bea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beaa:	bf00      	nop
 800beac:	0800bed1 	.word	0x0800bed1
 800beb0:	0800bed9 	.word	0x0800bed9
 800beb4:	0800bee1 	.word	0x0800bee1
 800beb8:	0800bef7 	.word	0x0800bef7
 800bebc:	0800bee7 	.word	0x0800bee7
 800bec0:	0800bef7 	.word	0x0800bef7
 800bec4:	0800bef7 	.word	0x0800bef7
 800bec8:	0800bef7 	.word	0x0800bef7
 800becc:	0800beef 	.word	0x0800beef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bed0:	f7fb ffb0 	bl	8007e34 <HAL_RCC_GetPCLK1Freq>
 800bed4:	61b8      	str	r0, [r7, #24]
        break;
 800bed6:	e013      	b.n	800bf00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bed8:	f7fb ffc0 	bl	8007e5c <HAL_RCC_GetPCLK2Freq>
 800bedc:	61b8      	str	r0, [r7, #24]
        break;
 800bede:	e00f      	b.n	800bf00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bee0:	4b1d      	ldr	r3, [pc, #116]	@ (800bf58 <UART_SetConfig+0x4c4>)
 800bee2:	61bb      	str	r3, [r7, #24]
        break;
 800bee4:	e00c      	b.n	800bf00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bee6:	f7fb fed3 	bl	8007c90 <HAL_RCC_GetSysClockFreq>
 800beea:	61b8      	str	r0, [r7, #24]
        break;
 800beec:	e008      	b.n	800bf00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800beee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bef2:	61bb      	str	r3, [r7, #24]
        break;
 800bef4:	e004      	b.n	800bf00 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800bef6:	2300      	movs	r3, #0
 800bef8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800befa:	2301      	movs	r3, #1
 800befc:	77bb      	strb	r3, [r7, #30]
        break;
 800befe:	bf00      	nop
    }

    if (pclk != 0U)
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d018      	beq.n	800bf38 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	085a      	lsrs	r2, r3, #1
 800bf0c:	69bb      	ldr	r3, [r7, #24]
 800bf0e:	441a      	add	r2, r3
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	2b0f      	cmp	r3, #15
 800bf1e:	d909      	bls.n	800bf34 <UART_SetConfig+0x4a0>
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf26:	d205      	bcs.n	800bf34 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	b29a      	uxth	r2, r3
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	60da      	str	r2, [r3, #12]
 800bf32:	e001      	b.n	800bf38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bf34:	2301      	movs	r3, #1
 800bf36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2200      	movs	r2, #0
 800bf42:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800bf44:	7fbb      	ldrb	r3, [r7, #30]
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3720      	adds	r7, #32
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	40007c00 	.word	0x40007c00
 800bf54:	40023800 	.word	0x40023800
 800bf58:	00f42400 	.word	0x00f42400

0800bf5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b083      	sub	sp, #12
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf68:	f003 0308 	and.w	r3, r3, #8
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d00a      	beq.n	800bf86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	430a      	orrs	r2, r1
 800bf84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf8a:	f003 0301 	and.w	r3, r3, #1
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d00a      	beq.n	800bfa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	685b      	ldr	r3, [r3, #4]
 800bf98:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	430a      	orrs	r2, r1
 800bfa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfac:	f003 0302 	and.w	r3, r3, #2
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d00a      	beq.n	800bfca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	685b      	ldr	r3, [r3, #4]
 800bfba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	430a      	orrs	r2, r1
 800bfc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfce:	f003 0304 	and.w	r3, r3, #4
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d00a      	beq.n	800bfec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	430a      	orrs	r2, r1
 800bfea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bff0:	f003 0310 	and.w	r3, r3, #16
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d00a      	beq.n	800c00e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	689b      	ldr	r3, [r3, #8]
 800bffe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	430a      	orrs	r2, r1
 800c00c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c012:	f003 0320 	and.w	r3, r3, #32
 800c016:	2b00      	cmp	r3, #0
 800c018:	d00a      	beq.n	800c030 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	689b      	ldr	r3, [r3, #8]
 800c020:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	430a      	orrs	r2, r1
 800c02e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d01a      	beq.n	800c072 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	685b      	ldr	r3, [r3, #4]
 800c042:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	430a      	orrs	r2, r1
 800c050:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c056:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c05a:	d10a      	bne.n	800c072 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	430a      	orrs	r2, r1
 800c070:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d00a      	beq.n	800c094 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	430a      	orrs	r2, r1
 800c092:	605a      	str	r2, [r3, #4]
  }
}
 800c094:	bf00      	nop
 800c096:	370c      	adds	r7, #12
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr

0800c0a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b08c      	sub	sp, #48	@ 0x30
 800c0a4:	af02      	add	r7, sp, #8
 800c0a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c0b0:	f7f6 fefa 	bl	8002ea8 <HAL_GetTick>
 800c0b4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f003 0308 	and.w	r3, r3, #8
 800c0c0:	2b08      	cmp	r3, #8
 800c0c2:	d12e      	bne.n	800c122 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c0c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c0c8:	9300      	str	r3, [sp, #0]
 800c0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 f83b 	bl	800c14e <UART_WaitOnFlagUntilTimeout>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d021      	beq.n	800c122 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	e853 3f00 	ldrex	r3, [r3]
 800c0ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c0f2:	623b      	str	r3, [r7, #32]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	6a3b      	ldr	r3, [r7, #32]
 800c0fc:	61fb      	str	r3, [r7, #28]
 800c0fe:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c100:	69b9      	ldr	r1, [r7, #24]
 800c102:	69fa      	ldr	r2, [r7, #28]
 800c104:	e841 2300 	strex	r3, r2, [r1]
 800c108:	617b      	str	r3, [r7, #20]
   return(result);
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d1e6      	bne.n	800c0de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2220      	movs	r2, #32
 800c114:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2200      	movs	r2, #0
 800c11a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c11e:	2303      	movs	r3, #3
 800c120:	e011      	b.n	800c146 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2220      	movs	r2, #32
 800c126:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2220      	movs	r2, #32
 800c12c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2200      	movs	r2, #0
 800c134:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2200      	movs	r2, #0
 800c13a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2200      	movs	r2, #0
 800c140:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800c144:	2300      	movs	r3, #0
}
 800c146:	4618      	mov	r0, r3
 800c148:	3728      	adds	r7, #40	@ 0x28
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}

0800c14e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c14e:	b580      	push	{r7, lr}
 800c150:	b084      	sub	sp, #16
 800c152:	af00      	add	r7, sp, #0
 800c154:	60f8      	str	r0, [r7, #12]
 800c156:	60b9      	str	r1, [r7, #8]
 800c158:	603b      	str	r3, [r7, #0]
 800c15a:	4613      	mov	r3, r2
 800c15c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c15e:	e04f      	b.n	800c200 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c160:	69bb      	ldr	r3, [r7, #24]
 800c162:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c166:	d04b      	beq.n	800c200 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c168:	f7f6 fe9e 	bl	8002ea8 <HAL_GetTick>
 800c16c:	4602      	mov	r2, r0
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	1ad3      	subs	r3, r2, r3
 800c172:	69ba      	ldr	r2, [r7, #24]
 800c174:	429a      	cmp	r2, r3
 800c176:	d302      	bcc.n	800c17e <UART_WaitOnFlagUntilTimeout+0x30>
 800c178:	69bb      	ldr	r3, [r7, #24]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d101      	bne.n	800c182 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c17e:	2303      	movs	r3, #3
 800c180:	e04e      	b.n	800c220 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f003 0304 	and.w	r3, r3, #4
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d037      	beq.n	800c200 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	2b80      	cmp	r3, #128	@ 0x80
 800c194:	d034      	beq.n	800c200 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	2b40      	cmp	r3, #64	@ 0x40
 800c19a:	d031      	beq.n	800c200 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	69db      	ldr	r3, [r3, #28]
 800c1a2:	f003 0308 	and.w	r3, r3, #8
 800c1a6:	2b08      	cmp	r3, #8
 800c1a8:	d110      	bne.n	800c1cc <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	2208      	movs	r2, #8
 800c1b0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c1b2:	68f8      	ldr	r0, [r7, #12]
 800c1b4:	f000 f838 	bl	800c228 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2208      	movs	r2, #8
 800c1bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	e029      	b.n	800c220 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	69db      	ldr	r3, [r3, #28]
 800c1d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c1d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c1da:	d111      	bne.n	800c200 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c1e4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c1e6:	68f8      	ldr	r0, [r7, #12]
 800c1e8:	f000 f81e 	bl	800c228 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2220      	movs	r2, #32
 800c1f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800c1fc:	2303      	movs	r3, #3
 800c1fe:	e00f      	b.n	800c220 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	69da      	ldr	r2, [r3, #28]
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	4013      	ands	r3, r2
 800c20a:	68ba      	ldr	r2, [r7, #8]
 800c20c:	429a      	cmp	r2, r3
 800c20e:	bf0c      	ite	eq
 800c210:	2301      	moveq	r3, #1
 800c212:	2300      	movne	r3, #0
 800c214:	b2db      	uxtb	r3, r3
 800c216:	461a      	mov	r2, r3
 800c218:	79fb      	ldrb	r3, [r7, #7]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d0a0      	beq.n	800c160 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c21e:	2300      	movs	r3, #0
}
 800c220:	4618      	mov	r0, r3
 800c222:	3710      	adds	r7, #16
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c228:	b480      	push	{r7}
 800c22a:	b095      	sub	sp, #84	@ 0x54
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c238:	e853 3f00 	ldrex	r3, [r3]
 800c23c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c23e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c240:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c244:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	461a      	mov	r2, r3
 800c24c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c24e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c250:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c252:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c254:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c256:	e841 2300 	strex	r3, r2, [r1]
 800c25a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d1e6      	bne.n	800c230 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	3308      	adds	r3, #8
 800c268:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c26a:	6a3b      	ldr	r3, [r7, #32]
 800c26c:	e853 3f00 	ldrex	r3, [r3]
 800c270:	61fb      	str	r3, [r7, #28]
   return(result);
 800c272:	69fb      	ldr	r3, [r7, #28]
 800c274:	f023 0301 	bic.w	r3, r3, #1
 800c278:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	3308      	adds	r3, #8
 800c280:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c282:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c284:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c286:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c288:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c28a:	e841 2300 	strex	r3, r2, [r1]
 800c28e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c292:	2b00      	cmp	r3, #0
 800c294:	d1e5      	bne.n	800c262 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c29a:	2b01      	cmp	r3, #1
 800c29c:	d118      	bne.n	800c2d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	e853 3f00 	ldrex	r3, [r3]
 800c2aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	f023 0310 	bic.w	r3, r3, #16
 800c2b2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	461a      	mov	r2, r3
 800c2ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2bc:	61bb      	str	r3, [r7, #24]
 800c2be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c0:	6979      	ldr	r1, [r7, #20]
 800c2c2:	69ba      	ldr	r2, [r7, #24]
 800c2c4:	e841 2300 	strex	r3, r2, [r1]
 800c2c8:	613b      	str	r3, [r7, #16]
   return(result);
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d1e6      	bne.n	800c29e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2220      	movs	r2, #32
 800c2d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800c2e4:	bf00      	nop
 800c2e6:	3754      	adds	r7, #84	@ 0x54
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr

0800c2f0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b083      	sub	sp, #12
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d121      	bne.n	800c346 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681a      	ldr	r2, [r3, #0]
 800c306:	4b27      	ldr	r3, [pc, #156]	@ (800c3a4 <FMC_SDRAM_Init+0xb4>)
 800c308:	4013      	ands	r3, r2
 800c30a:	683a      	ldr	r2, [r7, #0]
 800c30c:	6851      	ldr	r1, [r2, #4]
 800c30e:	683a      	ldr	r2, [r7, #0]
 800c310:	6892      	ldr	r2, [r2, #8]
 800c312:	4311      	orrs	r1, r2
 800c314:	683a      	ldr	r2, [r7, #0]
 800c316:	68d2      	ldr	r2, [r2, #12]
 800c318:	4311      	orrs	r1, r2
 800c31a:	683a      	ldr	r2, [r7, #0]
 800c31c:	6912      	ldr	r2, [r2, #16]
 800c31e:	4311      	orrs	r1, r2
 800c320:	683a      	ldr	r2, [r7, #0]
 800c322:	6952      	ldr	r2, [r2, #20]
 800c324:	4311      	orrs	r1, r2
 800c326:	683a      	ldr	r2, [r7, #0]
 800c328:	6992      	ldr	r2, [r2, #24]
 800c32a:	4311      	orrs	r1, r2
 800c32c:	683a      	ldr	r2, [r7, #0]
 800c32e:	69d2      	ldr	r2, [r2, #28]
 800c330:	4311      	orrs	r1, r2
 800c332:	683a      	ldr	r2, [r7, #0]
 800c334:	6a12      	ldr	r2, [r2, #32]
 800c336:	4311      	orrs	r1, r2
 800c338:	683a      	ldr	r2, [r7, #0]
 800c33a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c33c:	430a      	orrs	r2, r1
 800c33e:	431a      	orrs	r2, r3
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	601a      	str	r2, [r3, #0]
 800c344:	e026      	b.n	800c394 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	69d9      	ldr	r1, [r3, #28]
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	6a1b      	ldr	r3, [r3, #32]
 800c356:	4319      	orrs	r1, r3
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c35c:	430b      	orrs	r3, r1
 800c35e:	431a      	orrs	r2, r3
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	685a      	ldr	r2, [r3, #4]
 800c368:	4b0e      	ldr	r3, [pc, #56]	@ (800c3a4 <FMC_SDRAM_Init+0xb4>)
 800c36a:	4013      	ands	r3, r2
 800c36c:	683a      	ldr	r2, [r7, #0]
 800c36e:	6851      	ldr	r1, [r2, #4]
 800c370:	683a      	ldr	r2, [r7, #0]
 800c372:	6892      	ldr	r2, [r2, #8]
 800c374:	4311      	orrs	r1, r2
 800c376:	683a      	ldr	r2, [r7, #0]
 800c378:	68d2      	ldr	r2, [r2, #12]
 800c37a:	4311      	orrs	r1, r2
 800c37c:	683a      	ldr	r2, [r7, #0]
 800c37e:	6912      	ldr	r2, [r2, #16]
 800c380:	4311      	orrs	r1, r2
 800c382:	683a      	ldr	r2, [r7, #0]
 800c384:	6952      	ldr	r2, [r2, #20]
 800c386:	4311      	orrs	r1, r2
 800c388:	683a      	ldr	r2, [r7, #0]
 800c38a:	6992      	ldr	r2, [r2, #24]
 800c38c:	430a      	orrs	r2, r1
 800c38e:	431a      	orrs	r2, r3
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c394:	2300      	movs	r3, #0
}
 800c396:	4618      	mov	r0, r3
 800c398:	370c      	adds	r7, #12
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr
 800c3a2:	bf00      	nop
 800c3a4:	ffff8000 	.word	0xffff8000

0800c3a8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b085      	sub	sp, #20
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	60b9      	str	r1, [r7, #8]
 800c3b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d128      	bne.n	800c40c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	689b      	ldr	r3, [r3, #8]
 800c3be:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	1e59      	subs	r1, r3, #1
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	3b01      	subs	r3, #1
 800c3ce:	011b      	lsls	r3, r3, #4
 800c3d0:	4319      	orrs	r1, r3
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	689b      	ldr	r3, [r3, #8]
 800c3d6:	3b01      	subs	r3, #1
 800c3d8:	021b      	lsls	r3, r3, #8
 800c3da:	4319      	orrs	r1, r3
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	68db      	ldr	r3, [r3, #12]
 800c3e0:	3b01      	subs	r3, #1
 800c3e2:	031b      	lsls	r3, r3, #12
 800c3e4:	4319      	orrs	r1, r3
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	691b      	ldr	r3, [r3, #16]
 800c3ea:	3b01      	subs	r3, #1
 800c3ec:	041b      	lsls	r3, r3, #16
 800c3ee:	4319      	orrs	r1, r3
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	695b      	ldr	r3, [r3, #20]
 800c3f4:	3b01      	subs	r3, #1
 800c3f6:	051b      	lsls	r3, r3, #20
 800c3f8:	4319      	orrs	r1, r3
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	699b      	ldr	r3, [r3, #24]
 800c3fe:	3b01      	subs	r3, #1
 800c400:	061b      	lsls	r3, r3, #24
 800c402:	430b      	orrs	r3, r1
 800c404:	431a      	orrs	r2, r3
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	609a      	str	r2, [r3, #8]
 800c40a:	e02d      	b.n	800c468 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	689a      	ldr	r2, [r3, #8]
 800c410:	4b19      	ldr	r3, [pc, #100]	@ (800c478 <FMC_SDRAM_Timing_Init+0xd0>)
 800c412:	4013      	ands	r3, r2
 800c414:	68ba      	ldr	r2, [r7, #8]
 800c416:	68d2      	ldr	r2, [r2, #12]
 800c418:	3a01      	subs	r2, #1
 800c41a:	0311      	lsls	r1, r2, #12
 800c41c:	68ba      	ldr	r2, [r7, #8]
 800c41e:	6952      	ldr	r2, [r2, #20]
 800c420:	3a01      	subs	r2, #1
 800c422:	0512      	lsls	r2, r2, #20
 800c424:	430a      	orrs	r2, r1
 800c426:	431a      	orrs	r2, r3
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	68db      	ldr	r3, [r3, #12]
 800c430:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	1e59      	subs	r1, r3, #1
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	3b01      	subs	r3, #1
 800c440:	011b      	lsls	r3, r3, #4
 800c442:	4319      	orrs	r1, r3
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	689b      	ldr	r3, [r3, #8]
 800c448:	3b01      	subs	r3, #1
 800c44a:	021b      	lsls	r3, r3, #8
 800c44c:	4319      	orrs	r1, r3
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	691b      	ldr	r3, [r3, #16]
 800c452:	3b01      	subs	r3, #1
 800c454:	041b      	lsls	r3, r3, #16
 800c456:	4319      	orrs	r1, r3
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	699b      	ldr	r3, [r3, #24]
 800c45c:	3b01      	subs	r3, #1
 800c45e:	061b      	lsls	r3, r3, #24
 800c460:	430b      	orrs	r3, r1
 800c462:	431a      	orrs	r2, r3
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800c468:	2300      	movs	r3, #0
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3714      	adds	r7, #20
 800c46e:	46bd      	mov	sp, r7
 800c470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c474:	4770      	bx	lr
 800c476:	bf00      	nop
 800c478:	ff0f0fff 	.word	0xff0f0fff

0800c47c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c47c:	b084      	sub	sp, #16
 800c47e:	b480      	push	{r7}
 800c480:	b085      	sub	sp, #20
 800c482:	af00      	add	r7, sp, #0
 800c484:	6078      	str	r0, [r7, #4]
 800c486:	f107 001c 	add.w	r0, r7, #28
 800c48a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c48e:	2300      	movs	r3, #0
 800c490:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c492:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c494:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c496:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800c49a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800c49e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800c4a2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c4a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800c4a6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c4a8:	68fa      	ldr	r2, [r7, #12]
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	685a      	ldr	r2, [r3, #4]
 800c4b2:	4b07      	ldr	r3, [pc, #28]	@ (800c4d0 <SDMMC_Init+0x54>)
 800c4b4:	4013      	ands	r3, r2
 800c4b6:	68fa      	ldr	r2, [r7, #12]
 800c4b8:	431a      	orrs	r2, r3
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c4be:	2300      	movs	r3, #0
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3714      	adds	r7, #20
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ca:	b004      	add	sp, #16
 800c4cc:	4770      	bx	lr
 800c4ce:	bf00      	nop
 800c4d0:	ffff8100 	.word	0xffff8100

0800c4d4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b083      	sub	sp, #12
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	370c      	adds	r7, #12
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ec:	4770      	bx	lr

0800c4ee <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800c4ee:	b480      	push	{r7}
 800c4f0:	b083      	sub	sp, #12
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2203      	movs	r2, #3
 800c4fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c4fc:	2300      	movs	r3, #0
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	370c      	adds	r7, #12
 800c502:	46bd      	mov	sp, r7
 800c504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c508:	4770      	bx	lr

0800c50a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800c50a:	b480      	push	{r7}
 800c50c:	b083      	sub	sp, #12
 800c50e:	af00      	add	r7, sp, #0
 800c510:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f003 0303 	and.w	r3, r3, #3
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	370c      	adds	r7, #12
 800c51e:	46bd      	mov	sp, r7
 800c520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c524:	4770      	bx	lr
	...

0800c528 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c528:	b480      	push	{r7}
 800c52a:	b085      	sub	sp, #20
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c532:	2300      	movs	r3, #0
 800c534:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c546:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c54c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c552:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c554:	68fa      	ldr	r2, [r7, #12]
 800c556:	4313      	orrs	r3, r2
 800c558:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	68da      	ldr	r2, [r3, #12]
 800c55e:	4b06      	ldr	r3, [pc, #24]	@ (800c578 <SDMMC_SendCommand+0x50>)
 800c560:	4013      	ands	r3, r2
 800c562:	68fa      	ldr	r2, [r7, #12]
 800c564:	431a      	orrs	r2, r3
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c56a:	2300      	movs	r3, #0
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3714      	adds	r7, #20
 800c570:	46bd      	mov	sp, r7
 800c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c576:	4770      	bx	lr
 800c578:	fffff000 	.word	0xfffff000

0800c57c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b083      	sub	sp, #12
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	691b      	ldr	r3, [r3, #16]
 800c588:	b2db      	uxtb	r3, r3
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	370c      	adds	r7, #12
 800c58e:	46bd      	mov	sp, r7
 800c590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c594:	4770      	bx	lr

0800c596 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c596:	b480      	push	{r7}
 800c598:	b085      	sub	sp, #20
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
 800c59e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	3314      	adds	r3, #20
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	4413      	add	r3, r2
 800c5aa:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
}  
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3714      	adds	r7, #20
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr

0800c5bc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b085      	sub	sp, #20
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	681a      	ldr	r2, [r3, #0]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	685a      	ldr	r2, [r3, #4]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c5e2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c5e8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c5ee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c5f0:	68fa      	ldr	r2, [r7, #12]
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5fa:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	431a      	orrs	r2, r3
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800c606:	2300      	movs	r3, #0

}
 800c608:	4618      	mov	r0, r3
 800c60a:	3714      	adds	r7, #20
 800c60c:	46bd      	mov	sp, r7
 800c60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c612:	4770      	bx	lr

0800c614 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b088      	sub	sp, #32
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c622:	2310      	movs	r3, #16
 800c624:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c626:	2340      	movs	r3, #64	@ 0x40
 800c628:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c62a:	2300      	movs	r3, #0
 800c62c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c62e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c632:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c634:	f107 0308 	add.w	r3, r7, #8
 800c638:	4619      	mov	r1, r3
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f7ff ff74 	bl	800c528 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c640:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c644:	2110      	movs	r1, #16
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f000 fa1a 	bl	800ca80 <SDMMC_GetCmdResp1>
 800c64c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c64e:	69fb      	ldr	r3, [r7, #28]
}
 800c650:	4618      	mov	r0, r3
 800c652:	3720      	adds	r7, #32
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b088      	sub	sp, #32
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c666:	2311      	movs	r3, #17
 800c668:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c66a:	2340      	movs	r3, #64	@ 0x40
 800c66c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c66e:	2300      	movs	r3, #0
 800c670:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c672:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c676:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c678:	f107 0308 	add.w	r3, r7, #8
 800c67c:	4619      	mov	r1, r3
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f7ff ff52 	bl	800c528 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c684:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c688:	2111      	movs	r1, #17
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f000 f9f8 	bl	800ca80 <SDMMC_GetCmdResp1>
 800c690:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c692:	69fb      	ldr	r3, [r7, #28]
}
 800c694:	4618      	mov	r0, r3
 800c696:	3720      	adds	r7, #32
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b088      	sub	sp, #32
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c6aa:	2312      	movs	r3, #18
 800c6ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c6ae:	2340      	movs	r3, #64	@ 0x40
 800c6b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c6ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6bc:	f107 0308 	add.w	r3, r7, #8
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f7ff ff30 	bl	800c528 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c6c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c6cc:	2112      	movs	r1, #18
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 f9d6 	bl	800ca80 <SDMMC_GetCmdResp1>
 800c6d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6d6:	69fb      	ldr	r3, [r7, #28]
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3720      	adds	r7, #32
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b088      	sub	sp, #32
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c6ee:	2318      	movs	r3, #24
 800c6f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c6f2:	2340      	movs	r3, #64	@ 0x40
 800c6f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c6fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c700:	f107 0308 	add.w	r3, r7, #8
 800c704:	4619      	mov	r1, r3
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f7ff ff0e 	bl	800c528 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c70c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c710:	2118      	movs	r1, #24
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f000 f9b4 	bl	800ca80 <SDMMC_GetCmdResp1>
 800c718:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c71a:	69fb      	ldr	r3, [r7, #28]
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3720      	adds	r7, #32
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}

0800c724 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b088      	sub	sp, #32
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c732:	2319      	movs	r3, #25
 800c734:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c736:	2340      	movs	r3, #64	@ 0x40
 800c738:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c73a:	2300      	movs	r3, #0
 800c73c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c73e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c742:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c744:	f107 0308 	add.w	r3, r7, #8
 800c748:	4619      	mov	r1, r3
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f7ff feec 	bl	800c528 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c750:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c754:	2119      	movs	r1, #25
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 f992 	bl	800ca80 <SDMMC_GetCmdResp1>
 800c75c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c75e:	69fb      	ldr	r3, [r7, #28]
}
 800c760:	4618      	mov	r0, r3
 800c762:	3720      	adds	r7, #32
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}

0800c768 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b088      	sub	sp, #32
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c770:	2300      	movs	r3, #0
 800c772:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c774:	230c      	movs	r3, #12
 800c776:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c778:	2340      	movs	r3, #64	@ 0x40
 800c77a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c77c:	2300      	movs	r3, #0
 800c77e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c780:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c784:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c786:	f107 0308 	add.w	r3, r7, #8
 800c78a:	4619      	mov	r1, r3
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f7ff fecb 	bl	800c528 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c792:	4a05      	ldr	r2, [pc, #20]	@ (800c7a8 <SDMMC_CmdStopTransfer+0x40>)
 800c794:	210c      	movs	r1, #12
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 f972 	bl	800ca80 <SDMMC_GetCmdResp1>
 800c79c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c79e:	69fb      	ldr	r3, [r7, #28]
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	3720      	adds	r7, #32
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	05f5e100 	.word	0x05f5e100

0800c7ac <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b08a      	sub	sp, #40	@ 0x28
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	60f8      	str	r0, [r7, #12]
 800c7b4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c7bc:	2307      	movs	r3, #7
 800c7be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7c0:	2340      	movs	r3, #64	@ 0x40
 800c7c2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c7cc:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7ce:	f107 0310 	add.w	r3, r7, #16
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	68f8      	ldr	r0, [r7, #12]
 800c7d6:	f7ff fea7 	bl	800c528 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c7da:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c7de:	2107      	movs	r1, #7
 800c7e0:	68f8      	ldr	r0, [r7, #12]
 800c7e2:	f000 f94d 	bl	800ca80 <SDMMC_GetCmdResp1>
 800c7e6:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800c7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3728      	adds	r7, #40	@ 0x28
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}

0800c7f2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c7f2:	b580      	push	{r7, lr}
 800c7f4:	b088      	sub	sp, #32
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c7fe:	2300      	movs	r3, #0
 800c800:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c802:	2300      	movs	r3, #0
 800c804:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c806:	2300      	movs	r3, #0
 800c808:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c80a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c80e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c810:	f107 0308 	add.w	r3, r7, #8
 800c814:	4619      	mov	r1, r3
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f7ff fe86 	bl	800c528 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 fb67 	bl	800cef0 <SDMMC_GetCmdError>
 800c822:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c824:	69fb      	ldr	r3, [r7, #28]
}
 800c826:	4618      	mov	r0, r3
 800c828:	3720      	adds	r7, #32
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}

0800c82e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c82e:	b580      	push	{r7, lr}
 800c830:	b088      	sub	sp, #32
 800c832:	af00      	add	r7, sp, #0
 800c834:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c836:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800c83a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c83c:	2308      	movs	r3, #8
 800c83e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c840:	2340      	movs	r3, #64	@ 0x40
 800c842:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c844:	2300      	movs	r3, #0
 800c846:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c848:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c84c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c84e:	f107 0308 	add.w	r3, r7, #8
 800c852:	4619      	mov	r1, r3
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f7ff fe67 	bl	800c528 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f000 fafa 	bl	800ce54 <SDMMC_GetCmdResp7>
 800c860:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c862:	69fb      	ldr	r3, [r7, #28]
}
 800c864:	4618      	mov	r0, r3
 800c866:	3720      	adds	r7, #32
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b088      	sub	sp, #32
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c87a:	2337      	movs	r3, #55	@ 0x37
 800c87c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c87e:	2340      	movs	r3, #64	@ 0x40
 800c880:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c882:	2300      	movs	r3, #0
 800c884:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c886:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c88a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c88c:	f107 0308 	add.w	r3, r7, #8
 800c890:	4619      	mov	r1, r3
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f7ff fe48 	bl	800c528 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c898:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c89c:	2137      	movs	r1, #55	@ 0x37
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f000 f8ee 	bl	800ca80 <SDMMC_GetCmdResp1>
 800c8a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8a6:	69fb      	ldr	r3, [r7, #28]
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3720      	adds	r7, #32
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}

0800c8b0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b088      	sub	sp, #32
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c8ba:	683a      	ldr	r2, [r7, #0]
 800c8bc:	4b0d      	ldr	r3, [pc, #52]	@ (800c8f4 <SDMMC_CmdAppOperCommand+0x44>)
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c8c2:	2329      	movs	r3, #41	@ 0x29
 800c8c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c8c6:	2340      	movs	r3, #64	@ 0x40
 800c8c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c8ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c8d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8d4:	f107 0308 	add.w	r3, r7, #8
 800c8d8:	4619      	mov	r1, r3
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f7ff fe24 	bl	800c528 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 fa03 	bl	800ccec <SDMMC_GetCmdResp3>
 800c8e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8e8:	69fb      	ldr	r3, [r7, #28]
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3720      	adds	r7, #32
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
 800c8f2:	bf00      	nop
 800c8f4:	80100000 	.word	0x80100000

0800c8f8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b088      	sub	sp, #32
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c906:	2306      	movs	r3, #6
 800c908:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c90a:	2340      	movs	r3, #64	@ 0x40
 800c90c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c90e:	2300      	movs	r3, #0
 800c910:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c912:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c916:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c918:	f107 0308 	add.w	r3, r7, #8
 800c91c:	4619      	mov	r1, r3
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f7ff fe02 	bl	800c528 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c924:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c928:	2106      	movs	r1, #6
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f000 f8a8 	bl	800ca80 <SDMMC_GetCmdResp1>
 800c930:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c932:	69fb      	ldr	r3, [r7, #28]
}
 800c934:	4618      	mov	r0, r3
 800c936:	3720      	adds	r7, #32
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b088      	sub	sp, #32
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c944:	2300      	movs	r3, #0
 800c946:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c948:	2333      	movs	r3, #51	@ 0x33
 800c94a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c94c:	2340      	movs	r3, #64	@ 0x40
 800c94e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c950:	2300      	movs	r3, #0
 800c952:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c954:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c958:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c95a:	f107 0308 	add.w	r3, r7, #8
 800c95e:	4619      	mov	r1, r3
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f7ff fde1 	bl	800c528 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c96a:	2133      	movs	r1, #51	@ 0x33
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f000 f887 	bl	800ca80 <SDMMC_GetCmdResp1>
 800c972:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c974:	69fb      	ldr	r3, [r7, #28]
}
 800c976:	4618      	mov	r0, r3
 800c978:	3720      	adds	r7, #32
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}

0800c97e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c97e:	b580      	push	{r7, lr}
 800c980:	b088      	sub	sp, #32
 800c982:	af00      	add	r7, sp, #0
 800c984:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c986:	2300      	movs	r3, #0
 800c988:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c98a:	2302      	movs	r3, #2
 800c98c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c98e:	23c0      	movs	r3, #192	@ 0xc0
 800c990:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c992:	2300      	movs	r3, #0
 800c994:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c996:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c99a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c99c:	f107 0308 	add.w	r3, r7, #8
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f7ff fdc0 	bl	800c528 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 f957 	bl	800cc5c <SDMMC_GetCmdResp2>
 800c9ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9b0:	69fb      	ldr	r3, [r7, #28]
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3720      	adds	r7, #32
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}

0800c9ba <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c9ba:	b580      	push	{r7, lr}
 800c9bc:	b088      	sub	sp, #32
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
 800c9c2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c9c8:	2309      	movs	r3, #9
 800c9ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c9cc:	23c0      	movs	r3, #192	@ 0xc0
 800c9ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c9d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9da:	f107 0308 	add.w	r3, r7, #8
 800c9de:	4619      	mov	r1, r3
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f7ff fda1 	bl	800c528 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f000 f938 	bl	800cc5c <SDMMC_GetCmdResp2>
 800c9ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9ee:	69fb      	ldr	r3, [r7, #28]
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3720      	adds	r7, #32
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b088      	sub	sp, #32
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ca02:	2300      	movs	r3, #0
 800ca04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ca06:	2303      	movs	r3, #3
 800ca08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca0a:	2340      	movs	r3, #64	@ 0x40
 800ca0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca18:	f107 0308 	add.w	r3, r7, #8
 800ca1c:	4619      	mov	r1, r3
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f7ff fd82 	bl	800c528 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ca24:	683a      	ldr	r2, [r7, #0]
 800ca26:	2103      	movs	r1, #3
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f000 f99d 	bl	800cd68 <SDMMC_GetCmdResp6>
 800ca2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca30:	69fb      	ldr	r3, [r7, #28]
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3720      	adds	r7, #32
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}

0800ca3a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ca3a:	b580      	push	{r7, lr}
 800ca3c:	b088      	sub	sp, #32
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	6078      	str	r0, [r7, #4]
 800ca42:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ca48:	230d      	movs	r3, #13
 800ca4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca4c:	2340      	movs	r3, #64	@ 0x40
 800ca4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca50:	2300      	movs	r3, #0
 800ca52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca5a:	f107 0308 	add.w	r3, r7, #8
 800ca5e:	4619      	mov	r1, r3
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f7ff fd61 	bl	800c528 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ca66:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ca6a:	210d      	movs	r1, #13
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f000 f807 	bl	800ca80 <SDMMC_GetCmdResp1>
 800ca72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca74:	69fb      	ldr	r3, [r7, #28]
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3720      	adds	r7, #32
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}
	...

0800ca80 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b088      	sub	sp, #32
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	460b      	mov	r3, r1
 800ca8a:	607a      	str	r2, [r7, #4]
 800ca8c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ca8e:	4b70      	ldr	r3, [pc, #448]	@ (800cc50 <SDMMC_GetCmdResp1+0x1d0>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	4a70      	ldr	r2, [pc, #448]	@ (800cc54 <SDMMC_GetCmdResp1+0x1d4>)
 800ca94:	fba2 2303 	umull	r2, r3, r2, r3
 800ca98:	0a5a      	lsrs	r2, r3, #9
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	fb02 f303 	mul.w	r3, r2, r3
 800caa0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800caa2:	69fb      	ldr	r3, [r7, #28]
 800caa4:	1e5a      	subs	r2, r3, #1
 800caa6:	61fa      	str	r2, [r7, #28]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d102      	bne.n	800cab2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800caac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cab0:	e0c9      	b.n	800cc46 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cab6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cab8:	69bb      	ldr	r3, [r7, #24]
 800caba:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d0ef      	beq.n	800caa2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cac2:	69bb      	ldr	r3, [r7, #24]
 800cac4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d1ea      	bne.n	800caa2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cad0:	f003 0304 	and.w	r3, r3, #4
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d004      	beq.n	800cae2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2204      	movs	r2, #4
 800cadc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cade:	2304      	movs	r3, #4
 800cae0:	e0b1      	b.n	800cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cae6:	f003 0301 	and.w	r3, r3, #1
 800caea:	2b00      	cmp	r3, #0
 800caec:	d004      	beq.n	800caf8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	2201      	movs	r2, #1
 800caf2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800caf4:	2301      	movs	r3, #1
 800caf6:	e0a6      	b.n	800cc46 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	22c5      	movs	r2, #197	@ 0xc5
 800cafc:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cafe:	68f8      	ldr	r0, [r7, #12]
 800cb00:	f7ff fd3c 	bl	800c57c <SDMMC_GetCommandResponse>
 800cb04:	4603      	mov	r3, r0
 800cb06:	461a      	mov	r2, r3
 800cb08:	7afb      	ldrb	r3, [r7, #11]
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d001      	beq.n	800cb12 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb0e:	2301      	movs	r3, #1
 800cb10:	e099      	b.n	800cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cb12:	2100      	movs	r1, #0
 800cb14:	68f8      	ldr	r0, [r7, #12]
 800cb16:	f7ff fd3e 	bl	800c596 <SDMMC_GetResponse>
 800cb1a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cb1c:	697a      	ldr	r2, [r7, #20]
 800cb1e:	4b4e      	ldr	r3, [pc, #312]	@ (800cc58 <SDMMC_GetCmdResp1+0x1d8>)
 800cb20:	4013      	ands	r3, r2
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d101      	bne.n	800cb2a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800cb26:	2300      	movs	r3, #0
 800cb28:	e08d      	b.n	800cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	da02      	bge.n	800cb36 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cb30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800cb34:	e087      	b.n	800cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d001      	beq.n	800cb44 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cb40:	2340      	movs	r3, #64	@ 0x40
 800cb42:	e080      	b.n	800cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d001      	beq.n	800cb52 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cb4e:	2380      	movs	r3, #128	@ 0x80
 800cb50:	e079      	b.n	800cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d002      	beq.n	800cb62 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cb5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cb60:	e071      	b.n	800cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d002      	beq.n	800cb72 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cb6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cb70:	e069      	b.n	800cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d002      	beq.n	800cb82 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cb7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb80:	e061      	b.n	800cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d002      	beq.n	800cb92 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cb8c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cb90:	e059      	b.n	800cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d002      	beq.n	800cba2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cb9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cba0:	e051      	b.n	800cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d002      	beq.n	800cbb2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cbac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cbb0:	e049      	b.n	800cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d002      	beq.n	800cbc2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cbbc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800cbc0:	e041      	b.n	800cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d002      	beq.n	800cbd2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800cbcc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cbd0:	e039      	b.n	800cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d002      	beq.n	800cbe2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cbdc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800cbe0:	e031      	b.n	800cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d002      	beq.n	800cbf2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cbec:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800cbf0:	e029      	b.n	800cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d002      	beq.n	800cc02 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cbfc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cc00:	e021      	b.n	800cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d002      	beq.n	800cc12 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cc0c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800cc10:	e019      	b.n	800cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d002      	beq.n	800cc22 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cc1c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800cc20:	e011      	b.n	800cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d002      	beq.n	800cc32 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cc2c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800cc30:	e009      	b.n	800cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	f003 0308 	and.w	r3, r3, #8
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d002      	beq.n	800cc42 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cc3c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800cc40:	e001      	b.n	800cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cc42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3720      	adds	r7, #32
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
 800cc4e:	bf00      	nop
 800cc50:	20000000 	.word	0x20000000
 800cc54:	10624dd3 	.word	0x10624dd3
 800cc58:	fdffe008 	.word	0xfdffe008

0800cc5c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b085      	sub	sp, #20
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc64:	4b1f      	ldr	r3, [pc, #124]	@ (800cce4 <SDMMC_GetCmdResp2+0x88>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4a1f      	ldr	r2, [pc, #124]	@ (800cce8 <SDMMC_GetCmdResp2+0x8c>)
 800cc6a:	fba2 2303 	umull	r2, r3, r2, r3
 800cc6e:	0a5b      	lsrs	r3, r3, #9
 800cc70:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc74:	fb02 f303 	mul.w	r3, r2, r3
 800cc78:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	1e5a      	subs	r2, r3, #1
 800cc7e:	60fa      	str	r2, [r7, #12]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d102      	bne.n	800cc8a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc84:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cc88:	e026      	b.n	800ccd8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc8e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d0ef      	beq.n	800cc7a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d1ea      	bne.n	800cc7a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cca8:	f003 0304 	and.w	r3, r3, #4
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d004      	beq.n	800ccba <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2204      	movs	r2, #4
 800ccb4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ccb6:	2304      	movs	r3, #4
 800ccb8:	e00e      	b.n	800ccd8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccbe:	f003 0301 	and.w	r3, r3, #1
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d004      	beq.n	800ccd0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2201      	movs	r2, #1
 800ccca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cccc:	2301      	movs	r3, #1
 800ccce:	e003      	b.n	800ccd8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	22c5      	movs	r2, #197	@ 0xc5
 800ccd4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ccd6:	2300      	movs	r3, #0
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3714      	adds	r7, #20
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce2:	4770      	bx	lr
 800cce4:	20000000 	.word	0x20000000
 800cce8:	10624dd3 	.word	0x10624dd3

0800ccec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b085      	sub	sp, #20
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ccf4:	4b1a      	ldr	r3, [pc, #104]	@ (800cd60 <SDMMC_GetCmdResp3+0x74>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	4a1a      	ldr	r2, [pc, #104]	@ (800cd64 <SDMMC_GetCmdResp3+0x78>)
 800ccfa:	fba2 2303 	umull	r2, r3, r2, r3
 800ccfe:	0a5b      	lsrs	r3, r3, #9
 800cd00:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd04:	fb02 f303 	mul.w	r3, r2, r3
 800cd08:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	1e5a      	subs	r2, r3, #1
 800cd0e:	60fa      	str	r2, [r7, #12]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d102      	bne.n	800cd1a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cd14:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cd18:	e01b      	b.n	800cd52 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd1e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d0ef      	beq.n	800cd0a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d1ea      	bne.n	800cd0a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd38:	f003 0304 	and.w	r3, r3, #4
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d004      	beq.n	800cd4a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2204      	movs	r2, #4
 800cd44:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cd46:	2304      	movs	r3, #4
 800cd48:	e003      	b.n	800cd52 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	22c5      	movs	r2, #197	@ 0xc5
 800cd4e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cd50:	2300      	movs	r3, #0
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3714      	adds	r7, #20
 800cd56:	46bd      	mov	sp, r7
 800cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5c:	4770      	bx	lr
 800cd5e:	bf00      	nop
 800cd60:	20000000 	.word	0x20000000
 800cd64:	10624dd3 	.word	0x10624dd3

0800cd68 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b088      	sub	sp, #32
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	60f8      	str	r0, [r7, #12]
 800cd70:	460b      	mov	r3, r1
 800cd72:	607a      	str	r2, [r7, #4]
 800cd74:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cd76:	4b35      	ldr	r3, [pc, #212]	@ (800ce4c <SDMMC_GetCmdResp6+0xe4>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4a35      	ldr	r2, [pc, #212]	@ (800ce50 <SDMMC_GetCmdResp6+0xe8>)
 800cd7c:	fba2 2303 	umull	r2, r3, r2, r3
 800cd80:	0a5b      	lsrs	r3, r3, #9
 800cd82:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd86:	fb02 f303 	mul.w	r3, r2, r3
 800cd8a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800cd8c:	69fb      	ldr	r3, [r7, #28]
 800cd8e:	1e5a      	subs	r2, r3, #1
 800cd90:	61fa      	str	r2, [r7, #28]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d102      	bne.n	800cd9c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cd96:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cd9a:	e052      	b.n	800ce42 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cda0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cda2:	69bb      	ldr	r3, [r7, #24]
 800cda4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d0ef      	beq.n	800cd8c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cdac:	69bb      	ldr	r3, [r7, #24]
 800cdae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d1ea      	bne.n	800cd8c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdba:	f003 0304 	and.w	r3, r3, #4
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d004      	beq.n	800cdcc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2204      	movs	r2, #4
 800cdc6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cdc8:	2304      	movs	r3, #4
 800cdca:	e03a      	b.n	800ce42 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdd0:	f003 0301 	and.w	r3, r3, #1
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d004      	beq.n	800cde2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	2201      	movs	r2, #1
 800cddc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cdde:	2301      	movs	r3, #1
 800cde0:	e02f      	b.n	800ce42 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cde2:	68f8      	ldr	r0, [r7, #12]
 800cde4:	f7ff fbca 	bl	800c57c <SDMMC_GetCommandResponse>
 800cde8:	4603      	mov	r3, r0
 800cdea:	461a      	mov	r2, r3
 800cdec:	7afb      	ldrb	r3, [r7, #11]
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d001      	beq.n	800cdf6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	e025      	b.n	800ce42 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	22c5      	movs	r2, #197	@ 0xc5
 800cdfa:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cdfc:	2100      	movs	r1, #0
 800cdfe:	68f8      	ldr	r0, [r7, #12]
 800ce00:	f7ff fbc9 	bl	800c596 <SDMMC_GetResponse>
 800ce04:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d106      	bne.n	800ce1e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	0c1b      	lsrs	r3, r3, #16
 800ce14:	b29a      	uxth	r2, r3
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	e011      	b.n	800ce42 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d002      	beq.n	800ce2e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ce28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ce2c:	e009      	b.n	800ce42 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d002      	beq.n	800ce3e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ce38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ce3c:	e001      	b.n	800ce42 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ce3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3720      	adds	r7, #32
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}
 800ce4a:	bf00      	nop
 800ce4c:	20000000 	.word	0x20000000
 800ce50:	10624dd3 	.word	0x10624dd3

0800ce54 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ce54:	b480      	push	{r7}
 800ce56:	b085      	sub	sp, #20
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ce5c:	4b22      	ldr	r3, [pc, #136]	@ (800cee8 <SDMMC_GetCmdResp7+0x94>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4a22      	ldr	r2, [pc, #136]	@ (800ceec <SDMMC_GetCmdResp7+0x98>)
 800ce62:	fba2 2303 	umull	r2, r3, r2, r3
 800ce66:	0a5b      	lsrs	r3, r3, #9
 800ce68:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce6c:	fb02 f303 	mul.w	r3, r2, r3
 800ce70:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	1e5a      	subs	r2, r3, #1
 800ce76:	60fa      	str	r2, [r7, #12]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d102      	bne.n	800ce82 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce7c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ce80:	e02c      	b.n	800cedc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce86:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d0ef      	beq.n	800ce72 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d1ea      	bne.n	800ce72 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cea0:	f003 0304 	and.w	r3, r3, #4
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d004      	beq.n	800ceb2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2204      	movs	r2, #4
 800ceac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ceae:	2304      	movs	r3, #4
 800ceb0:	e014      	b.n	800cedc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ceb6:	f003 0301 	and.w	r3, r3, #1
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d004      	beq.n	800cec8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2201      	movs	r2, #1
 800cec2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cec4:	2301      	movs	r3, #1
 800cec6:	e009      	b.n	800cedc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d002      	beq.n	800ceda <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2240      	movs	r2, #64	@ 0x40
 800ced8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ceda:	2300      	movs	r3, #0
  
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3714      	adds	r7, #20
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr
 800cee8:	20000000 	.word	0x20000000
 800ceec:	10624dd3 	.word	0x10624dd3

0800cef0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800cef0:	b480      	push	{r7}
 800cef2:	b085      	sub	sp, #20
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cef8:	4b11      	ldr	r3, [pc, #68]	@ (800cf40 <SDMMC_GetCmdError+0x50>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4a11      	ldr	r2, [pc, #68]	@ (800cf44 <SDMMC_GetCmdError+0x54>)
 800cefe:	fba2 2303 	umull	r2, r3, r2, r3
 800cf02:	0a5b      	lsrs	r3, r3, #9
 800cf04:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf08:	fb02 f303 	mul.w	r3, r2, r3
 800cf0c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	1e5a      	subs	r2, r3, #1
 800cf12:	60fa      	str	r2, [r7, #12]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d102      	bne.n	800cf1e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cf18:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cf1c:	e009      	b.n	800cf32 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d0f1      	beq.n	800cf0e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	22c5      	movs	r2, #197	@ 0xc5
 800cf2e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800cf30:	2300      	movs	r3, #0
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3714      	adds	r7, #20
 800cf36:	46bd      	mov	sp, r7
 800cf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3c:	4770      	bx	lr
 800cf3e:	bf00      	nop
 800cf40:	20000000 	.word	0x20000000
 800cf44:	10624dd3 	.word	0x10624dd3

0800cf48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cf48:	b084      	sub	sp, #16
 800cf4a:	b580      	push	{r7, lr}
 800cf4c:	b084      	sub	sp, #16
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	6078      	str	r0, [r7, #4]
 800cf52:	f107 001c 	add.w	r0, r7, #28
 800cf56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cf5a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800cf5e:	2b01      	cmp	r3, #1
 800cf60:	d121      	bne.n	800cfa6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf66:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	68da      	ldr	r2, [r3, #12]
 800cf72:	4b21      	ldr	r3, [pc, #132]	@ (800cff8 <USB_CoreInit+0xb0>)
 800cf74:	4013      	ands	r3, r2
 800cf76:	687a      	ldr	r2, [r7, #4]
 800cf78:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	68db      	ldr	r3, [r3, #12]
 800cf7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cf86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800cf8a:	2b01      	cmp	r3, #1
 800cf8c:	d105      	bne.n	800cf9a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	68db      	ldr	r3, [r3, #12]
 800cf92:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f000 f9d4 	bl	800d348 <USB_CoreReset>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	73fb      	strb	r3, [r7, #15]
 800cfa4:	e010      	b.n	800cfc8 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	68db      	ldr	r3, [r3, #12]
 800cfaa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f000 f9c8 	bl	800d348 <USB_CoreReset>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfc0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800cfc8:	7fbb      	ldrb	r3, [r7, #30]
 800cfca:	2b01      	cmp	r3, #1
 800cfcc:	d10b      	bne.n	800cfe6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	689b      	ldr	r3, [r3, #8]
 800cfd2:	f043 0206 	orr.w	r2, r3, #6
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	689b      	ldr	r3, [r3, #8]
 800cfde:	f043 0220 	orr.w	r2, r3, #32
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cfe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3710      	adds	r7, #16
 800cfec:	46bd      	mov	sp, r7
 800cfee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cff2:	b004      	add	sp, #16
 800cff4:	4770      	bx	lr
 800cff6:	bf00      	nop
 800cff8:	ffbdffbf 	.word	0xffbdffbf

0800cffc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b083      	sub	sp, #12
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	689b      	ldr	r3, [r3, #8]
 800d008:	f043 0201 	orr.w	r2, r3, #1
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d010:	2300      	movs	r3, #0
}
 800d012:	4618      	mov	r0, r3
 800d014:	370c      	adds	r7, #12
 800d016:	46bd      	mov	sp, r7
 800d018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01c:	4770      	bx	lr

0800d01e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d01e:	b480      	push	{r7}
 800d020:	b083      	sub	sp, #12
 800d022:	af00      	add	r7, sp, #0
 800d024:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	689b      	ldr	r3, [r3, #8]
 800d02a:	f023 0201 	bic.w	r2, r3, #1
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d032:	2300      	movs	r3, #0
}
 800d034:	4618      	mov	r0, r3
 800d036:	370c      	adds	r7, #12
 800d038:	46bd      	mov	sp, r7
 800d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03e:	4770      	bx	lr

0800d040 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b084      	sub	sp, #16
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
 800d048:	460b      	mov	r3, r1
 800d04a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d04c:	2300      	movs	r3, #0
 800d04e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	68db      	ldr	r3, [r3, #12]
 800d054:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d05c:	78fb      	ldrb	r3, [r7, #3]
 800d05e:	2b01      	cmp	r3, #1
 800d060:	d115      	bne.n	800d08e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	68db      	ldr	r3, [r3, #12]
 800d066:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d06e:	200a      	movs	r0, #10
 800d070:	f7f5 ff26 	bl	8002ec0 <HAL_Delay>
      ms += 10U;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	330a      	adds	r3, #10
 800d078:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f000 f956 	bl	800d32c <USB_GetMode>
 800d080:	4603      	mov	r3, r0
 800d082:	2b01      	cmp	r3, #1
 800d084:	d01e      	beq.n	800d0c4 <USB_SetCurrentMode+0x84>
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	2bc7      	cmp	r3, #199	@ 0xc7
 800d08a:	d9f0      	bls.n	800d06e <USB_SetCurrentMode+0x2e>
 800d08c:	e01a      	b.n	800d0c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d08e:	78fb      	ldrb	r3, [r7, #3]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d115      	bne.n	800d0c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	68db      	ldr	r3, [r3, #12]
 800d098:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d0a0:	200a      	movs	r0, #10
 800d0a2:	f7f5 ff0d 	bl	8002ec0 <HAL_Delay>
      ms += 10U;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	330a      	adds	r3, #10
 800d0aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f000 f93d 	bl	800d32c <USB_GetMode>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d005      	beq.n	800d0c4 <USB_SetCurrentMode+0x84>
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	2bc7      	cmp	r3, #199	@ 0xc7
 800d0bc:	d9f0      	bls.n	800d0a0 <USB_SetCurrentMode+0x60>
 800d0be:	e001      	b.n	800d0c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	e005      	b.n	800d0d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	2bc8      	cmp	r3, #200	@ 0xc8
 800d0c8:	d101      	bne.n	800d0ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	e000      	b.n	800d0d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d0ce:	2300      	movs	r3, #0
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3710      	adds	r7, #16
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}

0800d0d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b085      	sub	sp, #20
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	3301      	adds	r3, #1
 800d0ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d0f2:	d901      	bls.n	800d0f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d0f4:	2303      	movs	r3, #3
 800d0f6:	e01b      	b.n	800d130 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	691b      	ldr	r3, [r3, #16]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	daf2      	bge.n	800d0e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d100:	2300      	movs	r3, #0
 800d102:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	019b      	lsls	r3, r3, #6
 800d108:	f043 0220 	orr.w	r2, r3, #32
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	3301      	adds	r3, #1
 800d114:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d11c:	d901      	bls.n	800d122 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d11e:	2303      	movs	r3, #3
 800d120:	e006      	b.n	800d130 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	691b      	ldr	r3, [r3, #16]
 800d126:	f003 0320 	and.w	r3, r3, #32
 800d12a:	2b20      	cmp	r3, #32
 800d12c:	d0f0      	beq.n	800d110 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d12e:	2300      	movs	r3, #0
}
 800d130:	4618      	mov	r0, r3
 800d132:	3714      	adds	r7, #20
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr

0800d13c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d13c:	b480      	push	{r7}
 800d13e:	b085      	sub	sp, #20
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d144:	2300      	movs	r3, #0
 800d146:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	3301      	adds	r3, #1
 800d14c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d154:	d901      	bls.n	800d15a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d156:	2303      	movs	r3, #3
 800d158:	e018      	b.n	800d18c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	691b      	ldr	r3, [r3, #16]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	daf2      	bge.n	800d148 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d162:	2300      	movs	r3, #0
 800d164:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2210      	movs	r2, #16
 800d16a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	3301      	adds	r3, #1
 800d170:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d178:	d901      	bls.n	800d17e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d17a:	2303      	movs	r3, #3
 800d17c:	e006      	b.n	800d18c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	691b      	ldr	r3, [r3, #16]
 800d182:	f003 0310 	and.w	r3, r3, #16
 800d186:	2b10      	cmp	r3, #16
 800d188:	d0f0      	beq.n	800d16c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d18a:	2300      	movs	r3, #0
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3714      	adds	r7, #20
 800d190:	46bd      	mov	sp, r7
 800d192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d196:	4770      	bx	lr

0800d198 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d198:	b480      	push	{r7}
 800d19a:	b089      	sub	sp, #36	@ 0x24
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	60b9      	str	r1, [r7, #8]
 800d1a2:	4611      	mov	r1, r2
 800d1a4:	461a      	mov	r2, r3
 800d1a6:	460b      	mov	r3, r1
 800d1a8:	71fb      	strb	r3, [r7, #7]
 800d1aa:	4613      	mov	r3, r2
 800d1ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d1b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d123      	bne.n	800d206 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d1be:	88bb      	ldrh	r3, [r7, #4]
 800d1c0:	3303      	adds	r3, #3
 800d1c2:	089b      	lsrs	r3, r3, #2
 800d1c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	61bb      	str	r3, [r7, #24]
 800d1ca:	e018      	b.n	800d1fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d1cc:	79fb      	ldrb	r3, [r7, #7]
 800d1ce:	031a      	lsls	r2, r3, #12
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	4413      	add	r3, r2
 800d1d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d1d8:	461a      	mov	r2, r3
 800d1da:	69fb      	ldr	r3, [r7, #28]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d1e0:	69fb      	ldr	r3, [r7, #28]
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d1e6:	69fb      	ldr	r3, [r7, #28]
 800d1e8:	3301      	adds	r3, #1
 800d1ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d1ec:	69fb      	ldr	r3, [r7, #28]
 800d1ee:	3301      	adds	r3, #1
 800d1f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d1f2:	69fb      	ldr	r3, [r7, #28]
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d1f8:	69bb      	ldr	r3, [r7, #24]
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	61bb      	str	r3, [r7, #24]
 800d1fe:	69ba      	ldr	r2, [r7, #24]
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	429a      	cmp	r2, r3
 800d204:	d3e2      	bcc.n	800d1cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d206:	2300      	movs	r3, #0
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3724      	adds	r7, #36	@ 0x24
 800d20c:	46bd      	mov	sp, r7
 800d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d212:	4770      	bx	lr

0800d214 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d214:	b480      	push	{r7}
 800d216:	b08b      	sub	sp, #44	@ 0x2c
 800d218:	af00      	add	r7, sp, #0
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	4613      	mov	r3, r2
 800d220:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d22a:	88fb      	ldrh	r3, [r7, #6]
 800d22c:	089b      	lsrs	r3, r3, #2
 800d22e:	b29b      	uxth	r3, r3
 800d230:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d232:	88fb      	ldrh	r3, [r7, #6]
 800d234:	f003 0303 	and.w	r3, r3, #3
 800d238:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d23a:	2300      	movs	r3, #0
 800d23c:	623b      	str	r3, [r7, #32]
 800d23e:	e014      	b.n	800d26a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d240:	69bb      	ldr	r3, [r7, #24]
 800d242:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d246:	681a      	ldr	r2, [r3, #0]
 800d248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d24a:	601a      	str	r2, [r3, #0]
    pDest++;
 800d24c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d24e:	3301      	adds	r3, #1
 800d250:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d254:	3301      	adds	r3, #1
 800d256:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d25a:	3301      	adds	r3, #1
 800d25c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d260:	3301      	adds	r3, #1
 800d262:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800d264:	6a3b      	ldr	r3, [r7, #32]
 800d266:	3301      	adds	r3, #1
 800d268:	623b      	str	r3, [r7, #32]
 800d26a:	6a3a      	ldr	r2, [r7, #32]
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	429a      	cmp	r2, r3
 800d270:	d3e6      	bcc.n	800d240 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d272:	8bfb      	ldrh	r3, [r7, #30]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d01e      	beq.n	800d2b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d278:	2300      	movs	r3, #0
 800d27a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d27c:	69bb      	ldr	r3, [r7, #24]
 800d27e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d282:	461a      	mov	r2, r3
 800d284:	f107 0310 	add.w	r3, r7, #16
 800d288:	6812      	ldr	r2, [r2, #0]
 800d28a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d28c:	693a      	ldr	r2, [r7, #16]
 800d28e:	6a3b      	ldr	r3, [r7, #32]
 800d290:	b2db      	uxtb	r3, r3
 800d292:	00db      	lsls	r3, r3, #3
 800d294:	fa22 f303 	lsr.w	r3, r2, r3
 800d298:	b2da      	uxtb	r2, r3
 800d29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d29c:	701a      	strb	r2, [r3, #0]
      i++;
 800d29e:	6a3b      	ldr	r3, [r7, #32]
 800d2a0:	3301      	adds	r3, #1
 800d2a2:	623b      	str	r3, [r7, #32]
      pDest++;
 800d2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a6:	3301      	adds	r3, #1
 800d2a8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800d2aa:	8bfb      	ldrh	r3, [r7, #30]
 800d2ac:	3b01      	subs	r3, #1
 800d2ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d2b0:	8bfb      	ldrh	r3, [r7, #30]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d1ea      	bne.n	800d28c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	372c      	adds	r7, #44	@ 0x2c
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c2:	4770      	bx	lr

0800d2c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b085      	sub	sp, #20
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	695b      	ldr	r3, [r3, #20]
 800d2d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	699b      	ldr	r3, [r3, #24]
 800d2d6:	68fa      	ldr	r2, [r7, #12]
 800d2d8:	4013      	ands	r3, r2
 800d2da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3714      	adds	r7, #20
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e8:	4770      	bx	lr

0800d2ea <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800d2ea:	b480      	push	{r7}
 800d2ec:	b085      	sub	sp, #20
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	6078      	str	r0, [r7, #4]
 800d2f2:	460b      	mov	r3, r1
 800d2f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800d2fa:	78fb      	ldrb	r3, [r7, #3]
 800d2fc:	015a      	lsls	r2, r3, #5
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	4413      	add	r3, r2
 800d302:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d306:	689b      	ldr	r3, [r3, #8]
 800d308:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800d30a:	78fb      	ldrb	r3, [r7, #3]
 800d30c:	015a      	lsls	r2, r3, #5
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	4413      	add	r3, r2
 800d312:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d316:	68db      	ldr	r3, [r3, #12]
 800d318:	68ba      	ldr	r2, [r7, #8]
 800d31a:	4013      	ands	r3, r2
 800d31c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d31e:	68bb      	ldr	r3, [r7, #8]
}
 800d320:	4618      	mov	r0, r3
 800d322:	3714      	adds	r7, #20
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr

0800d32c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b083      	sub	sp, #12
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	695b      	ldr	r3, [r3, #20]
 800d338:	f003 0301 	and.w	r3, r3, #1
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	370c      	adds	r7, #12
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr

0800d348 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d348:	b480      	push	{r7}
 800d34a:	b085      	sub	sp, #20
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d350:	2300      	movs	r3, #0
 800d352:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	3301      	adds	r3, #1
 800d358:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d360:	d901      	bls.n	800d366 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d362:	2303      	movs	r3, #3
 800d364:	e022      	b.n	800d3ac <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	691b      	ldr	r3, [r3, #16]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	daf2      	bge.n	800d354 <USB_CoreReset+0xc>

  count = 10U;
 800d36e:	230a      	movs	r3, #10
 800d370:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800d372:	e002      	b.n	800d37a <USB_CoreReset+0x32>
  {
    count--;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	3b01      	subs	r3, #1
 800d378:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d1f9      	bne.n	800d374 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	691b      	ldr	r3, [r3, #16]
 800d384:	f043 0201 	orr.w	r2, r3, #1
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	3301      	adds	r3, #1
 800d390:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d398:	d901      	bls.n	800d39e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800d39a:	2303      	movs	r3, #3
 800d39c:	e006      	b.n	800d3ac <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	691b      	ldr	r3, [r3, #16]
 800d3a2:	f003 0301 	and.w	r3, r3, #1
 800d3a6:	2b01      	cmp	r3, #1
 800d3a8:	d0f0      	beq.n	800d38c <USB_CoreReset+0x44>

  return HAL_OK;
 800d3aa:	2300      	movs	r3, #0
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3714      	adds	r7, #20
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b6:	4770      	bx	lr

0800d3b8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d3b8:	b084      	sub	sp, #16
 800d3ba:	b580      	push	{r7, lr}
 800d3bc:	b086      	sub	sp, #24
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	6078      	str	r0, [r7, #4]
 800d3c2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d3c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d3d8:	461a      	mov	r2, r3
 800d3da:	2300      	movs	r3, #0
 800d3dc:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3e2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	68db      	ldr	r3, [r3, #12]
 800d3ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d119      	bne.n	800d42a <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800d3f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d3fa:	2b01      	cmp	r3, #1
 800d3fc:	d10a      	bne.n	800d414 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	68fa      	ldr	r2, [r7, #12]
 800d408:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d40c:	f043 0304 	orr.w	r3, r3, #4
 800d410:	6013      	str	r3, [r2, #0]
 800d412:	e014      	b.n	800d43e <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	68fa      	ldr	r2, [r7, #12]
 800d41e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d422:	f023 0304 	bic.w	r3, r3, #4
 800d426:	6013      	str	r3, [r2, #0]
 800d428:	e009      	b.n	800d43e <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	68fa      	ldr	r2, [r7, #12]
 800d434:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d438:	f023 0304 	bic.w	r3, r3, #4
 800d43c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d43e:	2110      	movs	r1, #16
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f7ff fe49 	bl	800d0d8 <USB_FlushTxFifo>
 800d446:	4603      	mov	r3, r0
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d001      	beq.n	800d450 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800d44c:	2301      	movs	r3, #1
 800d44e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f7ff fe73 	bl	800d13c <USB_FlushRxFifo>
 800d456:	4603      	mov	r3, r0
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d001      	beq.n	800d460 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800d45c:	2301      	movs	r3, #1
 800d45e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d460:	2300      	movs	r3, #0
 800d462:	613b      	str	r3, [r7, #16]
 800d464:	e015      	b.n	800d492 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	015a      	lsls	r2, r3, #5
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	4413      	add	r3, r2
 800d46e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d472:	461a      	mov	r2, r3
 800d474:	f04f 33ff 	mov.w	r3, #4294967295
 800d478:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	015a      	lsls	r2, r3, #5
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	4413      	add	r3, r2
 800d482:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d486:	461a      	mov	r2, r3
 800d488:	2300      	movs	r3, #0
 800d48a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	3301      	adds	r3, #1
 800d490:	613b      	str	r3, [r7, #16]
 800d492:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d496:	461a      	mov	r2, r3
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d3e3      	bcc.n	800d466 <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d4aa:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	4a18      	ldr	r2, [pc, #96]	@ (800d510 <USB_HostInit+0x158>)
 800d4b0:	4293      	cmp	r3, r2
 800d4b2:	d10b      	bne.n	800d4cc <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d4ba:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	4a15      	ldr	r2, [pc, #84]	@ (800d514 <USB_HostInit+0x15c>)
 800d4c0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	4a14      	ldr	r2, [pc, #80]	@ (800d518 <USB_HostInit+0x160>)
 800d4c6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800d4ca:	e009      	b.n	800d4e0 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2280      	movs	r2, #128	@ 0x80
 800d4d0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	4a11      	ldr	r2, [pc, #68]	@ (800d51c <USB_HostInit+0x164>)
 800d4d6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	4a11      	ldr	r2, [pc, #68]	@ (800d520 <USB_HostInit+0x168>)
 800d4dc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d4e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d105      	bne.n	800d4f4 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	699b      	ldr	r3, [r3, #24]
 800d4ec:	f043 0210 	orr.w	r2, r3, #16
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	699a      	ldr	r2, [r3, #24]
 800d4f8:	4b0a      	ldr	r3, [pc, #40]	@ (800d524 <USB_HostInit+0x16c>)
 800d4fa:	4313      	orrs	r3, r2
 800d4fc:	687a      	ldr	r2, [r7, #4]
 800d4fe:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800d500:	7dfb      	ldrb	r3, [r7, #23]
}
 800d502:	4618      	mov	r0, r3
 800d504:	3718      	adds	r7, #24
 800d506:	46bd      	mov	sp, r7
 800d508:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d50c:	b004      	add	sp, #16
 800d50e:	4770      	bx	lr
 800d510:	40040000 	.word	0x40040000
 800d514:	01000200 	.word	0x01000200
 800d518:	00e00300 	.word	0x00e00300
 800d51c:	00600080 	.word	0x00600080
 800d520:	004000e0 	.word	0x004000e0
 800d524:	a3200008 	.word	0xa3200008

0800d528 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800d528:	b480      	push	{r7}
 800d52a:	b085      	sub	sp, #20
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	460b      	mov	r3, r1
 800d532:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	68fa      	ldr	r2, [r7, #12]
 800d542:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d546:	f023 0303 	bic.w	r3, r3, #3
 800d54a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d552:	681a      	ldr	r2, [r3, #0]
 800d554:	78fb      	ldrb	r3, [r7, #3]
 800d556:	f003 0303 	and.w	r3, r3, #3
 800d55a:	68f9      	ldr	r1, [r7, #12]
 800d55c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800d560:	4313      	orrs	r3, r2
 800d562:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d564:	78fb      	ldrb	r3, [r7, #3]
 800d566:	2b01      	cmp	r3, #1
 800d568:	d107      	bne.n	800d57a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d570:	461a      	mov	r2, r3
 800d572:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800d576:	6053      	str	r3, [r2, #4]
 800d578:	e00c      	b.n	800d594 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800d57a:	78fb      	ldrb	r3, [r7, #3]
 800d57c:	2b02      	cmp	r3, #2
 800d57e:	d107      	bne.n	800d590 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d586:	461a      	mov	r2, r3
 800d588:	f241 7370 	movw	r3, #6000	@ 0x1770
 800d58c:	6053      	str	r3, [r2, #4]
 800d58e:	e001      	b.n	800d594 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800d590:	2301      	movs	r3, #1
 800d592:	e000      	b.n	800d596 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800d594:	2300      	movs	r3, #0
}
 800d596:	4618      	mov	r0, r3
 800d598:	3714      	adds	r7, #20
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr

0800d5a2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800d5a2:	b580      	push	{r7, lr}
 800d5a4:	b084      	sub	sp, #16
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800d5c2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	68fa      	ldr	r2, [r7, #12]
 800d5c8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800d5cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d5d0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800d5d2:	2064      	movs	r0, #100	@ 0x64
 800d5d4:	f7f5 fc74 	bl	8002ec0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	68fa      	ldr	r2, [r7, #12]
 800d5dc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800d5e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d5e4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800d5e6:	200a      	movs	r0, #10
 800d5e8:	f7f5 fc6a 	bl	8002ec0 <HAL_Delay>

  return HAL_OK;
 800d5ec:	2300      	movs	r3, #0
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3710      	adds	r7, #16
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}

0800d5f6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d5f6:	b480      	push	{r7}
 800d5f8:	b085      	sub	sp, #20
 800d5fa:	af00      	add	r7, sp, #0
 800d5fc:	6078      	str	r0, [r7, #4]
 800d5fe:	460b      	mov	r3, r1
 800d600:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d606:	2300      	movs	r3, #0
 800d608:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800d61a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d622:	2b00      	cmp	r3, #0
 800d624:	d109      	bne.n	800d63a <USB_DriveVbus+0x44>
 800d626:	78fb      	ldrb	r3, [r7, #3]
 800d628:	2b01      	cmp	r3, #1
 800d62a:	d106      	bne.n	800d63a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	68fa      	ldr	r2, [r7, #12]
 800d630:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800d634:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d638:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d644:	d109      	bne.n	800d65a <USB_DriveVbus+0x64>
 800d646:	78fb      	ldrb	r3, [r7, #3]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d106      	bne.n	800d65a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	68fa      	ldr	r2, [r7, #12]
 800d650:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800d654:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d658:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800d65a:	2300      	movs	r3, #0
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3714      	adds	r7, #20
 800d660:	46bd      	mov	sp, r7
 800d662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d666:	4770      	bx	lr

0800d668 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800d668:	b480      	push	{r7}
 800d66a:	b085      	sub	sp, #20
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d674:	2300      	movs	r3, #0
 800d676:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	0c5b      	lsrs	r3, r3, #17
 800d686:	f003 0303 	and.w	r3, r3, #3
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3714      	adds	r7, #20
 800d68e:	46bd      	mov	sp, r7
 800d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d694:	4770      	bx	lr

0800d696 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800d696:	b480      	push	{r7}
 800d698:	b085      	sub	sp, #20
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d6a8:	689b      	ldr	r3, [r3, #8]
 800d6aa:	b29b      	uxth	r3, r3
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3714      	adds	r7, #20
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b6:	4770      	bx	lr

0800d6b8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b088      	sub	sp, #32
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
 800d6c0:	4608      	mov	r0, r1
 800d6c2:	4611      	mov	r1, r2
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	70fb      	strb	r3, [r7, #3]
 800d6ca:	460b      	mov	r3, r1
 800d6cc:	70bb      	strb	r3, [r7, #2]
 800d6ce:	4613      	mov	r3, r2
 800d6d0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800d6da:	78fb      	ldrb	r3, [r7, #3]
 800d6dc:	015a      	lsls	r2, r3, #5
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	4413      	add	r3, r2
 800d6e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d6e6:	461a      	mov	r2, r3
 800d6e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d6ec:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800d6ee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d6f2:	2b03      	cmp	r3, #3
 800d6f4:	d87c      	bhi.n	800d7f0 <USB_HC_Init+0x138>
 800d6f6:	a201      	add	r2, pc, #4	@ (adr r2, 800d6fc <USB_HC_Init+0x44>)
 800d6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6fc:	0800d70d 	.word	0x0800d70d
 800d700:	0800d7b3 	.word	0x0800d7b3
 800d704:	0800d70d 	.word	0x0800d70d
 800d708:	0800d775 	.word	0x0800d775
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d70c:	78fb      	ldrb	r3, [r7, #3]
 800d70e:	015a      	lsls	r2, r3, #5
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	4413      	add	r3, r2
 800d714:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d718:	461a      	mov	r2, r3
 800d71a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800d71e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800d720:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d724:	2b00      	cmp	r3, #0
 800d726:	da10      	bge.n	800d74a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d728:	78fb      	ldrb	r3, [r7, #3]
 800d72a:	015a      	lsls	r2, r3, #5
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	4413      	add	r3, r2
 800d730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d734:	68db      	ldr	r3, [r3, #12]
 800d736:	78fa      	ldrb	r2, [r7, #3]
 800d738:	0151      	lsls	r1, r2, #5
 800d73a:	693a      	ldr	r2, [r7, #16]
 800d73c:	440a      	add	r2, r1
 800d73e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d742:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d746:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800d748:	e055      	b.n	800d7f6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	4a6f      	ldr	r2, [pc, #444]	@ (800d90c <USB_HC_Init+0x254>)
 800d74e:	4293      	cmp	r3, r2
 800d750:	d151      	bne.n	800d7f6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800d752:	78fb      	ldrb	r3, [r7, #3]
 800d754:	015a      	lsls	r2, r3, #5
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	4413      	add	r3, r2
 800d75a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d75e:	68db      	ldr	r3, [r3, #12]
 800d760:	78fa      	ldrb	r2, [r7, #3]
 800d762:	0151      	lsls	r1, r2, #5
 800d764:	693a      	ldr	r2, [r7, #16]
 800d766:	440a      	add	r2, r1
 800d768:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d76c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800d770:	60d3      	str	r3, [r2, #12]
      break;
 800d772:	e040      	b.n	800d7f6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d774:	78fb      	ldrb	r3, [r7, #3]
 800d776:	015a      	lsls	r2, r3, #5
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	4413      	add	r3, r2
 800d77c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d780:	461a      	mov	r2, r3
 800d782:	f240 639d 	movw	r3, #1693	@ 0x69d
 800d786:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d788:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	da34      	bge.n	800d7fa <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d790:	78fb      	ldrb	r3, [r7, #3]
 800d792:	015a      	lsls	r2, r3, #5
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	4413      	add	r3, r2
 800d798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d79c:	68db      	ldr	r3, [r3, #12]
 800d79e:	78fa      	ldrb	r2, [r7, #3]
 800d7a0:	0151      	lsls	r1, r2, #5
 800d7a2:	693a      	ldr	r2, [r7, #16]
 800d7a4:	440a      	add	r2, r1
 800d7a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d7aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d7ae:	60d3      	str	r3, [r2, #12]
      }

      break;
 800d7b0:	e023      	b.n	800d7fa <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d7b2:	78fb      	ldrb	r3, [r7, #3]
 800d7b4:	015a      	lsls	r2, r3, #5
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	4413      	add	r3, r2
 800d7ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d7be:	461a      	mov	r2, r3
 800d7c0:	f240 2325 	movw	r3, #549	@ 0x225
 800d7c4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d7c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	da17      	bge.n	800d7fe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d7ce:	78fb      	ldrb	r3, [r7, #3]
 800d7d0:	015a      	lsls	r2, r3, #5
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	4413      	add	r3, r2
 800d7d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d7da:	68db      	ldr	r3, [r3, #12]
 800d7dc:	78fa      	ldrb	r2, [r7, #3]
 800d7de:	0151      	lsls	r1, r2, #5
 800d7e0:	693a      	ldr	r2, [r7, #16]
 800d7e2:	440a      	add	r2, r1
 800d7e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d7e8:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800d7ec:	60d3      	str	r3, [r2, #12]
      }
      break;
 800d7ee:	e006      	b.n	800d7fe <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	77fb      	strb	r3, [r7, #31]
      break;
 800d7f4:	e004      	b.n	800d800 <USB_HC_Init+0x148>
      break;
 800d7f6:	bf00      	nop
 800d7f8:	e002      	b.n	800d800 <USB_HC_Init+0x148>
      break;
 800d7fa:	bf00      	nop
 800d7fc:	e000      	b.n	800d800 <USB_HC_Init+0x148>
      break;
 800d7fe:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800d800:	78fb      	ldrb	r3, [r7, #3]
 800d802:	015a      	lsls	r2, r3, #5
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	4413      	add	r3, r2
 800d808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d80c:	461a      	mov	r2, r3
 800d80e:	2300      	movs	r3, #0
 800d810:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800d812:	78fb      	ldrb	r3, [r7, #3]
 800d814:	015a      	lsls	r2, r3, #5
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	4413      	add	r3, r2
 800d81a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d81e:	68db      	ldr	r3, [r3, #12]
 800d820:	78fa      	ldrb	r2, [r7, #3]
 800d822:	0151      	lsls	r1, r2, #5
 800d824:	693a      	ldr	r2, [r7, #16]
 800d826:	440a      	add	r2, r1
 800d828:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d82c:	f043 0302 	orr.w	r3, r3, #2
 800d830:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d838:	699a      	ldr	r2, [r3, #24]
 800d83a:	78fb      	ldrb	r3, [r7, #3]
 800d83c:	f003 030f 	and.w	r3, r3, #15
 800d840:	2101      	movs	r1, #1
 800d842:	fa01 f303 	lsl.w	r3, r1, r3
 800d846:	6939      	ldr	r1, [r7, #16]
 800d848:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800d84c:	4313      	orrs	r3, r2
 800d84e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	699b      	ldr	r3, [r3, #24]
 800d854:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800d85c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d860:	2b00      	cmp	r3, #0
 800d862:	da03      	bge.n	800d86c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800d864:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d868:	61bb      	str	r3, [r7, #24]
 800d86a:	e001      	b.n	800d870 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800d86c:	2300      	movs	r3, #0
 800d86e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f7ff fef9 	bl	800d668 <USB_GetHostSpeed>
 800d876:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800d878:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d87c:	2b02      	cmp	r3, #2
 800d87e:	d106      	bne.n	800d88e <USB_HC_Init+0x1d6>
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	2b02      	cmp	r3, #2
 800d884:	d003      	beq.n	800d88e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800d886:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d88a:	617b      	str	r3, [r7, #20]
 800d88c:	e001      	b.n	800d892 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800d88e:	2300      	movs	r3, #0
 800d890:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d892:	787b      	ldrb	r3, [r7, #1]
 800d894:	059b      	lsls	r3, r3, #22
 800d896:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d89a:	78bb      	ldrb	r3, [r7, #2]
 800d89c:	02db      	lsls	r3, r3, #11
 800d89e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d8a2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d8a4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d8a8:	049b      	lsls	r3, r3, #18
 800d8aa:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d8ae:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800d8b0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800d8b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d8b6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800d8b8:	69bb      	ldr	r3, [r7, #24]
 800d8ba:	431a      	orrs	r2, r3
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d8c0:	78fa      	ldrb	r2, [r7, #3]
 800d8c2:	0151      	lsls	r1, r2, #5
 800d8c4:	693a      	ldr	r2, [r7, #16]
 800d8c6:	440a      	add	r2, r1
 800d8c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800d8cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d8d0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800d8d2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d8d6:	2b03      	cmp	r3, #3
 800d8d8:	d003      	beq.n	800d8e2 <USB_HC_Init+0x22a>
 800d8da:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d8de:	2b01      	cmp	r3, #1
 800d8e0:	d10f      	bne.n	800d902 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800d8e2:	78fb      	ldrb	r3, [r7, #3]
 800d8e4:	015a      	lsls	r2, r3, #5
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	4413      	add	r3, r2
 800d8ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	78fa      	ldrb	r2, [r7, #3]
 800d8f2:	0151      	lsls	r1, r2, #5
 800d8f4:	693a      	ldr	r2, [r7, #16]
 800d8f6:	440a      	add	r2, r1
 800d8f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d8fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d900:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800d902:	7ffb      	ldrb	r3, [r7, #31]
}
 800d904:	4618      	mov	r0, r3
 800d906:	3720      	adds	r7, #32
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}
 800d90c:	40040000 	.word	0x40040000

0800d910 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b08c      	sub	sp, #48	@ 0x30
 800d914:	af02      	add	r7, sp, #8
 800d916:	60f8      	str	r0, [r7, #12]
 800d918:	60b9      	str	r1, [r7, #8]
 800d91a:	4613      	mov	r3, r2
 800d91c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	785b      	ldrb	r3, [r3, #1]
 800d926:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800d928:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d92c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	4a5d      	ldr	r2, [pc, #372]	@ (800daa8 <USB_HC_StartXfer+0x198>)
 800d932:	4293      	cmp	r3, r2
 800d934:	d12f      	bne.n	800d996 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800d936:	79fb      	ldrb	r3, [r7, #7]
 800d938:	2b01      	cmp	r3, #1
 800d93a:	d11c      	bne.n	800d976 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	7c9b      	ldrb	r3, [r3, #18]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d003      	beq.n	800d94c <USB_HC_StartXfer+0x3c>
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	7c9b      	ldrb	r3, [r3, #18]
 800d948:	2b02      	cmp	r3, #2
 800d94a:	d124      	bne.n	800d996 <USB_HC_StartXfer+0x86>
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	799b      	ldrb	r3, [r3, #6]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d120      	bne.n	800d996 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800d954:	69fb      	ldr	r3, [r7, #28]
 800d956:	015a      	lsls	r2, r3, #5
 800d958:	6a3b      	ldr	r3, [r7, #32]
 800d95a:	4413      	add	r3, r2
 800d95c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d960:	68db      	ldr	r3, [r3, #12]
 800d962:	69fa      	ldr	r2, [r7, #28]
 800d964:	0151      	lsls	r1, r2, #5
 800d966:	6a3a      	ldr	r2, [r7, #32]
 800d968:	440a      	add	r2, r1
 800d96a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d96e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d972:	60d3      	str	r3, [r2, #12]
 800d974:	e00f      	b.n	800d996 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	791b      	ldrb	r3, [r3, #4]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d10b      	bne.n	800d996 <USB_HC_StartXfer+0x86>
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	795b      	ldrb	r3, [r3, #5]
 800d982:	2b01      	cmp	r3, #1
 800d984:	d107      	bne.n	800d996 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	785b      	ldrb	r3, [r3, #1]
 800d98a:	4619      	mov	r1, r3
 800d98c:	68f8      	ldr	r0, [r7, #12]
 800d98e:	f000 fb6b 	bl	800e068 <USB_DoPing>
        return HAL_OK;
 800d992:	2300      	movs	r3, #0
 800d994:	e232      	b.n	800ddfc <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	799b      	ldrb	r3, [r3, #6]
 800d99a:	2b01      	cmp	r3, #1
 800d99c:	d158      	bne.n	800da50 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800d99e:	2301      	movs	r3, #1
 800d9a0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	78db      	ldrb	r3, [r3, #3]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d007      	beq.n	800d9ba <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d9aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d9ac:	68ba      	ldr	r2, [r7, #8]
 800d9ae:	8a92      	ldrh	r2, [r2, #20]
 800d9b0:	fb03 f202 	mul.w	r2, r3, r2
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	61da      	str	r2, [r3, #28]
 800d9b8:	e07c      	b.n	800dab4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	7c9b      	ldrb	r3, [r3, #18]
 800d9be:	2b01      	cmp	r3, #1
 800d9c0:	d130      	bne.n	800da24 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	6a1b      	ldr	r3, [r3, #32]
 800d9c6:	2bbc      	cmp	r3, #188	@ 0xbc
 800d9c8:	d918      	bls.n	800d9fc <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	8a9b      	ldrh	r3, [r3, #20]
 800d9ce:	461a      	mov	r2, r3
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	69da      	ldr	r2, [r3, #28]
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	68db      	ldr	r3, [r3, #12]
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	d003      	beq.n	800d9ec <USB_HC_StartXfer+0xdc>
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	68db      	ldr	r3, [r3, #12]
 800d9e8:	2b02      	cmp	r3, #2
 800d9ea:	d103      	bne.n	800d9f4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	2202      	movs	r2, #2
 800d9f0:	60da      	str	r2, [r3, #12]
 800d9f2:	e05f      	b.n	800dab4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	60da      	str	r2, [r3, #12]
 800d9fa:	e05b      	b.n	800dab4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	6a1a      	ldr	r2, [r3, #32]
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	68db      	ldr	r3, [r3, #12]
 800da08:	2b01      	cmp	r3, #1
 800da0a:	d007      	beq.n	800da1c <USB_HC_StartXfer+0x10c>
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	68db      	ldr	r3, [r3, #12]
 800da10:	2b02      	cmp	r3, #2
 800da12:	d003      	beq.n	800da1c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	2204      	movs	r2, #4
 800da18:	60da      	str	r2, [r3, #12]
 800da1a:	e04b      	b.n	800dab4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	2203      	movs	r2, #3
 800da20:	60da      	str	r2, [r3, #12]
 800da22:	e047      	b.n	800dab4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800da24:	79fb      	ldrb	r3, [r7, #7]
 800da26:	2b01      	cmp	r3, #1
 800da28:	d10d      	bne.n	800da46 <USB_HC_StartXfer+0x136>
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	6a1b      	ldr	r3, [r3, #32]
 800da2e:	68ba      	ldr	r2, [r7, #8]
 800da30:	8a92      	ldrh	r2, [r2, #20]
 800da32:	4293      	cmp	r3, r2
 800da34:	d907      	bls.n	800da46 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800da36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800da38:	68ba      	ldr	r2, [r7, #8]
 800da3a:	8a92      	ldrh	r2, [r2, #20]
 800da3c:	fb03 f202 	mul.w	r2, r3, r2
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	61da      	str	r2, [r3, #28]
 800da44:	e036      	b.n	800dab4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	6a1a      	ldr	r2, [r3, #32]
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	61da      	str	r2, [r3, #28]
 800da4e:	e031      	b.n	800dab4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	6a1b      	ldr	r3, [r3, #32]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d018      	beq.n	800da8a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	6a1b      	ldr	r3, [r3, #32]
 800da5c:	68ba      	ldr	r2, [r7, #8]
 800da5e:	8a92      	ldrh	r2, [r2, #20]
 800da60:	4413      	add	r3, r2
 800da62:	3b01      	subs	r3, #1
 800da64:	68ba      	ldr	r2, [r7, #8]
 800da66:	8a92      	ldrh	r2, [r2, #20]
 800da68:	fbb3 f3f2 	udiv	r3, r3, r2
 800da6c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800da6e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800da70:	8b7b      	ldrh	r3, [r7, #26]
 800da72:	429a      	cmp	r2, r3
 800da74:	d90b      	bls.n	800da8e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800da76:	8b7b      	ldrh	r3, [r7, #26]
 800da78:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800da7a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800da7c:	68ba      	ldr	r2, [r7, #8]
 800da7e:	8a92      	ldrh	r2, [r2, #20]
 800da80:	fb03 f202 	mul.w	r2, r3, r2
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	61da      	str	r2, [r3, #28]
 800da88:	e001      	b.n	800da8e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800da8a:	2301      	movs	r3, #1
 800da8c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	78db      	ldrb	r3, [r3, #3]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d00a      	beq.n	800daac <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800da96:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800da98:	68ba      	ldr	r2, [r7, #8]
 800da9a:	8a92      	ldrh	r2, [r2, #20]
 800da9c:	fb03 f202 	mul.w	r2, r3, r2
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	61da      	str	r2, [r3, #28]
 800daa4:	e006      	b.n	800dab4 <USB_HC_StartXfer+0x1a4>
 800daa6:	bf00      	nop
 800daa8:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	6a1a      	ldr	r2, [r3, #32]
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	69db      	ldr	r3, [r3, #28]
 800dab8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dabc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dabe:	04d9      	lsls	r1, r3, #19
 800dac0:	4ba3      	ldr	r3, [pc, #652]	@ (800dd50 <USB_HC_StartXfer+0x440>)
 800dac2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dac4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	7d9b      	ldrb	r3, [r3, #22]
 800daca:	075b      	lsls	r3, r3, #29
 800dacc:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dad0:	69f9      	ldr	r1, [r7, #28]
 800dad2:	0148      	lsls	r0, r1, #5
 800dad4:	6a39      	ldr	r1, [r7, #32]
 800dad6:	4401      	add	r1, r0
 800dad8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dadc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dade:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800dae0:	79fb      	ldrb	r3, [r7, #7]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d009      	beq.n	800dafa <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	6999      	ldr	r1, [r3, #24]
 800daea:	69fb      	ldr	r3, [r7, #28]
 800daec:	015a      	lsls	r2, r3, #5
 800daee:	6a3b      	ldr	r3, [r7, #32]
 800daf0:	4413      	add	r3, r2
 800daf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800daf6:	460a      	mov	r2, r1
 800daf8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800dafa:	6a3b      	ldr	r3, [r7, #32]
 800dafc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800db00:	689b      	ldr	r3, [r3, #8]
 800db02:	f003 0301 	and.w	r3, r3, #1
 800db06:	2b00      	cmp	r3, #0
 800db08:	bf0c      	ite	eq
 800db0a:	2301      	moveq	r3, #1
 800db0c:	2300      	movne	r3, #0
 800db0e:	b2db      	uxtb	r3, r3
 800db10:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800db12:	69fb      	ldr	r3, [r7, #28]
 800db14:	015a      	lsls	r2, r3, #5
 800db16:	6a3b      	ldr	r3, [r7, #32]
 800db18:	4413      	add	r3, r2
 800db1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	69fa      	ldr	r2, [r7, #28]
 800db22:	0151      	lsls	r1, r2, #5
 800db24:	6a3a      	ldr	r2, [r7, #32]
 800db26:	440a      	add	r2, r1
 800db28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800db2c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800db30:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800db32:	69fb      	ldr	r3, [r7, #28]
 800db34:	015a      	lsls	r2, r3, #5
 800db36:	6a3b      	ldr	r3, [r7, #32]
 800db38:	4413      	add	r3, r2
 800db3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800db3e:	681a      	ldr	r2, [r3, #0]
 800db40:	7e7b      	ldrb	r3, [r7, #25]
 800db42:	075b      	lsls	r3, r3, #29
 800db44:	69f9      	ldr	r1, [r7, #28]
 800db46:	0148      	lsls	r0, r1, #5
 800db48:	6a39      	ldr	r1, [r7, #32]
 800db4a:	4401      	add	r1, r0
 800db4c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800db50:	4313      	orrs	r3, r2
 800db52:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	799b      	ldrb	r3, [r3, #6]
 800db58:	2b01      	cmp	r3, #1
 800db5a:	f040 80c3 	bne.w	800dce4 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	7c5b      	ldrb	r3, [r3, #17]
 800db62:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800db64:	68ba      	ldr	r2, [r7, #8]
 800db66:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800db68:	4313      	orrs	r3, r2
 800db6a:	69fa      	ldr	r2, [r7, #28]
 800db6c:	0151      	lsls	r1, r2, #5
 800db6e:	6a3a      	ldr	r2, [r7, #32]
 800db70:	440a      	add	r2, r1
 800db72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800db76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800db7a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800db7c:	69fb      	ldr	r3, [r7, #28]
 800db7e:	015a      	lsls	r2, r3, #5
 800db80:	6a3b      	ldr	r3, [r7, #32]
 800db82:	4413      	add	r3, r2
 800db84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800db88:	68db      	ldr	r3, [r3, #12]
 800db8a:	69fa      	ldr	r2, [r7, #28]
 800db8c:	0151      	lsls	r1, r2, #5
 800db8e:	6a3a      	ldr	r2, [r7, #32]
 800db90:	440a      	add	r2, r1
 800db92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800db96:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800db9a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	79db      	ldrb	r3, [r3, #7]
 800dba0:	2b01      	cmp	r3, #1
 800dba2:	d123      	bne.n	800dbec <USB_HC_StartXfer+0x2dc>
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	78db      	ldrb	r3, [r3, #3]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d11f      	bne.n	800dbec <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800dbac:	69fb      	ldr	r3, [r7, #28]
 800dbae:	015a      	lsls	r2, r3, #5
 800dbb0:	6a3b      	ldr	r3, [r7, #32]
 800dbb2:	4413      	add	r3, r2
 800dbb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dbb8:	685b      	ldr	r3, [r3, #4]
 800dbba:	69fa      	ldr	r2, [r7, #28]
 800dbbc:	0151      	lsls	r1, r2, #5
 800dbbe:	6a3a      	ldr	r2, [r7, #32]
 800dbc0:	440a      	add	r2, r1
 800dbc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dbc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dbca:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800dbcc:	69fb      	ldr	r3, [r7, #28]
 800dbce:	015a      	lsls	r2, r3, #5
 800dbd0:	6a3b      	ldr	r3, [r7, #32]
 800dbd2:	4413      	add	r3, r2
 800dbd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dbd8:	68db      	ldr	r3, [r3, #12]
 800dbda:	69fa      	ldr	r2, [r7, #28]
 800dbdc:	0151      	lsls	r1, r2, #5
 800dbde:	6a3a      	ldr	r2, [r7, #32]
 800dbe0:	440a      	add	r2, r1
 800dbe2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dbe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbea:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	7c9b      	ldrb	r3, [r3, #18]
 800dbf0:	2b01      	cmp	r3, #1
 800dbf2:	d003      	beq.n	800dbfc <USB_HC_StartXfer+0x2ec>
 800dbf4:	68bb      	ldr	r3, [r7, #8]
 800dbf6:	7c9b      	ldrb	r3, [r3, #18]
 800dbf8:	2b03      	cmp	r3, #3
 800dbfa:	d117      	bne.n	800dc2c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800dc00:	2b01      	cmp	r3, #1
 800dc02:	d113      	bne.n	800dc2c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	78db      	ldrb	r3, [r3, #3]
 800dc08:	2b01      	cmp	r3, #1
 800dc0a:	d10f      	bne.n	800dc2c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800dc0c:	69fb      	ldr	r3, [r7, #28]
 800dc0e:	015a      	lsls	r2, r3, #5
 800dc10:	6a3b      	ldr	r3, [r7, #32]
 800dc12:	4413      	add	r3, r2
 800dc14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc18:	685b      	ldr	r3, [r3, #4]
 800dc1a:	69fa      	ldr	r2, [r7, #28]
 800dc1c:	0151      	lsls	r1, r2, #5
 800dc1e:	6a3a      	ldr	r2, [r7, #32]
 800dc20:	440a      	add	r2, r1
 800dc22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dc26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dc2a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	7c9b      	ldrb	r3, [r3, #18]
 800dc30:	2b01      	cmp	r3, #1
 800dc32:	d162      	bne.n	800dcfa <USB_HC_StartXfer+0x3ea>
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	78db      	ldrb	r3, [r3, #3]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d15e      	bne.n	800dcfa <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	68db      	ldr	r3, [r3, #12]
 800dc40:	3b01      	subs	r3, #1
 800dc42:	2b03      	cmp	r3, #3
 800dc44:	d858      	bhi.n	800dcf8 <USB_HC_StartXfer+0x3e8>
 800dc46:	a201      	add	r2, pc, #4	@ (adr r2, 800dc4c <USB_HC_StartXfer+0x33c>)
 800dc48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc4c:	0800dc5d 	.word	0x0800dc5d
 800dc50:	0800dc7f 	.word	0x0800dc7f
 800dc54:	0800dca1 	.word	0x0800dca1
 800dc58:	0800dcc3 	.word	0x0800dcc3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800dc5c:	69fb      	ldr	r3, [r7, #28]
 800dc5e:	015a      	lsls	r2, r3, #5
 800dc60:	6a3b      	ldr	r3, [r7, #32]
 800dc62:	4413      	add	r3, r2
 800dc64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc68:	685b      	ldr	r3, [r3, #4]
 800dc6a:	69fa      	ldr	r2, [r7, #28]
 800dc6c:	0151      	lsls	r1, r2, #5
 800dc6e:	6a3a      	ldr	r2, [r7, #32]
 800dc70:	440a      	add	r2, r1
 800dc72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dc76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dc7a:	6053      	str	r3, [r2, #4]
          break;
 800dc7c:	e03d      	b.n	800dcfa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800dc7e:	69fb      	ldr	r3, [r7, #28]
 800dc80:	015a      	lsls	r2, r3, #5
 800dc82:	6a3b      	ldr	r3, [r7, #32]
 800dc84:	4413      	add	r3, r2
 800dc86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc8a:	685b      	ldr	r3, [r3, #4]
 800dc8c:	69fa      	ldr	r2, [r7, #28]
 800dc8e:	0151      	lsls	r1, r2, #5
 800dc90:	6a3a      	ldr	r2, [r7, #32]
 800dc92:	440a      	add	r2, r1
 800dc94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dc98:	f043 030e 	orr.w	r3, r3, #14
 800dc9c:	6053      	str	r3, [r2, #4]
          break;
 800dc9e:	e02c      	b.n	800dcfa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800dca0:	69fb      	ldr	r3, [r7, #28]
 800dca2:	015a      	lsls	r2, r3, #5
 800dca4:	6a3b      	ldr	r3, [r7, #32]
 800dca6:	4413      	add	r3, r2
 800dca8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dcac:	685b      	ldr	r3, [r3, #4]
 800dcae:	69fa      	ldr	r2, [r7, #28]
 800dcb0:	0151      	lsls	r1, r2, #5
 800dcb2:	6a3a      	ldr	r2, [r7, #32]
 800dcb4:	440a      	add	r2, r1
 800dcb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dcba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800dcbe:	6053      	str	r3, [r2, #4]
          break;
 800dcc0:	e01b      	b.n	800dcfa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800dcc2:	69fb      	ldr	r3, [r7, #28]
 800dcc4:	015a      	lsls	r2, r3, #5
 800dcc6:	6a3b      	ldr	r3, [r7, #32]
 800dcc8:	4413      	add	r3, r2
 800dcca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dcce:	685b      	ldr	r3, [r3, #4]
 800dcd0:	69fa      	ldr	r2, [r7, #28]
 800dcd2:	0151      	lsls	r1, r2, #5
 800dcd4:	6a3a      	ldr	r2, [r7, #32]
 800dcd6:	440a      	add	r2, r1
 800dcd8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dcdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dce0:	6053      	str	r3, [r2, #4]
          break;
 800dce2:	e00a      	b.n	800dcfa <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800dce4:	69fb      	ldr	r3, [r7, #28]
 800dce6:	015a      	lsls	r2, r3, #5
 800dce8:	6a3b      	ldr	r3, [r7, #32]
 800dcea:	4413      	add	r3, r2
 800dcec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dcf0:	461a      	mov	r2, r3
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	6053      	str	r3, [r2, #4]
 800dcf6:	e000      	b.n	800dcfa <USB_HC_StartXfer+0x3ea>
          break;
 800dcf8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800dcfa:	69fb      	ldr	r3, [r7, #28]
 800dcfc:	015a      	lsls	r2, r3, #5
 800dcfe:	6a3b      	ldr	r3, [r7, #32]
 800dd00:	4413      	add	r3, r2
 800dd02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800dd0a:	693b      	ldr	r3, [r7, #16]
 800dd0c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800dd10:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	78db      	ldrb	r3, [r3, #3]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d004      	beq.n	800dd24 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd20:	613b      	str	r3, [r7, #16]
 800dd22:	e003      	b.n	800dd2c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800dd2a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800dd32:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800dd34:	69fb      	ldr	r3, [r7, #28]
 800dd36:	015a      	lsls	r2, r3, #5
 800dd38:	6a3b      	ldr	r3, [r7, #32]
 800dd3a:	4413      	add	r3, r2
 800dd3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dd40:	461a      	mov	r2, r3
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800dd46:	79fb      	ldrb	r3, [r7, #7]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d003      	beq.n	800dd54 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	e055      	b.n	800ddfc <USB_HC_StartXfer+0x4ec>
 800dd50:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	78db      	ldrb	r3, [r3, #3]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d14e      	bne.n	800ddfa <USB_HC_StartXfer+0x4ea>
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	6a1b      	ldr	r3, [r3, #32]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d04a      	beq.n	800ddfa <USB_HC_StartXfer+0x4ea>
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	79db      	ldrb	r3, [r3, #7]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d146      	bne.n	800ddfa <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	7c9b      	ldrb	r3, [r3, #18]
 800dd70:	2b03      	cmp	r3, #3
 800dd72:	d831      	bhi.n	800ddd8 <USB_HC_StartXfer+0x4c8>
 800dd74:	a201      	add	r2, pc, #4	@ (adr r2, 800dd7c <USB_HC_StartXfer+0x46c>)
 800dd76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd7a:	bf00      	nop
 800dd7c:	0800dd8d 	.word	0x0800dd8d
 800dd80:	0800ddb1 	.word	0x0800ddb1
 800dd84:	0800dd8d 	.word	0x0800dd8d
 800dd88:	0800ddb1 	.word	0x0800ddb1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	6a1b      	ldr	r3, [r3, #32]
 800dd90:	3303      	adds	r3, #3
 800dd92:	089b      	lsrs	r3, r3, #2
 800dd94:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800dd96:	8afa      	ldrh	r2, [r7, #22]
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd9c:	b29b      	uxth	r3, r3
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	d91c      	bls.n	800dddc <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	699b      	ldr	r3, [r3, #24]
 800dda6:	f043 0220 	orr.w	r2, r3, #32
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	619a      	str	r2, [r3, #24]
        }
        break;
 800ddae:	e015      	b.n	800dddc <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	6a1b      	ldr	r3, [r3, #32]
 800ddb4:	3303      	adds	r3, #3
 800ddb6:	089b      	lsrs	r3, r3, #2
 800ddb8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800ddba:	8afa      	ldrh	r2, [r7, #22]
 800ddbc:	6a3b      	ldr	r3, [r7, #32]
 800ddbe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ddc2:	691b      	ldr	r3, [r3, #16]
 800ddc4:	b29b      	uxth	r3, r3
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	d90a      	bls.n	800dde0 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	699b      	ldr	r3, [r3, #24]
 800ddce:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	619a      	str	r2, [r3, #24]
        }
        break;
 800ddd6:	e003      	b.n	800dde0 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800ddd8:	bf00      	nop
 800ddda:	e002      	b.n	800dde2 <USB_HC_StartXfer+0x4d2>
        break;
 800dddc:	bf00      	nop
 800ddde:	e000      	b.n	800dde2 <USB_HC_StartXfer+0x4d2>
        break;
 800dde0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	6999      	ldr	r1, [r3, #24]
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	785a      	ldrb	r2, [r3, #1]
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	6a1b      	ldr	r3, [r3, #32]
 800ddee:	b29b      	uxth	r3, r3
 800ddf0:	2000      	movs	r0, #0
 800ddf2:	9000      	str	r0, [sp, #0]
 800ddf4:	68f8      	ldr	r0, [r7, #12]
 800ddf6:	f7ff f9cf 	bl	800d198 <USB_WritePacket>
  }

  return HAL_OK;
 800ddfa:	2300      	movs	r3, #0
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3728      	adds	r7, #40	@ 0x28
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800de04:	b480      	push	{r7}
 800de06:	b085      	sub	sp, #20
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800de16:	695b      	ldr	r3, [r3, #20]
 800de18:	b29b      	uxth	r3, r3
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3714      	adds	r7, #20
 800de1e:	46bd      	mov	sp, r7
 800de20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de24:	4770      	bx	lr

0800de26 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800de26:	b480      	push	{r7}
 800de28:	b089      	sub	sp, #36	@ 0x24
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	6078      	str	r0, [r7, #4]
 800de2e:	460b      	mov	r3, r1
 800de30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800de36:	78fb      	ldrb	r3, [r7, #3]
 800de38:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800de3a:	2300      	movs	r3, #0
 800de3c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800de3e:	69bb      	ldr	r3, [r7, #24]
 800de40:	015a      	lsls	r2, r3, #5
 800de42:	69fb      	ldr	r3, [r7, #28]
 800de44:	4413      	add	r3, r2
 800de46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	0c9b      	lsrs	r3, r3, #18
 800de4e:	f003 0303 	and.w	r3, r3, #3
 800de52:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800de54:	69bb      	ldr	r3, [r7, #24]
 800de56:	015a      	lsls	r2, r3, #5
 800de58:	69fb      	ldr	r3, [r7, #28]
 800de5a:	4413      	add	r3, r2
 800de5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	0fdb      	lsrs	r3, r3, #31
 800de64:	f003 0301 	and.w	r3, r3, #1
 800de68:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800de6a:	69bb      	ldr	r3, [r7, #24]
 800de6c:	015a      	lsls	r2, r3, #5
 800de6e:	69fb      	ldr	r3, [r7, #28]
 800de70:	4413      	add	r3, r2
 800de72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800de76:	685b      	ldr	r3, [r3, #4]
 800de78:	0fdb      	lsrs	r3, r3, #31
 800de7a:	f003 0301 	and.w	r3, r3, #1
 800de7e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	689b      	ldr	r3, [r3, #8]
 800de84:	f003 0320 	and.w	r3, r3, #32
 800de88:	2b20      	cmp	r3, #32
 800de8a:	d10d      	bne.n	800dea8 <USB_HC_Halt+0x82>
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d10a      	bne.n	800dea8 <USB_HC_Halt+0x82>
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d005      	beq.n	800dea4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	2b01      	cmp	r3, #1
 800de9c:	d002      	beq.n	800dea4 <USB_HC_Halt+0x7e>
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	2b03      	cmp	r3, #3
 800dea2:	d101      	bne.n	800dea8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800dea4:	2300      	movs	r3, #0
 800dea6:	e0d8      	b.n	800e05a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d002      	beq.n	800deb4 <USB_HC_Halt+0x8e>
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	2b02      	cmp	r3, #2
 800deb2:	d173      	bne.n	800df9c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800deb4:	69bb      	ldr	r3, [r7, #24]
 800deb6:	015a      	lsls	r2, r3, #5
 800deb8:	69fb      	ldr	r3, [r7, #28]
 800deba:	4413      	add	r3, r2
 800debc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	69ba      	ldr	r2, [r7, #24]
 800dec4:	0151      	lsls	r1, r2, #5
 800dec6:	69fa      	ldr	r2, [r7, #28]
 800dec8:	440a      	add	r2, r1
 800deca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dece:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ded2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	689b      	ldr	r3, [r3, #8]
 800ded8:	f003 0320 	and.w	r3, r3, #32
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d14a      	bne.n	800df76 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dee4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d133      	bne.n	800df54 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800deec:	69bb      	ldr	r3, [r7, #24]
 800deee:	015a      	lsls	r2, r3, #5
 800def0:	69fb      	ldr	r3, [r7, #28]
 800def2:	4413      	add	r3, r2
 800def4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	69ba      	ldr	r2, [r7, #24]
 800defc:	0151      	lsls	r1, r2, #5
 800defe:	69fa      	ldr	r2, [r7, #28]
 800df00:	440a      	add	r2, r1
 800df02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800df06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800df0a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800df0c:	69bb      	ldr	r3, [r7, #24]
 800df0e:	015a      	lsls	r2, r3, #5
 800df10:	69fb      	ldr	r3, [r7, #28]
 800df12:	4413      	add	r3, r2
 800df14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	69ba      	ldr	r2, [r7, #24]
 800df1c:	0151      	lsls	r1, r2, #5
 800df1e:	69fa      	ldr	r2, [r7, #28]
 800df20:	440a      	add	r2, r1
 800df22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800df26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800df2a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	3301      	adds	r3, #1
 800df30:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800df38:	d82e      	bhi.n	800df98 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800df3a:	69bb      	ldr	r3, [r7, #24]
 800df3c:	015a      	lsls	r2, r3, #5
 800df3e:	69fb      	ldr	r3, [r7, #28]
 800df40:	4413      	add	r3, r2
 800df42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800df4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800df50:	d0ec      	beq.n	800df2c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800df52:	e081      	b.n	800e058 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800df54:	69bb      	ldr	r3, [r7, #24]
 800df56:	015a      	lsls	r2, r3, #5
 800df58:	69fb      	ldr	r3, [r7, #28]
 800df5a:	4413      	add	r3, r2
 800df5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	69ba      	ldr	r2, [r7, #24]
 800df64:	0151      	lsls	r1, r2, #5
 800df66:	69fa      	ldr	r2, [r7, #28]
 800df68:	440a      	add	r2, r1
 800df6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800df6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800df72:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800df74:	e070      	b.n	800e058 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800df76:	69bb      	ldr	r3, [r7, #24]
 800df78:	015a      	lsls	r2, r3, #5
 800df7a:	69fb      	ldr	r3, [r7, #28]
 800df7c:	4413      	add	r3, r2
 800df7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	69ba      	ldr	r2, [r7, #24]
 800df86:	0151      	lsls	r1, r2, #5
 800df88:	69fa      	ldr	r2, [r7, #28]
 800df8a:	440a      	add	r2, r1
 800df8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800df90:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800df94:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800df96:	e05f      	b.n	800e058 <USB_HC_Halt+0x232>
            break;
 800df98:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800df9a:	e05d      	b.n	800e058 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800df9c:	69bb      	ldr	r3, [r7, #24]
 800df9e:	015a      	lsls	r2, r3, #5
 800dfa0:	69fb      	ldr	r3, [r7, #28]
 800dfa2:	4413      	add	r3, r2
 800dfa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	69ba      	ldr	r2, [r7, #24]
 800dfac:	0151      	lsls	r1, r2, #5
 800dfae:	69fa      	ldr	r2, [r7, #28]
 800dfb0:	440a      	add	r2, r1
 800dfb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dfb6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dfba:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800dfbc:	69fb      	ldr	r3, [r7, #28]
 800dfbe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dfc2:	691b      	ldr	r3, [r3, #16]
 800dfc4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d133      	bne.n	800e034 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800dfcc:	69bb      	ldr	r3, [r7, #24]
 800dfce:	015a      	lsls	r2, r3, #5
 800dfd0:	69fb      	ldr	r3, [r7, #28]
 800dfd2:	4413      	add	r3, r2
 800dfd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	69ba      	ldr	r2, [r7, #24]
 800dfdc:	0151      	lsls	r1, r2, #5
 800dfde:	69fa      	ldr	r2, [r7, #28]
 800dfe0:	440a      	add	r2, r1
 800dfe2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dfe6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dfea:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800dfec:	69bb      	ldr	r3, [r7, #24]
 800dfee:	015a      	lsls	r2, r3, #5
 800dff0:	69fb      	ldr	r3, [r7, #28]
 800dff2:	4413      	add	r3, r2
 800dff4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	69ba      	ldr	r2, [r7, #24]
 800dffc:	0151      	lsls	r1, r2, #5
 800dffe:	69fa      	ldr	r2, [r7, #28]
 800e000:	440a      	add	r2, r1
 800e002:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e006:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e00a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	3301      	adds	r3, #1
 800e010:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e018:	d81d      	bhi.n	800e056 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e01a:	69bb      	ldr	r3, [r7, #24]
 800e01c:	015a      	lsls	r2, r3, #5
 800e01e:	69fb      	ldr	r3, [r7, #28]
 800e020:	4413      	add	r3, r2
 800e022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e02c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e030:	d0ec      	beq.n	800e00c <USB_HC_Halt+0x1e6>
 800e032:	e011      	b.n	800e058 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e034:	69bb      	ldr	r3, [r7, #24]
 800e036:	015a      	lsls	r2, r3, #5
 800e038:	69fb      	ldr	r3, [r7, #28]
 800e03a:	4413      	add	r3, r2
 800e03c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	69ba      	ldr	r2, [r7, #24]
 800e044:	0151      	lsls	r1, r2, #5
 800e046:	69fa      	ldr	r2, [r7, #28]
 800e048:	440a      	add	r2, r1
 800e04a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e04e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e052:	6013      	str	r3, [r2, #0]
 800e054:	e000      	b.n	800e058 <USB_HC_Halt+0x232>
          break;
 800e056:	bf00      	nop
    }
  }

  return HAL_OK;
 800e058:	2300      	movs	r3, #0
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3724      	adds	r7, #36	@ 0x24
 800e05e:	46bd      	mov	sp, r7
 800e060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e064:	4770      	bx	lr
	...

0800e068 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800e068:	b480      	push	{r7}
 800e06a:	b087      	sub	sp, #28
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
 800e070:	460b      	mov	r3, r1
 800e072:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800e078:	78fb      	ldrb	r3, [r7, #3]
 800e07a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800e07c:	2301      	movs	r3, #1
 800e07e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	04da      	lsls	r2, r3, #19
 800e084:	4b15      	ldr	r3, [pc, #84]	@ (800e0dc <USB_DoPing+0x74>)
 800e086:	4013      	ands	r3, r2
 800e088:	693a      	ldr	r2, [r7, #16]
 800e08a:	0151      	lsls	r1, r2, #5
 800e08c:	697a      	ldr	r2, [r7, #20]
 800e08e:	440a      	add	r2, r1
 800e090:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e094:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e098:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800e09a:	693b      	ldr	r3, [r7, #16]
 800e09c:	015a      	lsls	r2, r3, #5
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	4413      	add	r3, r2
 800e0a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e0b0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e0b8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	015a      	lsls	r2, r3, #5
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	4413      	add	r3, r2
 800e0c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e0c6:	461a      	mov	r2, r3
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800e0cc:	2300      	movs	r3, #0
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	371c      	adds	r7, #28
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d8:	4770      	bx	lr
 800e0da:	bf00      	nop
 800e0dc:	1ff80000 	.word	0x1ff80000

0800e0e0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b088      	sub	sp, #32
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f7fe ff92 	bl	800d01e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e0fa:	2110      	movs	r1, #16
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	f7fe ffeb 	bl	800d0d8 <USB_FlushTxFifo>
 800e102:	4603      	mov	r3, r0
 800e104:	2b00      	cmp	r3, #0
 800e106:	d001      	beq.n	800e10c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800e108:	2301      	movs	r3, #1
 800e10a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f7ff f815 	bl	800d13c <USB_FlushRxFifo>
 800e112:	4603      	mov	r3, r0
 800e114:	2b00      	cmp	r3, #0
 800e116:	d001      	beq.n	800e11c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800e118:	2301      	movs	r3, #1
 800e11a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800e11c:	2300      	movs	r3, #0
 800e11e:	61bb      	str	r3, [r7, #24]
 800e120:	e01f      	b.n	800e162 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800e122:	69bb      	ldr	r3, [r7, #24]
 800e124:	015a      	lsls	r2, r3, #5
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	4413      	add	r3, r2
 800e12a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e138:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e140:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e148:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800e14a:	69bb      	ldr	r3, [r7, #24]
 800e14c:	015a      	lsls	r2, r3, #5
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	4413      	add	r3, r2
 800e152:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e156:	461a      	mov	r2, r3
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800e15c:	69bb      	ldr	r3, [r7, #24]
 800e15e:	3301      	adds	r3, #1
 800e160:	61bb      	str	r3, [r7, #24]
 800e162:	69bb      	ldr	r3, [r7, #24]
 800e164:	2b0f      	cmp	r3, #15
 800e166:	d9dc      	bls.n	800e122 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800e168:	2300      	movs	r3, #0
 800e16a:	61bb      	str	r3, [r7, #24]
 800e16c:	e034      	b.n	800e1d8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800e16e:	69bb      	ldr	r3, [r7, #24]
 800e170:	015a      	lsls	r2, r3, #5
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	4413      	add	r3, r2
 800e176:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e184:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e18c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e194:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800e196:	69bb      	ldr	r3, [r7, #24]
 800e198:	015a      	lsls	r2, r3, #5
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	4413      	add	r3, r2
 800e19e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e1a2:	461a      	mov	r2, r3
 800e1a4:	693b      	ldr	r3, [r7, #16]
 800e1a6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	3301      	adds	r3, #1
 800e1ac:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e1b4:	d80c      	bhi.n	800e1d0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e1b6:	69bb      	ldr	r3, [r7, #24]
 800e1b8:	015a      	lsls	r2, r3, #5
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	4413      	add	r3, r2
 800e1be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e1c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e1cc:	d0ec      	beq.n	800e1a8 <USB_StopHost+0xc8>
 800e1ce:	e000      	b.n	800e1d2 <USB_StopHost+0xf2>
        break;
 800e1d0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800e1d2:	69bb      	ldr	r3, [r7, #24]
 800e1d4:	3301      	adds	r3, #1
 800e1d6:	61bb      	str	r3, [r7, #24]
 800e1d8:	69bb      	ldr	r3, [r7, #24]
 800e1da:	2b0f      	cmp	r3, #15
 800e1dc:	d9c7      	bls.n	800e16e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e1e4:	461a      	mov	r2, r3
 800e1e6:	f04f 33ff 	mov.w	r3, #4294967295
 800e1ea:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f04f 32ff 	mov.w	r2, #4294967295
 800e1f2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800e1f4:	6878      	ldr	r0, [r7, #4]
 800e1f6:	f7fe ff01 	bl	800cffc <USB_EnableGlobalInt>

  return ret;
 800e1fa:	7ffb      	ldrb	r3, [r7, #31]
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3720      	adds	r7, #32
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}

0800e204 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e208:	4904      	ldr	r1, [pc, #16]	@ (800e21c <MX_FATFS_Init+0x18>)
 800e20a:	4805      	ldr	r0, [pc, #20]	@ (800e220 <MX_FATFS_Init+0x1c>)
 800e20c:	f002 fc64 	bl	8010ad8 <FATFS_LinkDriver>
 800e210:	4603      	mov	r3, r0
 800e212:	461a      	mov	r2, r3
 800e214:	4b03      	ldr	r3, [pc, #12]	@ (800e224 <MX_FATFS_Init+0x20>)
 800e216:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e218:	bf00      	nop
 800e21a:	bd80      	pop	{r7, pc}
 800e21c:	20000d88 	.word	0x20000d88
 800e220:	08013b84 	.word	0x08013b84
 800e224:	20000d84 	.word	0x20000d84

0800e228 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b082      	sub	sp, #8
 800e22c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e22e:	2300      	movs	r3, #0
 800e230:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e232:	f000 f87b 	bl	800e32c <BSP_SD_IsDetected>
 800e236:	4603      	mov	r3, r0
 800e238:	2b01      	cmp	r3, #1
 800e23a:	d001      	beq.n	800e240 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800e23c:	2302      	movs	r3, #2
 800e23e:	e012      	b.n	800e266 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800e240:	480b      	ldr	r0, [pc, #44]	@ (800e270 <BSP_SD_Init+0x48>)
 800e242:	f7fb f909 	bl	8009458 <HAL_SD_Init>
 800e246:	4603      	mov	r3, r0
 800e248:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e24a:	79fb      	ldrb	r3, [r7, #7]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d109      	bne.n	800e264 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800e250:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800e254:	4806      	ldr	r0, [pc, #24]	@ (800e270 <BSP_SD_Init+0x48>)
 800e256:	f7fb fd51 	bl	8009cfc <HAL_SD_ConfigWideBusOperation>
 800e25a:	4603      	mov	r3, r0
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d001      	beq.n	800e264 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e260:	2301      	movs	r3, #1
 800e262:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e264:	79fb      	ldrb	r3, [r7, #7]
}
 800e266:	4618      	mov	r0, r3
 800e268:	3708      	adds	r7, #8
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}
 800e26e:	bf00      	nop
 800e270:	200008dc 	.word	0x200008dc

0800e274 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b086      	sub	sp, #24
 800e278:	af00      	add	r7, sp, #0
 800e27a:	60f8      	str	r0, [r7, #12]
 800e27c:	60b9      	str	r1, [r7, #8]
 800e27e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e280:	2300      	movs	r3, #0
 800e282:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	68ba      	ldr	r2, [r7, #8]
 800e288:	68f9      	ldr	r1, [r7, #12]
 800e28a:	4806      	ldr	r0, [pc, #24]	@ (800e2a4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800e28c:	f7fb f994 	bl	80095b8 <HAL_SD_ReadBlocks_DMA>
 800e290:	4603      	mov	r3, r0
 800e292:	2b00      	cmp	r3, #0
 800e294:	d001      	beq.n	800e29a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e296:	2301      	movs	r3, #1
 800e298:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e29a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	3718      	adds	r7, #24
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}
 800e2a4:	200008dc 	.word	0x200008dc

0800e2a8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b086      	sub	sp, #24
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	60f8      	str	r0, [r7, #12]
 800e2b0:	60b9      	str	r1, [r7, #8]
 800e2b2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	68ba      	ldr	r2, [r7, #8]
 800e2bc:	68f9      	ldr	r1, [r7, #12]
 800e2be:	4806      	ldr	r0, [pc, #24]	@ (800e2d8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800e2c0:	f7fb fa5c 	bl	800977c <HAL_SD_WriteBlocks_DMA>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d001      	beq.n	800e2ce <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e2ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	3718      	adds	r7, #24
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}
 800e2d8:	200008dc 	.word	0x200008dc

0800e2dc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e2e0:	4805      	ldr	r0, [pc, #20]	@ (800e2f8 <BSP_SD_GetCardState+0x1c>)
 800e2e2:	f7fb fda5 	bl	8009e30 <HAL_SD_GetCardState>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	2b04      	cmp	r3, #4
 800e2ea:	bf14      	ite	ne
 800e2ec:	2301      	movne	r3, #1
 800e2ee:	2300      	moveq	r3, #0
 800e2f0:	b2db      	uxtb	r3, r3
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	bd80      	pop	{r7, pc}
 800e2f6:	bf00      	nop
 800e2f8:	200008dc 	.word	0x200008dc

0800e2fc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b082      	sub	sp, #8
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800e304:	6879      	ldr	r1, [r7, #4]
 800e306:	4803      	ldr	r0, [pc, #12]	@ (800e314 <BSP_SD_GetCardInfo+0x18>)
 800e308:	f7fb fccc 	bl	8009ca4 <HAL_SD_GetCardInfo>
}
 800e30c:	bf00      	nop
 800e30e:	3708      	adds	r7, #8
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}
 800e314:	200008dc 	.word	0x200008dc

0800e318 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b082      	sub	sp, #8
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e320:	f000 f9b2 	bl	800e688 <BSP_SD_ReadCpltCallback>
}
 800e324:	bf00      	nop
 800e326:	3708      	adds	r7, #8
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}

0800e32c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b082      	sub	sp, #8
 800e330:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e332:	2301      	movs	r3, #1
 800e334:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e336:	f000 f80b 	bl	800e350 <BSP_PlatformIsDetected>
 800e33a:	4603      	mov	r3, r0
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d101      	bne.n	800e344 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e340:	2300      	movs	r3, #0
 800e342:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e344:	79fb      	ldrb	r3, [r7, #7]
 800e346:	b2db      	uxtb	r3, r3
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3708      	adds	r7, #8
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}

0800e350 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e350:	b580      	push	{r7, lr}
 800e352:	b082      	sub	sp, #8
 800e354:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e356:	2301      	movs	r3, #1
 800e358:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e35a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800e35e:	4806      	ldr	r0, [pc, #24]	@ (800e378 <BSP_PlatformIsDetected+0x28>)
 800e360:	f7f6 fa38 	bl	80047d4 <HAL_GPIO_ReadPin>
 800e364:	4603      	mov	r3, r0
 800e366:	2b00      	cmp	r3, #0
 800e368:	d001      	beq.n	800e36e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800e36a:	2300      	movs	r3, #0
 800e36c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800e36e:	79fb      	ldrb	r3, [r7, #7]
}
 800e370:	4618      	mov	r0, r3
 800e372:	3708      	adds	r7, #8
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}
 800e378:	40020800 	.word	0x40020800

0800e37c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b084      	sub	sp, #16
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800e384:	f002 fbf4 	bl	8010b70 <osKernelSysTick>
 800e388:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800e38a:	e006      	b.n	800e39a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e38c:	f7ff ffa6 	bl	800e2dc <BSP_SD_GetCardState>
 800e390:	4603      	mov	r3, r0
 800e392:	2b00      	cmp	r3, #0
 800e394:	d101      	bne.n	800e39a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e396:	2300      	movs	r3, #0
 800e398:	e009      	b.n	800e3ae <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800e39a:	f002 fbe9 	bl	8010b70 <osKernelSysTick>
 800e39e:	4602      	mov	r2, r0
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	1ad3      	subs	r3, r2, r3
 800e3a4:	687a      	ldr	r2, [r7, #4]
 800e3a6:	429a      	cmp	r2, r3
 800e3a8:	d8f0      	bhi.n	800e38c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e3aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3710      	adds	r7, #16
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}
	...

0800e3b8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b082      	sub	sp, #8
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	4603      	mov	r3, r0
 800e3c0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e3c2:	4b0b      	ldr	r3, [pc, #44]	@ (800e3f0 <SD_CheckStatus+0x38>)
 800e3c4:	2201      	movs	r2, #1
 800e3c6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e3c8:	f7ff ff88 	bl	800e2dc <BSP_SD_GetCardState>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d107      	bne.n	800e3e2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e3d2:	4b07      	ldr	r3, [pc, #28]	@ (800e3f0 <SD_CheckStatus+0x38>)
 800e3d4:	781b      	ldrb	r3, [r3, #0]
 800e3d6:	b2db      	uxtb	r3, r3
 800e3d8:	f023 0301 	bic.w	r3, r3, #1
 800e3dc:	b2da      	uxtb	r2, r3
 800e3de:	4b04      	ldr	r3, [pc, #16]	@ (800e3f0 <SD_CheckStatus+0x38>)
 800e3e0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e3e2:	4b03      	ldr	r3, [pc, #12]	@ (800e3f0 <SD_CheckStatus+0x38>)
 800e3e4:	781b      	ldrb	r3, [r3, #0]
 800e3e6:	b2db      	uxtb	r3, r3
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3708      	adds	r7, #8
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}
 800e3f0:	20000009 	.word	0x20000009

0800e3f4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e3f4:	b590      	push	{r4, r7, lr}
 800e3f6:	b087      	sub	sp, #28
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800e3fe:	4b20      	ldr	r3, [pc, #128]	@ (800e480 <SD_initialize+0x8c>)
 800e400:	2201      	movs	r2, #1
 800e402:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800e404:	f002 fba8 	bl	8010b58 <osKernelRunning>
 800e408:	4603      	mov	r3, r0
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d030      	beq.n	800e470 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800e40e:	f7ff ff0b 	bl	800e228 <BSP_SD_Init>
 800e412:	4603      	mov	r3, r0
 800e414:	2b00      	cmp	r3, #0
 800e416:	d107      	bne.n	800e428 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800e418:	79fb      	ldrb	r3, [r7, #7]
 800e41a:	4618      	mov	r0, r3
 800e41c:	f7ff ffcc 	bl	800e3b8 <SD_CheckStatus>
 800e420:	4603      	mov	r3, r0
 800e422:	461a      	mov	r2, r3
 800e424:	4b16      	ldr	r3, [pc, #88]	@ (800e480 <SD_initialize+0x8c>)
 800e426:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800e428:	4b15      	ldr	r3, [pc, #84]	@ (800e480 <SD_initialize+0x8c>)
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	b2db      	uxtb	r3, r3
 800e42e:	2b01      	cmp	r3, #1
 800e430:	d01e      	beq.n	800e470 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800e432:	4b14      	ldr	r3, [pc, #80]	@ (800e484 <SD_initialize+0x90>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d10e      	bne.n	800e458 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800e43a:	4b13      	ldr	r3, [pc, #76]	@ (800e488 <SD_initialize+0x94>)
 800e43c:	f107 0408 	add.w	r4, r7, #8
 800e440:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e442:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800e446:	f107 0308 	add.w	r3, r7, #8
 800e44a:	2100      	movs	r1, #0
 800e44c:	4618      	mov	r0, r3
 800e44e:	f002 fbff 	bl	8010c50 <osMessageCreate>
 800e452:	4603      	mov	r3, r0
 800e454:	4a0b      	ldr	r2, [pc, #44]	@ (800e484 <SD_initialize+0x90>)
 800e456:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800e458:	4b0a      	ldr	r3, [pc, #40]	@ (800e484 <SD_initialize+0x90>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d107      	bne.n	800e470 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800e460:	4b07      	ldr	r3, [pc, #28]	@ (800e480 <SD_initialize+0x8c>)
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	b2db      	uxtb	r3, r3
 800e466:	f043 0301 	orr.w	r3, r3, #1
 800e46a:	b2da      	uxtb	r2, r3
 800e46c:	4b04      	ldr	r3, [pc, #16]	@ (800e480 <SD_initialize+0x8c>)
 800e46e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800e470:	4b03      	ldr	r3, [pc, #12]	@ (800e480 <SD_initialize+0x8c>)
 800e472:	781b      	ldrb	r3, [r3, #0]
 800e474:	b2db      	uxtb	r3, r3
}
 800e476:	4618      	mov	r0, r3
 800e478:	371c      	adds	r7, #28
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd90      	pop	{r4, r7, pc}
 800e47e:	bf00      	nop
 800e480:	20000009 	.word	0x20000009
 800e484:	20000d8c 	.word	0x20000d8c
 800e488:	08013b18 	.word	0x08013b18

0800e48c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b082      	sub	sp, #8
 800e490:	af00      	add	r7, sp, #0
 800e492:	4603      	mov	r3, r0
 800e494:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e496:	79fb      	ldrb	r3, [r7, #7]
 800e498:	4618      	mov	r0, r3
 800e49a:	f7ff ff8d 	bl	800e3b8 <SD_CheckStatus>
 800e49e:	4603      	mov	r3, r0
}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	3708      	adds	r7, #8
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}

0800e4a8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b08a      	sub	sp, #40	@ 0x28
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	60b9      	str	r1, [r7, #8]
 800e4b0:	607a      	str	r2, [r7, #4]
 800e4b2:	603b      	str	r3, [r7, #0]
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e4be:	f247 5030 	movw	r0, #30000	@ 0x7530
 800e4c2:	f7ff ff5b 	bl	800e37c <SD_CheckStatusWithTimeout>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	da02      	bge.n	800e4d2 <SD_read+0x2a>
  {
    return res;
 800e4cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e4d0:	e032      	b.n	800e538 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800e4d2:	683a      	ldr	r2, [r7, #0]
 800e4d4:	6879      	ldr	r1, [r7, #4]
 800e4d6:	68b8      	ldr	r0, [r7, #8]
 800e4d8:	f7ff fecc 	bl	800e274 <BSP_SD_ReadBlocks_DMA>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800e4e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d124      	bne.n	800e534 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800e4ea:	4b15      	ldr	r3, [pc, #84]	@ (800e540 <SD_read+0x98>)
 800e4ec:	6819      	ldr	r1, [r3, #0]
 800e4ee:	f107 0314 	add.w	r3, r7, #20
 800e4f2:	f247 5230 	movw	r2, #30000	@ 0x7530
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f002 fc12 	bl	8010d20 <osMessageGet>

    if (event.status == osEventMessage)
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	2b10      	cmp	r3, #16
 800e500:	d118      	bne.n	800e534 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800e502:	69bb      	ldr	r3, [r7, #24]
 800e504:	2b01      	cmp	r3, #1
 800e506:	d115      	bne.n	800e534 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800e508:	f002 fb32 	bl	8010b70 <osKernelSysTick>
 800e50c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800e50e:	e008      	b.n	800e522 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e510:	f7ff fee4 	bl	800e2dc <BSP_SD_GetCardState>
 800e514:	4603      	mov	r3, r0
 800e516:	2b00      	cmp	r3, #0
 800e518:	d103      	bne.n	800e522 <SD_read+0x7a>
              {
                res = RES_OK;
 800e51a:	2300      	movs	r3, #0
 800e51c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800e520:	e008      	b.n	800e534 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800e522:	f002 fb25 	bl	8010b70 <osKernelSysTick>
 800e526:	4602      	mov	r2, r0
 800e528:	6a3b      	ldr	r3, [r7, #32]
 800e52a:	1ad3      	subs	r3, r2, r3
 800e52c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800e530:	4293      	cmp	r3, r2
 800e532:	d9ed      	bls.n	800e510 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800e534:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800e538:	4618      	mov	r0, r3
 800e53a:	3728      	adds	r7, #40	@ 0x28
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bd80      	pop	{r7, pc}
 800e540:	20000d8c 	.word	0x20000d8c

0800e544 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b08a      	sub	sp, #40	@ 0x28
 800e548:	af00      	add	r7, sp, #0
 800e54a:	60b9      	str	r1, [r7, #8]
 800e54c:	607a      	str	r2, [r7, #4]
 800e54e:	603b      	str	r3, [r7, #0]
 800e550:	4603      	mov	r3, r0
 800e552:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e554:	2301      	movs	r3, #1
 800e556:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e55a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800e55e:	f7ff ff0d 	bl	800e37c <SD_CheckStatusWithTimeout>
 800e562:	4603      	mov	r3, r0
 800e564:	2b00      	cmp	r3, #0
 800e566:	da02      	bge.n	800e56e <SD_write+0x2a>
  {
    return res;
 800e568:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e56c:	e02e      	b.n	800e5cc <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e56e:	683a      	ldr	r2, [r7, #0]
 800e570:	6879      	ldr	r1, [r7, #4]
 800e572:	68b8      	ldr	r0, [r7, #8]
 800e574:	f7ff fe98 	bl	800e2a8 <BSP_SD_WriteBlocks_DMA>
 800e578:	4603      	mov	r3, r0
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d124      	bne.n	800e5c8 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800e57e:	4b15      	ldr	r3, [pc, #84]	@ (800e5d4 <SD_write+0x90>)
 800e580:	6819      	ldr	r1, [r3, #0]
 800e582:	f107 0314 	add.w	r3, r7, #20
 800e586:	f247 5230 	movw	r2, #30000	@ 0x7530
 800e58a:	4618      	mov	r0, r3
 800e58c:	f002 fbc8 	bl	8010d20 <osMessageGet>

    if (event.status == osEventMessage)
 800e590:	697b      	ldr	r3, [r7, #20]
 800e592:	2b10      	cmp	r3, #16
 800e594:	d118      	bne.n	800e5c8 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800e596:	69bb      	ldr	r3, [r7, #24]
 800e598:	2b02      	cmp	r3, #2
 800e59a:	d115      	bne.n	800e5c8 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800e59c:	f002 fae8 	bl	8010b70 <osKernelSysTick>
 800e5a0:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800e5a2:	e008      	b.n	800e5b6 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e5a4:	f7ff fe9a 	bl	800e2dc <BSP_SD_GetCardState>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d103      	bne.n	800e5b6 <SD_write+0x72>
          {
            res = RES_OK;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800e5b4:	e008      	b.n	800e5c8 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800e5b6:	f002 fadb 	bl	8010b70 <osKernelSysTick>
 800e5ba:	4602      	mov	r2, r0
 800e5bc:	6a3b      	ldr	r3, [r7, #32]
 800e5be:	1ad3      	subs	r3, r2, r3
 800e5c0:	f247 522f 	movw	r2, #29999	@ 0x752f
 800e5c4:	4293      	cmp	r3, r2
 800e5c6:	d9ed      	bls.n	800e5a4 <SD_write+0x60>
    }

  }
#endif

  return res;
 800e5c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3728      	adds	r7, #40	@ 0x28
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}
 800e5d4:	20000d8c 	.word	0x20000d8c

0800e5d8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b08c      	sub	sp, #48	@ 0x30
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	4603      	mov	r3, r0
 800e5e0:	603a      	str	r2, [r7, #0]
 800e5e2:	71fb      	strb	r3, [r7, #7]
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e5ee:	4b25      	ldr	r3, [pc, #148]	@ (800e684 <SD_ioctl+0xac>)
 800e5f0:	781b      	ldrb	r3, [r3, #0]
 800e5f2:	b2db      	uxtb	r3, r3
 800e5f4:	f003 0301 	and.w	r3, r3, #1
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d001      	beq.n	800e600 <SD_ioctl+0x28>
 800e5fc:	2303      	movs	r3, #3
 800e5fe:	e03c      	b.n	800e67a <SD_ioctl+0xa2>

  switch (cmd)
 800e600:	79bb      	ldrb	r3, [r7, #6]
 800e602:	2b03      	cmp	r3, #3
 800e604:	d834      	bhi.n	800e670 <SD_ioctl+0x98>
 800e606:	a201      	add	r2, pc, #4	@ (adr r2, 800e60c <SD_ioctl+0x34>)
 800e608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e60c:	0800e61d 	.word	0x0800e61d
 800e610:	0800e625 	.word	0x0800e625
 800e614:	0800e63d 	.word	0x0800e63d
 800e618:	0800e657 	.word	0x0800e657
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e61c:	2300      	movs	r3, #0
 800e61e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e622:	e028      	b.n	800e676 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e624:	f107 030c 	add.w	r3, r7, #12
 800e628:	4618      	mov	r0, r3
 800e62a:	f7ff fe67 	bl	800e2fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e62e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e634:	2300      	movs	r3, #0
 800e636:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e63a:	e01c      	b.n	800e676 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e63c:	f107 030c 	add.w	r3, r7, #12
 800e640:	4618      	mov	r0, r3
 800e642:	f7ff fe5b 	bl	800e2fc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e648:	b29a      	uxth	r2, r3
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e64e:	2300      	movs	r3, #0
 800e650:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e654:	e00f      	b.n	800e676 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e656:	f107 030c 	add.w	r3, r7, #12
 800e65a:	4618      	mov	r0, r3
 800e65c:	f7ff fe4e 	bl	800e2fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e662:	0a5a      	lsrs	r2, r3, #9
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e668:	2300      	movs	r3, #0
 800e66a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e66e:	e002      	b.n	800e676 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e670:	2304      	movs	r3, #4
 800e672:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800e676:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e67a:	4618      	mov	r0, r3
 800e67c:	3730      	adds	r7, #48	@ 0x30
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}
 800e682:	bf00      	nop
 800e684:	20000009 	.word	0x20000009

0800e688 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800e68c:	4b04      	ldr	r3, [pc, #16]	@ (800e6a0 <BSP_SD_ReadCpltCallback+0x18>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	2200      	movs	r2, #0
 800e692:	2101      	movs	r1, #1
 800e694:	4618      	mov	r0, r3
 800e696:	f002 fb03 	bl	8010ca0 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800e69a:	bf00      	nop
 800e69c:	bd80      	pop	{r7, pc}
 800e69e:	bf00      	nop
 800e6a0:	20000d8c 	.word	0x20000d8c

0800e6a4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800e6a4:	b590      	push	{r4, r7, lr}
 800e6a6:	b089      	sub	sp, #36	@ 0x24
 800e6a8:	af04      	add	r7, sp, #16
 800e6aa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	2202      	movs	r2, #2
 800e6b0:	2102      	movs	r1, #2
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f000 fcbd 	bl	800f032 <USBH_FindInterface>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e6bc:	7bfb      	ldrb	r3, [r7, #15]
 800e6be:	2bff      	cmp	r3, #255	@ 0xff
 800e6c0:	d002      	beq.n	800e6c8 <USBH_CDC_InterfaceInit+0x24>
 800e6c2:	7bfb      	ldrb	r3, [r7, #15]
 800e6c4:	2b01      	cmp	r3, #1
 800e6c6:	d901      	bls.n	800e6cc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e6c8:	2302      	movs	r3, #2
 800e6ca:	e13d      	b.n	800e948 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800e6cc:	7bfb      	ldrb	r3, [r7, #15]
 800e6ce:	4619      	mov	r1, r3
 800e6d0:	6878      	ldr	r0, [r7, #4]
 800e6d2:	f000 fc92 	bl	800effa <USBH_SelectInterface>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800e6da:	7bbb      	ldrb	r3, [r7, #14]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d001      	beq.n	800e6e4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800e6e0:	2302      	movs	r3, #2
 800e6e2:	e131      	b.n	800e948 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800e6ea:	2050      	movs	r0, #80	@ 0x50
 800e6ec:	f005 f89a 	bl	8013824 <malloc>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e6fa:	69db      	ldr	r3, [r3, #28]
 800e6fc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d101      	bne.n	800e708 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800e704:	2302      	movs	r3, #2
 800e706:	e11f      	b.n	800e948 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800e708:	2250      	movs	r2, #80	@ 0x50
 800e70a:	2100      	movs	r1, #0
 800e70c:	68b8      	ldr	r0, [r7, #8]
 800e70e:	f005 f947 	bl	80139a0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800e712:	7bfb      	ldrb	r3, [r7, #15]
 800e714:	687a      	ldr	r2, [r7, #4]
 800e716:	211a      	movs	r1, #26
 800e718:	fb01 f303 	mul.w	r3, r1, r3
 800e71c:	4413      	add	r3, r2
 800e71e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e722:	781b      	ldrb	r3, [r3, #0]
 800e724:	b25b      	sxtb	r3, r3
 800e726:	2b00      	cmp	r3, #0
 800e728:	da15      	bge.n	800e756 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e72a:	7bfb      	ldrb	r3, [r7, #15]
 800e72c:	687a      	ldr	r2, [r7, #4]
 800e72e:	211a      	movs	r1, #26
 800e730:	fb01 f303 	mul.w	r3, r1, r3
 800e734:	4413      	add	r3, r2
 800e736:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e73a:	781a      	ldrb	r2, [r3, #0]
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e740:	7bfb      	ldrb	r3, [r7, #15]
 800e742:	687a      	ldr	r2, [r7, #4]
 800e744:	211a      	movs	r1, #26
 800e746:	fb01 f303 	mul.w	r3, r1, r3
 800e74a:	4413      	add	r3, r2
 800e74c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800e750:	881a      	ldrh	r2, [r3, #0]
 800e752:	68bb      	ldr	r3, [r7, #8]
 800e754:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800e756:	68bb      	ldr	r3, [r7, #8]
 800e758:	785b      	ldrb	r3, [r3, #1]
 800e75a:	4619      	mov	r1, r3
 800e75c:	6878      	ldr	r0, [r7, #4]
 800e75e:	f002 f90c 	bl	801097a <USBH_AllocPipe>
 800e762:	4603      	mov	r3, r0
 800e764:	461a      	mov	r2, r3
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	7819      	ldrb	r1, [r3, #0]
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	7858      	ldrb	r0, [r3, #1]
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e77e:	68ba      	ldr	r2, [r7, #8]
 800e780:	8952      	ldrh	r2, [r2, #10]
 800e782:	9202      	str	r2, [sp, #8]
 800e784:	2203      	movs	r2, #3
 800e786:	9201      	str	r2, [sp, #4]
 800e788:	9300      	str	r3, [sp, #0]
 800e78a:	4623      	mov	r3, r4
 800e78c:	4602      	mov	r2, r0
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f002 f8c4 	bl	801091c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	2200      	movs	r2, #0
 800e79a:	4619      	mov	r1, r3
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f004 ffbb 	bl	8013718 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	210a      	movs	r1, #10
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f000 fc42 	bl	800f032 <USBH_FindInterface>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e7b2:	7bfb      	ldrb	r3, [r7, #15]
 800e7b4:	2bff      	cmp	r3, #255	@ 0xff
 800e7b6:	d002      	beq.n	800e7be <USBH_CDC_InterfaceInit+0x11a>
 800e7b8:	7bfb      	ldrb	r3, [r7, #15]
 800e7ba:	2b01      	cmp	r3, #1
 800e7bc:	d901      	bls.n	800e7c2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e7be:	2302      	movs	r3, #2
 800e7c0:	e0c2      	b.n	800e948 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800e7c2:	7bfb      	ldrb	r3, [r7, #15]
 800e7c4:	687a      	ldr	r2, [r7, #4]
 800e7c6:	211a      	movs	r1, #26
 800e7c8:	fb01 f303 	mul.w	r3, r1, r3
 800e7cc:	4413      	add	r3, r2
 800e7ce:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e7d2:	781b      	ldrb	r3, [r3, #0]
 800e7d4:	b25b      	sxtb	r3, r3
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	da16      	bge.n	800e808 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e7da:	7bfb      	ldrb	r3, [r7, #15]
 800e7dc:	687a      	ldr	r2, [r7, #4]
 800e7de:	211a      	movs	r1, #26
 800e7e0:	fb01 f303 	mul.w	r3, r1, r3
 800e7e4:	4413      	add	r3, r2
 800e7e6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e7ea:	781a      	ldrb	r2, [r3, #0]
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e7f0:	7bfb      	ldrb	r3, [r7, #15]
 800e7f2:	687a      	ldr	r2, [r7, #4]
 800e7f4:	211a      	movs	r1, #26
 800e7f6:	fb01 f303 	mul.w	r3, r1, r3
 800e7fa:	4413      	add	r3, r2
 800e7fc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800e800:	881a      	ldrh	r2, [r3, #0]
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	835a      	strh	r2, [r3, #26]
 800e806:	e015      	b.n	800e834 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e808:	7bfb      	ldrb	r3, [r7, #15]
 800e80a:	687a      	ldr	r2, [r7, #4]
 800e80c:	211a      	movs	r1, #26
 800e80e:	fb01 f303 	mul.w	r3, r1, r3
 800e812:	4413      	add	r3, r2
 800e814:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e818:	781a      	ldrb	r2, [r3, #0]
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e81e:	7bfb      	ldrb	r3, [r7, #15]
 800e820:	687a      	ldr	r2, [r7, #4]
 800e822:	211a      	movs	r1, #26
 800e824:	fb01 f303 	mul.w	r3, r1, r3
 800e828:	4413      	add	r3, r2
 800e82a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800e82e:	881a      	ldrh	r2, [r3, #0]
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800e834:	7bfb      	ldrb	r3, [r7, #15]
 800e836:	687a      	ldr	r2, [r7, #4]
 800e838:	211a      	movs	r1, #26
 800e83a:	fb01 f303 	mul.w	r3, r1, r3
 800e83e:	4413      	add	r3, r2
 800e840:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800e844:	781b      	ldrb	r3, [r3, #0]
 800e846:	b25b      	sxtb	r3, r3
 800e848:	2b00      	cmp	r3, #0
 800e84a:	da16      	bge.n	800e87a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e84c:	7bfb      	ldrb	r3, [r7, #15]
 800e84e:	687a      	ldr	r2, [r7, #4]
 800e850:	211a      	movs	r1, #26
 800e852:	fb01 f303 	mul.w	r3, r1, r3
 800e856:	4413      	add	r3, r2
 800e858:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800e85c:	781a      	ldrb	r2, [r3, #0]
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e862:	7bfb      	ldrb	r3, [r7, #15]
 800e864:	687a      	ldr	r2, [r7, #4]
 800e866:	211a      	movs	r1, #26
 800e868:	fb01 f303 	mul.w	r3, r1, r3
 800e86c:	4413      	add	r3, r2
 800e86e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800e872:	881a      	ldrh	r2, [r3, #0]
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	835a      	strh	r2, [r3, #26]
 800e878:	e015      	b.n	800e8a6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e87a:	7bfb      	ldrb	r3, [r7, #15]
 800e87c:	687a      	ldr	r2, [r7, #4]
 800e87e:	211a      	movs	r1, #26
 800e880:	fb01 f303 	mul.w	r3, r1, r3
 800e884:	4413      	add	r3, r2
 800e886:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800e88a:	781a      	ldrb	r2, [r3, #0]
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e890:	7bfb      	ldrb	r3, [r7, #15]
 800e892:	687a      	ldr	r2, [r7, #4]
 800e894:	211a      	movs	r1, #26
 800e896:	fb01 f303 	mul.w	r3, r1, r3
 800e89a:	4413      	add	r3, r2
 800e89c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800e8a0:	881a      	ldrh	r2, [r3, #0]
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800e8a6:	68bb      	ldr	r3, [r7, #8]
 800e8a8:	7b9b      	ldrb	r3, [r3, #14]
 800e8aa:	4619      	mov	r1, r3
 800e8ac:	6878      	ldr	r0, [r7, #4]
 800e8ae:	f002 f864 	bl	801097a <USBH_AllocPipe>
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	461a      	mov	r2, r3
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	7bdb      	ldrb	r3, [r3, #15]
 800e8be:	4619      	mov	r1, r3
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f002 f85a 	bl	801097a <USBH_AllocPipe>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	7b59      	ldrb	r1, [r3, #13]
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	7b98      	ldrb	r0, [r3, #14]
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e8e2:	68ba      	ldr	r2, [r7, #8]
 800e8e4:	8b12      	ldrh	r2, [r2, #24]
 800e8e6:	9202      	str	r2, [sp, #8]
 800e8e8:	2202      	movs	r2, #2
 800e8ea:	9201      	str	r2, [sp, #4]
 800e8ec:	9300      	str	r3, [sp, #0]
 800e8ee:	4623      	mov	r3, r4
 800e8f0:	4602      	mov	r2, r0
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	f002 f812 	bl	801091c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	7b19      	ldrb	r1, [r3, #12]
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	7bd8      	ldrb	r0, [r3, #15]
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e90c:	68ba      	ldr	r2, [r7, #8]
 800e90e:	8b52      	ldrh	r2, [r2, #26]
 800e910:	9202      	str	r2, [sp, #8]
 800e912:	2202      	movs	r2, #2
 800e914:	9201      	str	r2, [sp, #4]
 800e916:	9300      	str	r3, [sp, #0]
 800e918:	4623      	mov	r3, r4
 800e91a:	4602      	mov	r2, r0
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	f001 fffd 	bl	801091c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	2200      	movs	r2, #0
 800e926:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	7b5b      	ldrb	r3, [r3, #13]
 800e92e:	2200      	movs	r2, #0
 800e930:	4619      	mov	r1, r3
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f004 fef0 	bl	8013718 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	7b1b      	ldrb	r3, [r3, #12]
 800e93c:	2200      	movs	r2, #0
 800e93e:	4619      	mov	r1, r3
 800e940:	6878      	ldr	r0, [r7, #4]
 800e942:	f004 fee9 	bl	8013718 <USBH_LL_SetToggle>

  return USBH_OK;
 800e946:	2300      	movs	r3, #0
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3714      	adds	r7, #20
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd90      	pop	{r4, r7, pc}

0800e950 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b084      	sub	sp, #16
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e95e:	69db      	ldr	r3, [r3, #28]
 800e960:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	781b      	ldrb	r3, [r3, #0]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d00e      	beq.n	800e988 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	781b      	ldrb	r3, [r3, #0]
 800e96e:	4619      	mov	r1, r3
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f001 fff2 	bl	801095a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	781b      	ldrb	r3, [r3, #0]
 800e97a:	4619      	mov	r1, r3
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f002 f81d 	bl	80109bc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	2200      	movs	r2, #0
 800e986:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	7b1b      	ldrb	r3, [r3, #12]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d00e      	beq.n	800e9ae <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	7b1b      	ldrb	r3, [r3, #12]
 800e994:	4619      	mov	r1, r3
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	f001 ffdf 	bl	801095a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	7b1b      	ldrb	r3, [r3, #12]
 800e9a0:	4619      	mov	r1, r3
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f002 f80a 	bl	80109bc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	7b5b      	ldrb	r3, [r3, #13]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d00e      	beq.n	800e9d4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	7b5b      	ldrb	r3, [r3, #13]
 800e9ba:	4619      	mov	r1, r3
 800e9bc:	6878      	ldr	r0, [r7, #4]
 800e9be:	f001 ffcc 	bl	801095a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	7b5b      	ldrb	r3, [r3, #13]
 800e9c6:	4619      	mov	r1, r3
 800e9c8:	6878      	ldr	r0, [r7, #4]
 800e9ca:	f001 fff7 	bl	80109bc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e9da:	69db      	ldr	r3, [r3, #28]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d00b      	beq.n	800e9f8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e9e6:	69db      	ldr	r3, [r3, #28]
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f004 ff23 	bl	8013834 <free>
    phost->pActiveClass->pData = 0U;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800e9f8:	2300      	movs	r3, #0
}
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	3710      	adds	r7, #16
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}

0800ea02 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800ea02:	b580      	push	{r7, lr}
 800ea04:	b084      	sub	sp, #16
 800ea06:	af00      	add	r7, sp, #0
 800ea08:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ea10:	69db      	ldr	r3, [r3, #28]
 800ea12:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	3340      	adds	r3, #64	@ 0x40
 800ea18:	4619      	mov	r1, r3
 800ea1a:	6878      	ldr	r0, [r7, #4]
 800ea1c:	f000 f8b1 	bl	800eb82 <GetLineCoding>
 800ea20:	4603      	mov	r3, r0
 800ea22:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800ea24:	7afb      	ldrb	r3, [r7, #11]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d105      	bne.n	800ea36 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ea30:	2102      	movs	r1, #2
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800ea36:	7afb      	ldrb	r3, [r7, #11]
}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	3710      	adds	r7, #16
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}

0800ea40 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b084      	sub	sp, #16
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ea48:	2301      	movs	r3, #1
 800ea4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ea56:	69db      	ldr	r3, [r3, #28]
 800ea58:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800ea60:	2b04      	cmp	r3, #4
 800ea62:	d877      	bhi.n	800eb54 <USBH_CDC_Process+0x114>
 800ea64:	a201      	add	r2, pc, #4	@ (adr r2, 800ea6c <USBH_CDC_Process+0x2c>)
 800ea66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea6a:	bf00      	nop
 800ea6c:	0800ea81 	.word	0x0800ea81
 800ea70:	0800ea87 	.word	0x0800ea87
 800ea74:	0800eab7 	.word	0x0800eab7
 800ea78:	0800eb2b 	.word	0x0800eb2b
 800ea7c:	0800eb39 	.word	0x0800eb39
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800ea80:	2300      	movs	r3, #0
 800ea82:	73fb      	strb	r3, [r7, #15]
      break;
 800ea84:	e06d      	b.n	800eb62 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ea8a:	4619      	mov	r1, r3
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	f000 f897 	bl	800ebc0 <SetLineCoding>
 800ea92:	4603      	mov	r3, r0
 800ea94:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ea96:	7bbb      	ldrb	r3, [r7, #14]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d104      	bne.n	800eaa6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	2202      	movs	r2, #2
 800eaa0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800eaa4:	e058      	b.n	800eb58 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800eaa6:	7bbb      	ldrb	r3, [r7, #14]
 800eaa8:	2b01      	cmp	r3, #1
 800eaaa:	d055      	beq.n	800eb58 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	2204      	movs	r2, #4
 800eab0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800eab4:	e050      	b.n	800eb58 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	3340      	adds	r3, #64	@ 0x40
 800eaba:	4619      	mov	r1, r3
 800eabc:	6878      	ldr	r0, [r7, #4]
 800eabe:	f000 f860 	bl	800eb82 <GetLineCoding>
 800eac2:	4603      	mov	r3, r0
 800eac4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800eac6:	7bbb      	ldrb	r3, [r7, #14]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d126      	bne.n	800eb1a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	2200      	movs	r2, #0
 800ead0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eade:	791b      	ldrb	r3, [r3, #4]
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d13b      	bne.n	800eb5c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800eae4:	68bb      	ldr	r3, [r7, #8]
 800eae6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eaee:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800eaf0:	429a      	cmp	r2, r3
 800eaf2:	d133      	bne.n	800eb5c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eafe:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d12b      	bne.n	800eb5c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eb0c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d124      	bne.n	800eb5c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f000 f96a 	bl	800edec <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800eb18:	e020      	b.n	800eb5c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800eb1a:	7bbb      	ldrb	r3, [r7, #14]
 800eb1c:	2b01      	cmp	r3, #1
 800eb1e:	d01d      	beq.n	800eb5c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	2204      	movs	r2, #4
 800eb24:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800eb28:	e018      	b.n	800eb5c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f000 f867 	bl	800ebfe <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f000 f8e6 	bl	800ed02 <CDC_ProcessReception>
      break;
 800eb36:	e014      	b.n	800eb62 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800eb38:	2100      	movs	r1, #0
 800eb3a:	6878      	ldr	r0, [r7, #4]
 800eb3c:	f001 f8ff 	bl	800fd3e <USBH_ClrFeature>
 800eb40:	4603      	mov	r3, r0
 800eb42:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800eb44:	7bbb      	ldrb	r3, [r7, #14]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d10a      	bne.n	800eb60 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800eb52:	e005      	b.n	800eb60 <USBH_CDC_Process+0x120>

    default:
      break;
 800eb54:	bf00      	nop
 800eb56:	e004      	b.n	800eb62 <USBH_CDC_Process+0x122>
      break;
 800eb58:	bf00      	nop
 800eb5a:	e002      	b.n	800eb62 <USBH_CDC_Process+0x122>
      break;
 800eb5c:	bf00      	nop
 800eb5e:	e000      	b.n	800eb62 <USBH_CDC_Process+0x122>
      break;
 800eb60:	bf00      	nop

  }

  return status;
 800eb62:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb64:	4618      	mov	r0, r3
 800eb66:	3710      	adds	r7, #16
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd80      	pop	{r7, pc}

0800eb6c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800eb6c:	b480      	push	{r7}
 800eb6e:	b083      	sub	sp, #12
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800eb74:	2300      	movs	r3, #0
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	370c      	adds	r7, #12
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb80:	4770      	bx	lr

0800eb82 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800eb82:	b580      	push	{r7, lr}
 800eb84:	b082      	sub	sp, #8
 800eb86:	af00      	add	r7, sp, #0
 800eb88:	6078      	str	r0, [r7, #4]
 800eb8a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	22a1      	movs	r2, #161	@ 0xa1
 800eb90:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2221      	movs	r2, #33	@ 0x21
 800eb96:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2200      	movs	r2, #0
 800eba2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2207      	movs	r2, #7
 800eba8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	2207      	movs	r2, #7
 800ebae:	4619      	mov	r1, r3
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f001 fbf9 	bl	80103a8 <USBH_CtlReq>
 800ebb6:	4603      	mov	r3, r0
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3708      	adds	r7, #8
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}

0800ebc0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b082      	sub	sp, #8
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
 800ebc8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2221      	movs	r2, #33	@ 0x21
 800ebce:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2220      	movs	r2, #32
 800ebd4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2200      	movs	r2, #0
 800ebe0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2207      	movs	r2, #7
 800ebe6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	2207      	movs	r2, #7
 800ebec:	4619      	mov	r1, r3
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f001 fbda 	bl	80103a8 <USBH_CtlReq>
 800ebf4:	4603      	mov	r3, r0
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	3708      	adds	r7, #8
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}

0800ebfe <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800ebfe:	b580      	push	{r7, lr}
 800ec00:	b086      	sub	sp, #24
 800ec02:	af02      	add	r7, sp, #8
 800ec04:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ec0c:	69db      	ldr	r3, [r3, #28]
 800ec0e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ec10:	2300      	movs	r3, #0
 800ec12:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800ec1a:	2b01      	cmp	r3, #1
 800ec1c:	d002      	beq.n	800ec24 <CDC_ProcessTransmission+0x26>
 800ec1e:	2b02      	cmp	r3, #2
 800ec20:	d023      	beq.n	800ec6a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800ec22:	e06a      	b.n	800ecfa <CDC_ProcessTransmission+0xfc>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec28:	68fa      	ldr	r2, [r7, #12]
 800ec2a:	8b12      	ldrh	r2, [r2, #24]
 800ec2c:	4293      	cmp	r3, r2
 800ec2e:	d90b      	bls.n	800ec48 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	69d9      	ldr	r1, [r3, #28]
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	8b1a      	ldrh	r2, [r3, #24]
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	7b5b      	ldrb	r3, [r3, #13]
 800ec3c:	2001      	movs	r0, #1
 800ec3e:	9000      	str	r0, [sp, #0]
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f001 fe28 	bl	8010896 <USBH_BulkSendData>
 800ec46:	e00b      	b.n	800ec60 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800ec50:	b29a      	uxth	r2, r3
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	7b5b      	ldrb	r3, [r3, #13]
 800ec56:	2001      	movs	r0, #1
 800ec58:	9000      	str	r0, [sp, #0]
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	f001 fe1b 	bl	8010896 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	2202      	movs	r2, #2
 800ec64:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800ec68:	e047      	b.n	800ecfa <CDC_ProcessTransmission+0xfc>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	7b5b      	ldrb	r3, [r3, #13]
 800ec6e:	4619      	mov	r1, r3
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f004 fd27 	bl	80136c4 <USBH_LL_GetURBState>
 800ec76:	4603      	mov	r3, r0
 800ec78:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800ec7a:	7afb      	ldrb	r3, [r7, #11]
 800ec7c:	2b01      	cmp	r3, #1
 800ec7e:	d12e      	bne.n	800ecde <CDC_ProcessTransmission+0xe0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec84:	68fa      	ldr	r2, [r7, #12]
 800ec86:	8b12      	ldrh	r2, [r2, #24]
 800ec88:	4293      	cmp	r3, r2
 800ec8a:	d90e      	bls.n	800ecaa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec90:	68fa      	ldr	r2, [r7, #12]
 800ec92:	8b12      	ldrh	r2, [r2, #24]
 800ec94:	1a9a      	subs	r2, r3, r2
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	69db      	ldr	r3, [r3, #28]
 800ec9e:	68fa      	ldr	r2, [r7, #12]
 800eca0:	8b12      	ldrh	r2, [r2, #24]
 800eca2:	441a      	add	r2, r3
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	61da      	str	r2, [r3, #28]
 800eca8:	e002      	b.n	800ecb0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	2200      	movs	r2, #0
 800ecae:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d004      	beq.n	800ecc2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	2201      	movs	r2, #1
 800ecbc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800ecc0:	e006      	b.n	800ecd0 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f000 f87a 	bl	800edc4 <USBH_CDC_TransmitCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	2104      	movs	r1, #4
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	f000 febc 	bl	800fa54 <USBH_OS_PutMessage>
      break;
 800ecdc:	e00c      	b.n	800ecf8 <CDC_ProcessTransmission+0xfa>
        if (URB_Status == USBH_URB_NOTREADY)
 800ecde:	7afb      	ldrb	r3, [r7, #11]
 800ece0:	2b02      	cmp	r3, #2
 800ece2:	d109      	bne.n	800ecf8 <CDC_ProcessTransmission+0xfa>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	2201      	movs	r2, #1
 800ece8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 800ecec:	2300      	movs	r3, #0
 800ecee:	2200      	movs	r2, #0
 800ecf0:	2104      	movs	r1, #4
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	f000 feae 	bl	800fa54 <USBH_OS_PutMessage>
      break;
 800ecf8:	bf00      	nop
  }
}
 800ecfa:	bf00      	nop
 800ecfc:	3710      	adds	r7, #16
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}

0800ed02 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ed02:	b580      	push	{r7, lr}
 800ed04:	b086      	sub	sp, #24
 800ed06:	af00      	add	r7, sp, #0
 800ed08:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ed10:	69db      	ldr	r3, [r3, #28]
 800ed12:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ed14:	2300      	movs	r3, #0
 800ed16:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800ed1e:	2b03      	cmp	r3, #3
 800ed20:	d002      	beq.n	800ed28 <CDC_ProcessReception+0x26>
 800ed22:	2b04      	cmp	r3, #4
 800ed24:	d00e      	beq.n	800ed44 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 800ed26:	e049      	b.n	800edbc <CDC_ProcessReception+0xba>
      (void)USBH_BulkReceiveData(phost,
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	6a19      	ldr	r1, [r3, #32]
 800ed2c:	697b      	ldr	r3, [r7, #20]
 800ed2e:	8b5a      	ldrh	r2, [r3, #26]
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	7b1b      	ldrb	r3, [r3, #12]
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f001 fdd3 	bl	80108e0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800ed3a:	697b      	ldr	r3, [r7, #20]
 800ed3c:	2204      	movs	r2, #4
 800ed3e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800ed42:	e03b      	b.n	800edbc <CDC_ProcessReception+0xba>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	7b1b      	ldrb	r3, [r3, #12]
 800ed48:	4619      	mov	r1, r3
 800ed4a:	6878      	ldr	r0, [r7, #4]
 800ed4c:	f004 fcba 	bl	80136c4 <USBH_LL_GetURBState>
 800ed50:	4603      	mov	r3, r0
 800ed52:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800ed54:	7cfb      	ldrb	r3, [r7, #19]
 800ed56:	2b01      	cmp	r3, #1
 800ed58:	d12f      	bne.n	800edba <CDC_ProcessReception+0xb8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	7b1b      	ldrb	r3, [r3, #12]
 800ed5e:	4619      	mov	r1, r3
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f004 fc1d 	bl	80135a0 <USBH_LL_GetLastXferSize>
 800ed66:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed6c:	68fa      	ldr	r2, [r7, #12]
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	d016      	beq.n	800eda0 <CDC_ProcessReception+0x9e>
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	8b5b      	ldrh	r3, [r3, #26]
 800ed76:	461a      	mov	r2, r3
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	4293      	cmp	r3, r2
 800ed7c:	d110      	bne.n	800eda0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	1ad2      	subs	r2, r2, r3
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	6a1a      	ldr	r2, [r3, #32]
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	441a      	add	r2, r3
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	2203      	movs	r2, #3
 800ed9a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800ed9e:	e006      	b.n	800edae <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	2200      	movs	r2, #0
 800eda4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800eda8:	6878      	ldr	r0, [r7, #4]
 800edaa:	f000 f815 	bl	800edd8 <USBH_CDC_ReceiveCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 800edae:	2300      	movs	r3, #0
 800edb0:	2200      	movs	r2, #0
 800edb2:	2104      	movs	r1, #4
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f000 fe4d 	bl	800fa54 <USBH_OS_PutMessage>
      break;
 800edba:	bf00      	nop
  }
}
 800edbc:	bf00      	nop
 800edbe:	3718      	adds	r7, #24
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd80      	pop	{r7, pc}

0800edc4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800edc4:	b480      	push	{r7}
 800edc6:	b083      	sub	sp, #12
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800edcc:	bf00      	nop
 800edce:	370c      	adds	r7, #12
 800edd0:	46bd      	mov	sp, r7
 800edd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd6:	4770      	bx	lr

0800edd8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800edd8:	b480      	push	{r7}
 800edda:	b083      	sub	sp, #12
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ede0:	bf00      	nop
 800ede2:	370c      	adds	r7, #12
 800ede4:	46bd      	mov	sp, r7
 800ede6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edea:	4770      	bx	lr

0800edec <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800edec:	b480      	push	{r7}
 800edee:	b083      	sub	sp, #12
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800edf4:	bf00      	nop
 800edf6:	370c      	adds	r7, #12
 800edf8:	46bd      	mov	sp, r7
 800edfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfe:	4770      	bx	lr

0800ee00 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800ee00:	b5b0      	push	{r4, r5, r7, lr}
 800ee02:	b090      	sub	sp, #64	@ 0x40
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	60f8      	str	r0, [r7, #12]
 800ee08:	60b9      	str	r1, [r7, #8]
 800ee0a:	4613      	mov	r3, r2
 800ee0c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d101      	bne.n	800ee18 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ee14:	2302      	movs	r3, #2
 800ee16:	e04d      	b.n	800eeb4 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	79fa      	ldrb	r2, [r7, #7]
 800ee1c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	2200      	movs	r2, #0
 800ee24:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800ee30:	68f8      	ldr	r0, [r7, #12]
 800ee32:	f000 f847 	bl	800eec4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	2200      	movs	r2, #0
 800ee3a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	2200      	movs	r2, #0
 800ee42:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	2200      	movs	r2, #0
 800ee52:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d003      	beq.n	800ee64 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	68ba      	ldr	r2, [r7, #8]
 800ee60:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800ee64:	4b15      	ldr	r3, [pc, #84]	@ (800eebc <USBH_Init+0xbc>)
 800ee66:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800ee6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ee6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800ee70:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ee74:	2100      	movs	r1, #0
 800ee76:	4618      	mov	r0, r3
 800ee78:	f001 feea 	bl	8010c50 <osMessageCreate>
 800ee7c:	4602      	mov	r2, r0
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800ee84:	4b0e      	ldr	r3, [pc, #56]	@ (800eec0 <USBH_Init+0xc0>)
 800ee86:	f107 0414 	add.w	r4, r7, #20
 800ee8a:	461d      	mov	r5, r3
 800ee8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ee94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800ee98:	f107 0314 	add.w	r3, r7, #20
 800ee9c:	68f9      	ldr	r1, [r7, #12]
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f001 fe76 	bl	8010b90 <osThreadCreate>
 800eea4:	4602      	mov	r2, r0
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800eeac:	68f8      	ldr	r0, [r7, #12]
 800eeae:	f004 fac3 	bl	8013438 <USBH_LL_Init>

  return USBH_OK;
 800eeb2:	2300      	movs	r3, #0
}
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	3740      	adds	r7, #64	@ 0x40
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bdb0      	pop	{r4, r5, r7, pc}
 800eebc:	08013b2c 	.word	0x08013b2c
 800eec0:	08013b48 	.word	0x08013b48

0800eec4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b084      	sub	sp, #16
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800eecc:	2300      	movs	r3, #0
 800eece:	60fb      	str	r3, [r7, #12]
 800eed0:	e009      	b.n	800eee6 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 800eed2:	687a      	ldr	r2, [r7, #4]
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	33e0      	adds	r3, #224	@ 0xe0
 800eed8:	009b      	lsls	r3, r3, #2
 800eeda:	4413      	add	r3, r2
 800eedc:	2200      	movs	r2, #0
 800eede:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	3301      	adds	r3, #1
 800eee4:	60fb      	str	r3, [r7, #12]
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	2b0f      	cmp	r3, #15
 800eeea:	d9f2      	bls.n	800eed2 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800eeec:	2300      	movs	r3, #0
 800eeee:	60fb      	str	r3, [r7, #12]
 800eef0:	e009      	b.n	800ef06 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800eef2:	687a      	ldr	r2, [r7, #4]
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	4413      	add	r3, r2
 800eef8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800eefc:	2200      	movs	r2, #0
 800eefe:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	3301      	adds	r3, #1
 800ef04:	60fb      	str	r3, [r7, #12]
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef0c:	d3f1      	bcc.n	800eef2 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	2200      	movs	r2, #0
 800ef12:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2200      	movs	r2, #0
 800ef18:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2201      	movs	r2, #1
 800ef1e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2200      	movs	r2, #0
 800ef24:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2240      	movs	r2, #64	@ 0x40
 800ef32:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2200      	movs	r2, #0
 800ef38:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2201      	movs	r2, #1
 800ef46:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	2200      	movs	r2, #0
 800ef56:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	331c      	adds	r3, #28
 800ef5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ef62:	2100      	movs	r1, #0
 800ef64:	4618      	mov	r0, r3
 800ef66:	f004 fd1b 	bl	80139a0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ef70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ef74:	2100      	movs	r1, #0
 800ef76:	4618      	mov	r0, r3
 800ef78:	f004 fd12 	bl	80139a0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800ef82:	2212      	movs	r2, #18
 800ef84:	2100      	movs	r1, #0
 800ef86:	4618      	mov	r0, r3
 800ef88:	f004 fd0a 	bl	80139a0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800ef92:	223e      	movs	r2, #62	@ 0x3e
 800ef94:	2100      	movs	r1, #0
 800ef96:	4618      	mov	r0, r3
 800ef98:	f004 fd02 	bl	80139a0 <memset>

  return USBH_OK;
 800ef9c:	2300      	movs	r3, #0
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3710      	adds	r7, #16
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}

0800efa6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800efa6:	b480      	push	{r7}
 800efa8:	b085      	sub	sp, #20
 800efaa:	af00      	add	r7, sp, #0
 800efac:	6078      	str	r0, [r7, #4]
 800efae:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800efb0:	2300      	movs	r3, #0
 800efb2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d016      	beq.n	800efe8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d10e      	bne.n	800efe2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800efca:	1c59      	adds	r1, r3, #1
 800efcc:	687a      	ldr	r2, [r7, #4]
 800efce:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800efd2:	687a      	ldr	r2, [r7, #4]
 800efd4:	33de      	adds	r3, #222	@ 0xde
 800efd6:	6839      	ldr	r1, [r7, #0]
 800efd8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800efdc:	2300      	movs	r3, #0
 800efde:	73fb      	strb	r3, [r7, #15]
 800efe0:	e004      	b.n	800efec <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800efe2:	2302      	movs	r3, #2
 800efe4:	73fb      	strb	r3, [r7, #15]
 800efe6:	e001      	b.n	800efec <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800efe8:	2302      	movs	r3, #2
 800efea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800efec:	7bfb      	ldrb	r3, [r7, #15]
}
 800efee:	4618      	mov	r0, r3
 800eff0:	3714      	adds	r7, #20
 800eff2:	46bd      	mov	sp, r7
 800eff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff8:	4770      	bx	lr

0800effa <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800effa:	b480      	push	{r7}
 800effc:	b085      	sub	sp, #20
 800effe:	af00      	add	r7, sp, #0
 800f000:	6078      	str	r0, [r7, #4]
 800f002:	460b      	mov	r3, r1
 800f004:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800f006:	2300      	movs	r3, #0
 800f008:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800f010:	78fa      	ldrb	r2, [r7, #3]
 800f012:	429a      	cmp	r2, r3
 800f014:	d204      	bcs.n	800f020 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	78fa      	ldrb	r2, [r7, #3]
 800f01a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800f01e:	e001      	b.n	800f024 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800f020:	2302      	movs	r3, #2
 800f022:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f024:	7bfb      	ldrb	r3, [r7, #15]
}
 800f026:	4618      	mov	r0, r3
 800f028:	3714      	adds	r7, #20
 800f02a:	46bd      	mov	sp, r7
 800f02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f030:	4770      	bx	lr

0800f032 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800f032:	b480      	push	{r7}
 800f034:	b087      	sub	sp, #28
 800f036:	af00      	add	r7, sp, #0
 800f038:	6078      	str	r0, [r7, #4]
 800f03a:	4608      	mov	r0, r1
 800f03c:	4611      	mov	r1, r2
 800f03e:	461a      	mov	r2, r3
 800f040:	4603      	mov	r3, r0
 800f042:	70fb      	strb	r3, [r7, #3]
 800f044:	460b      	mov	r3, r1
 800f046:	70bb      	strb	r3, [r7, #2]
 800f048:	4613      	mov	r3, r2
 800f04a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800f04c:	2300      	movs	r3, #0
 800f04e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800f050:	2300      	movs	r3, #0
 800f052:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800f05a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f05c:	e025      	b.n	800f0aa <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800f05e:	7dfb      	ldrb	r3, [r7, #23]
 800f060:	221a      	movs	r2, #26
 800f062:	fb02 f303 	mul.w	r3, r2, r3
 800f066:	3308      	adds	r3, #8
 800f068:	68fa      	ldr	r2, [r7, #12]
 800f06a:	4413      	add	r3, r2
 800f06c:	3302      	adds	r3, #2
 800f06e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	795b      	ldrb	r3, [r3, #5]
 800f074:	78fa      	ldrb	r2, [r7, #3]
 800f076:	429a      	cmp	r2, r3
 800f078:	d002      	beq.n	800f080 <USBH_FindInterface+0x4e>
 800f07a:	78fb      	ldrb	r3, [r7, #3]
 800f07c:	2bff      	cmp	r3, #255	@ 0xff
 800f07e:	d111      	bne.n	800f0a4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f084:	78ba      	ldrb	r2, [r7, #2]
 800f086:	429a      	cmp	r2, r3
 800f088:	d002      	beq.n	800f090 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f08a:	78bb      	ldrb	r3, [r7, #2]
 800f08c:	2bff      	cmp	r3, #255	@ 0xff
 800f08e:	d109      	bne.n	800f0a4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f090:	693b      	ldr	r3, [r7, #16]
 800f092:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f094:	787a      	ldrb	r2, [r7, #1]
 800f096:	429a      	cmp	r2, r3
 800f098:	d002      	beq.n	800f0a0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f09a:	787b      	ldrb	r3, [r7, #1]
 800f09c:	2bff      	cmp	r3, #255	@ 0xff
 800f09e:	d101      	bne.n	800f0a4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800f0a0:	7dfb      	ldrb	r3, [r7, #23]
 800f0a2:	e006      	b.n	800f0b2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800f0a4:	7dfb      	ldrb	r3, [r7, #23]
 800f0a6:	3301      	adds	r3, #1
 800f0a8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f0aa:	7dfb      	ldrb	r3, [r7, #23]
 800f0ac:	2b01      	cmp	r3, #1
 800f0ae:	d9d6      	bls.n	800f05e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800f0b0:	23ff      	movs	r3, #255	@ 0xff
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	371c      	adds	r7, #28
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0bc:	4770      	bx	lr

0800f0be <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800f0be:	b580      	push	{r7, lr}
 800f0c0:	b082      	sub	sp, #8
 800f0c2:	af00      	add	r7, sp, #0
 800f0c4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800f0c6:	6878      	ldr	r0, [r7, #4]
 800f0c8:	f004 f9f2 	bl	80134b0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800f0cc:	2101      	movs	r1, #1
 800f0ce:	6878      	ldr	r0, [r7, #4]
 800f0d0:	f004 fb0b 	bl	80136ea <USBH_LL_DriverVBUS>

  return USBH_OK;
 800f0d4:	2300      	movs	r3, #0
}
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	3708      	adds	r7, #8
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd80      	pop	{r7, pc}
	...

0800f0e0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b088      	sub	sp, #32
 800f0e4:	af04      	add	r7, sp, #16
 800f0e6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800f0e8:	2302      	movs	r3, #2
 800f0ea:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800f0f6:	b2db      	uxtb	r3, r3
 800f0f8:	2b01      	cmp	r3, #1
 800f0fa:	d102      	bne.n	800f102 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2203      	movs	r2, #3
 800f100:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	b2db      	uxtb	r3, r3
 800f108:	2b0b      	cmp	r3, #11
 800f10a:	f200 81f5 	bhi.w	800f4f8 <USBH_Process+0x418>
 800f10e:	a201      	add	r2, pc, #4	@ (adr r2, 800f114 <USBH_Process+0x34>)
 800f110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f114:	0800f145 	.word	0x0800f145
 800f118:	0800f183 	.word	0x0800f183
 800f11c:	0800f1f9 	.word	0x0800f1f9
 800f120:	0800f487 	.word	0x0800f487
 800f124:	0800f4f9 	.word	0x0800f4f9
 800f128:	0800f2a5 	.word	0x0800f2a5
 800f12c:	0800f421 	.word	0x0800f421
 800f130:	0800f2e7 	.word	0x0800f2e7
 800f134:	0800f313 	.word	0x0800f313
 800f138:	0800f33b 	.word	0x0800f33b
 800f13c:	0800f389 	.word	0x0800f389
 800f140:	0800f46f 	.word	0x0800f46f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800f14a:	b2db      	uxtb	r3, r3
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	f000 81d5 	beq.w	800f4fc <USBH_Process+0x41c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2201      	movs	r2, #1
 800f156:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800f158:	20c8      	movs	r0, #200	@ 0xc8
 800f15a:	f004 fb10 	bl	801377e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f004 fa03 	bl	801356a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2200      	movs	r2, #0
 800f168:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2200      	movs	r2, #0
 800f170:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800f174:	2300      	movs	r3, #0
 800f176:	2200      	movs	r2, #0
 800f178:	2101      	movs	r1, #1
 800f17a:	6878      	ldr	r0, [r7, #4]
 800f17c:	f000 fc6a 	bl	800fa54 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800f180:	e1bc      	b.n	800f4fc <USBH_Process+0x41c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800f188:	b2db      	uxtb	r3, r3
 800f18a:	2b01      	cmp	r3, #1
 800f18c:	d107      	bne.n	800f19e <USBH_Process+0xbe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2200      	movs	r2, #0
 800f192:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2202      	movs	r2, #2
 800f19a:	701a      	strb	r2, [r3, #0]
 800f19c:	e025      	b.n	800f1ea <USBH_Process+0x10a>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800f1a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f1a8:	d914      	bls.n	800f1d4 <USBH_Process+0xf4>
        {
          phost->device.RstCnt++;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800f1b0:	3301      	adds	r3, #1
 800f1b2:	b2da      	uxtb	r2, r3
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800f1c0:	2b03      	cmp	r3, #3
 800f1c2:	d903      	bls.n	800f1cc <USBH_Process+0xec>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	220d      	movs	r2, #13
 800f1c8:	701a      	strb	r2, [r3, #0]
 800f1ca:	e00e      	b.n	800f1ea <USBH_Process+0x10a>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	701a      	strb	r2, [r3, #0]
 800f1d2:	e00a      	b.n	800f1ea <USBH_Process+0x10a>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800f1da:	f103 020a 	add.w	r2, r3, #10
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800f1e4:	200a      	movs	r0, #10
 800f1e6:	f004 faca 	bl	801377e <USBH_Delay>
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	2101      	movs	r1, #1
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f000 fc2f 	bl	800fa54 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800f1f6:	e188      	b.n	800f50a <USBH_Process+0x42a>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d005      	beq.n	800f20e <USBH_Process+0x12e>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f208:	2104      	movs	r1, #4
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800f20e:	2064      	movs	r0, #100	@ 0x64
 800f210:	f004 fab5 	bl	801377e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f004 f981 	bl	801351c <USBH_LL_GetSpeed>
 800f21a:	4603      	mov	r3, r0
 800f21c:	461a      	mov	r2, r3
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2205      	movs	r2, #5
 800f228:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800f22a:	2100      	movs	r1, #0
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f001 fba4 	bl	801097a <USBH_AllocPipe>
 800f232:	4603      	mov	r3, r0
 800f234:	461a      	mov	r2, r3
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800f23a:	2180      	movs	r1, #128	@ 0x80
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f001 fb9c 	bl	801097a <USBH_AllocPipe>
 800f242:	4603      	mov	r3, r0
 800f244:	461a      	mov	r2, r3
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	7919      	ldrb	r1, [r3, #4]
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f25a:	687a      	ldr	r2, [r7, #4]
 800f25c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f25e:	9202      	str	r2, [sp, #8]
 800f260:	2200      	movs	r2, #0
 800f262:	9201      	str	r2, [sp, #4]
 800f264:	9300      	str	r3, [sp, #0]
 800f266:	4603      	mov	r3, r0
 800f268:	2280      	movs	r2, #128	@ 0x80
 800f26a:	6878      	ldr	r0, [r7, #4]
 800f26c:	f001 fb56 	bl	801091c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	7959      	ldrb	r1, [r3, #5]
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f280:	687a      	ldr	r2, [r7, #4]
 800f282:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f284:	9202      	str	r2, [sp, #8]
 800f286:	2200      	movs	r2, #0
 800f288:	9201      	str	r2, [sp, #4]
 800f28a:	9300      	str	r3, [sp, #0]
 800f28c:	4603      	mov	r3, r0
 800f28e:	2200      	movs	r2, #0
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f001 fb43 	bl	801091c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800f296:	2300      	movs	r3, #0
 800f298:	2200      	movs	r2, #0
 800f29a:	2101      	movs	r1, #1
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	f000 fbd9 	bl	800fa54 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800f2a2:	e132      	b.n	800f50a <USBH_Process+0x42a>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f000 f935 	bl	800f514 <USBH_HandleEnum>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800f2ae:	7bbb      	ldrb	r3, [r7, #14]
 800f2b0:	b2db      	uxtb	r3, r3
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	f040 8124 	bne.w	800f500 <USBH_Process+0x420>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800f2c6:	2b01      	cmp	r3, #1
 800f2c8:	d103      	bne.n	800f2d2 <USBH_Process+0x1f2>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	2208      	movs	r2, #8
 800f2ce:	701a      	strb	r2, [r3, #0]
 800f2d0:	e002      	b.n	800f2d8 <USBH_Process+0x1f8>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2207      	movs	r2, #7
 800f2d6:	701a      	strb	r2, [r3, #0]
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800f2d8:	2300      	movs	r3, #0
 800f2da:	2200      	movs	r2, #0
 800f2dc:	2105      	movs	r1, #5
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f000 fbb8 	bl	800fa54 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800f2e4:	e10c      	b.n	800f500 <USBH_Process+0x420>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	f000 8109 	beq.w	800f504 <USBH_Process+0x424>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f2f8:	2101      	movs	r1, #1
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	2208      	movs	r2, #8
 800f302:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800f304:	2300      	movs	r3, #0
 800f306:	2200      	movs	r2, #0
 800f308:	2105      	movs	r1, #5
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f000 fba2 	bl	800fa54 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 800f310:	e0f8      	b.n	800f504 <USBH_Process+0x424>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800f318:	4619      	mov	r1, r3
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f000 fcc8 	bl	800fcb0 <USBH_SetCfg>
 800f320:	4603      	mov	r3, r0
 800f322:	2b00      	cmp	r3, #0
 800f324:	d102      	bne.n	800f32c <USBH_Process+0x24c>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2209      	movs	r2, #9
 800f32a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800f32c:	2300      	movs	r3, #0
 800f32e:	2200      	movs	r2, #0
 800f330:	2101      	movs	r1, #1
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	f000 fb8e 	bl	800fa54 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800f338:	e0e7      	b.n	800f50a <USBH_Process+0x42a>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800f340:	f003 0320 	and.w	r3, r3, #32
 800f344:	2b00      	cmp	r3, #0
 800f346:	d015      	beq.n	800f374 <USBH_Process+0x294>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800f348:	2101      	movs	r1, #1
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f000 fcd3 	bl	800fcf6 <USBH_SetFeature>
 800f350:	4603      	mov	r3, r0
 800f352:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800f354:	7bbb      	ldrb	r3, [r7, #14]
 800f356:	b2db      	uxtb	r3, r3
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d103      	bne.n	800f364 <USBH_Process+0x284>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	220a      	movs	r2, #10
 800f360:	701a      	strb	r2, [r3, #0]
 800f362:	e00a      	b.n	800f37a <USBH_Process+0x29a>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800f364:	7bbb      	ldrb	r3, [r7, #14]
 800f366:	b2db      	uxtb	r3, r3
 800f368:	2b03      	cmp	r3, #3
 800f36a:	d106      	bne.n	800f37a <USBH_Process+0x29a>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	220a      	movs	r2, #10
 800f370:	701a      	strb	r2, [r3, #0]
 800f372:	e002      	b.n	800f37a <USBH_Process+0x29a>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	220a      	movs	r2, #10
 800f378:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800f37a:	2300      	movs	r3, #0
 800f37c:	2200      	movs	r2, #0
 800f37e:	2101      	movs	r1, #1
 800f380:	6878      	ldr	r0, [r7, #4]
 800f382:	f000 fb67 	bl	800fa54 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800f386:	e0c0      	b.n	800f50a <USBH_Process+0x42a>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d03f      	beq.n	800f412 <USBH_Process+0x332>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	2200      	movs	r2, #0
 800f396:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f39a:	2300      	movs	r3, #0
 800f39c:	73fb      	strb	r3, [r7, #15]
 800f39e:	e016      	b.n	800f3ce <USBH_Process+0x2ee>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800f3a0:	7bfa      	ldrb	r2, [r7, #15]
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	32de      	adds	r2, #222	@ 0xde
 800f3a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3aa:	791a      	ldrb	r2, [r3, #4]
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800f3b2:	429a      	cmp	r2, r3
 800f3b4:	d108      	bne.n	800f3c8 <USBH_Process+0x2e8>
          {
            phost->pActiveClass = phost->pClass[idx];
 800f3b6:	7bfa      	ldrb	r2, [r7, #15]
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	32de      	adds	r2, #222	@ 0xde
 800f3bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800f3c6:	e005      	b.n	800f3d4 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f3c8:	7bfb      	ldrb	r3, [r7, #15]
 800f3ca:	3301      	adds	r3, #1
 800f3cc:	73fb      	strb	r3, [r7, #15]
 800f3ce:	7bfb      	ldrb	r3, [r7, #15]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d0e5      	beq.n	800f3a0 <USBH_Process+0x2c0>
          }
        }

        if (phost->pActiveClass != NULL)
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d016      	beq.n	800f40c <USBH_Process+0x32c>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f3e4:	689b      	ldr	r3, [r3, #8]
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	4798      	blx	r3
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d109      	bne.n	800f404 <USBH_Process+0x324>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2206      	movs	r2, #6
 800f3f4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f3fc:	2103      	movs	r1, #3
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	4798      	blx	r3
 800f402:	e006      	b.n	800f412 <USBH_Process+0x332>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	220d      	movs	r2, #13
 800f408:	701a      	strb	r2, [r3, #0]
 800f40a:	e002      	b.n	800f412 <USBH_Process+0x332>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	220d      	movs	r2, #13
 800f410:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800f412:	2300      	movs	r3, #0
 800f414:	2200      	movs	r2, #0
 800f416:	2105      	movs	r1, #5
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	f000 fb1b 	bl	800fa54 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800f41e:	e074      	b.n	800f50a <USBH_Process+0x42a>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f426:	2b00      	cmp	r3, #0
 800f428:	d017      	beq.n	800f45a <USBH_Process+0x37a>
      {
        status = phost->pActiveClass->Requests(phost);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f430:	691b      	ldr	r3, [r3, #16]
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	4798      	blx	r3
 800f436:	4603      	mov	r3, r0
 800f438:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800f43a:	7bbb      	ldrb	r3, [r7, #14]
 800f43c:	b2db      	uxtb	r3, r3
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d103      	bne.n	800f44a <USBH_Process+0x36a>
        {
          phost->gState = HOST_CLASS;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	220b      	movs	r2, #11
 800f446:	701a      	strb	r2, [r3, #0]
 800f448:	e00a      	b.n	800f460 <USBH_Process+0x380>
        }
        else if (status == USBH_FAIL)
 800f44a:	7bbb      	ldrb	r3, [r7, #14]
 800f44c:	b2db      	uxtb	r3, r3
 800f44e:	2b02      	cmp	r3, #2
 800f450:	d106      	bne.n	800f460 <USBH_Process+0x380>
        {
          phost->gState = HOST_ABORT_STATE;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	220d      	movs	r2, #13
 800f456:	701a      	strb	r2, [r3, #0]
 800f458:	e002      	b.n	800f460 <USBH_Process+0x380>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	220d      	movs	r2, #13
 800f45e:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800f460:	2300      	movs	r3, #0
 800f462:	2200      	movs	r2, #0
 800f464:	2105      	movs	r1, #5
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f000 faf4 	bl	800fa54 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800f46c:	e04d      	b.n	800f50a <USBH_Process+0x42a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f474:	2b00      	cmp	r3, #0
 800f476:	d047      	beq.n	800f508 <USBH_Process+0x428>
      {
        phost->pActiveClass->BgndProcess(phost);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f47e:	695b      	ldr	r3, [r3, #20]
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	4798      	blx	r3
      }
      break;
 800f484:	e040      	b.n	800f508 <USBH_Process+0x428>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2200      	movs	r2, #0
 800f48a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800f48e:	6878      	ldr	r0, [r7, #4]
 800f490:	f7ff fd18 	bl	800eec4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d009      	beq.n	800f4b2 <USBH_Process+0x3d2>
      {
        phost->pActiveClass->DeInit(phost);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f4a4:	68db      	ldr	r3, [r3, #12]
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d005      	beq.n	800f4c8 <USBH_Process+0x3e8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f4c2:	2105      	movs	r1, #5
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800f4ce:	b2db      	uxtb	r3, r3
 800f4d0:	2b01      	cmp	r3, #1
 800f4d2:	d107      	bne.n	800f4e4 <USBH_Process+0x404>
      {
        phost->device.is_ReEnumerated = 0U;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f7ff fdee 	bl	800f0be <USBH_Start>
 800f4e2:	e002      	b.n	800f4ea <USBH_Process+0x40a>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f003 ffe3 	bl	80134b0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	2101      	movs	r1, #1
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	f000 faaf 	bl	800fa54 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800f4f6:	e008      	b.n	800f50a <USBH_Process+0x42a>

    case HOST_ABORT_STATE:
    default :
      break;
 800f4f8:	bf00      	nop
 800f4fa:	e006      	b.n	800f50a <USBH_Process+0x42a>
      break;
 800f4fc:	bf00      	nop
 800f4fe:	e004      	b.n	800f50a <USBH_Process+0x42a>
      break;
 800f500:	bf00      	nop
 800f502:	e002      	b.n	800f50a <USBH_Process+0x42a>
    break;
 800f504:	bf00      	nop
 800f506:	e000      	b.n	800f50a <USBH_Process+0x42a>
      break;
 800f508:	bf00      	nop
  }
  return USBH_OK;
 800f50a:	2300      	movs	r3, #0
}
 800f50c:	4618      	mov	r0, r3
 800f50e:	3710      	adds	r7, #16
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}

0800f514 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b088      	sub	sp, #32
 800f518:	af04      	add	r7, sp, #16
 800f51a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f51c:	2301      	movs	r3, #1
 800f51e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800f520:	2301      	movs	r3, #1
 800f522:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	785b      	ldrb	r3, [r3, #1]
 800f528:	2b07      	cmp	r3, #7
 800f52a:	f200 81db 	bhi.w	800f8e4 <USBH_HandleEnum+0x3d0>
 800f52e:	a201      	add	r2, pc, #4	@ (adr r2, 800f534 <USBH_HandleEnum+0x20>)
 800f530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f534:	0800f555 	.word	0x0800f555
 800f538:	0800f60f 	.word	0x0800f60f
 800f53c:	0800f679 	.word	0x0800f679
 800f540:	0800f703 	.word	0x0800f703
 800f544:	0800f76d 	.word	0x0800f76d
 800f548:	0800f7dd 	.word	0x0800f7dd
 800f54c:	0800f847 	.word	0x0800f847
 800f550:	0800f8a5 	.word	0x0800f8a5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800f554:	2108      	movs	r1, #8
 800f556:	6878      	ldr	r0, [r7, #4]
 800f558:	f000 fac7 	bl	800faea <USBH_Get_DevDesc>
 800f55c:	4603      	mov	r3, r0
 800f55e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f560:	7bbb      	ldrb	r3, [r7, #14]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d12e      	bne.n	800f5c4 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2201      	movs	r2, #1
 800f574:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	7919      	ldrb	r1, [r3, #4]
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800f586:	687a      	ldr	r2, [r7, #4]
 800f588:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f58a:	9202      	str	r2, [sp, #8]
 800f58c:	2200      	movs	r2, #0
 800f58e:	9201      	str	r2, [sp, #4]
 800f590:	9300      	str	r3, [sp, #0]
 800f592:	4603      	mov	r3, r0
 800f594:	2280      	movs	r2, #128	@ 0x80
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f001 f9c0 	bl	801091c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	7959      	ldrb	r1, [r3, #5]
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800f5ac:	687a      	ldr	r2, [r7, #4]
 800f5ae:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f5b0:	9202      	str	r2, [sp, #8]
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	9201      	str	r2, [sp, #4]
 800f5b6:	9300      	str	r3, [sp, #0]
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	6878      	ldr	r0, [r7, #4]
 800f5be:	f001 f9ad 	bl	801091c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f5c2:	e191      	b.n	800f8e8 <USBH_HandleEnum+0x3d4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f5c4:	7bbb      	ldrb	r3, [r7, #14]
 800f5c6:	2b03      	cmp	r3, #3
 800f5c8:	f040 818e 	bne.w	800f8e8 <USBH_HandleEnum+0x3d4>
        phost->device.EnumCnt++;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f5d2:	3301      	adds	r3, #1
 800f5d4:	b2da      	uxtb	r2, r3
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f5e2:	2b03      	cmp	r3, #3
 800f5e4:	d903      	bls.n	800f5ee <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	220d      	movs	r2, #13
 800f5ea:	701a      	strb	r2, [r3, #0]
      break;
 800f5ec:	e17c      	b.n	800f8e8 <USBH_HandleEnum+0x3d4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	795b      	ldrb	r3, [r3, #5]
 800f5f2:	4619      	mov	r1, r3
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f001 f9e1 	bl	80109bc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	791b      	ldrb	r3, [r3, #4]
 800f5fe:	4619      	mov	r1, r3
 800f600:	6878      	ldr	r0, [r7, #4]
 800f602:	f001 f9db 	bl	80109bc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2200      	movs	r2, #0
 800f60a:	701a      	strb	r2, [r3, #0]
      break;
 800f60c:	e16c      	b.n	800f8e8 <USBH_HandleEnum+0x3d4>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800f60e:	2112      	movs	r1, #18
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f000 fa6a 	bl	800faea <USBH_Get_DevDesc>
 800f616:	4603      	mov	r3, r0
 800f618:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f61a:	7bbb      	ldrb	r3, [r7, #14]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d103      	bne.n	800f628 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2202      	movs	r2, #2
 800f624:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f626:	e161      	b.n	800f8ec <USBH_HandleEnum+0x3d8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f628:	7bbb      	ldrb	r3, [r7, #14]
 800f62a:	2b03      	cmp	r3, #3
 800f62c:	f040 815e 	bne.w	800f8ec <USBH_HandleEnum+0x3d8>
        phost->device.EnumCnt++;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f636:	3301      	adds	r3, #1
 800f638:	b2da      	uxtb	r2, r3
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f646:	2b03      	cmp	r3, #3
 800f648:	d903      	bls.n	800f652 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	220d      	movs	r2, #13
 800f64e:	701a      	strb	r2, [r3, #0]
      break;
 800f650:	e14c      	b.n	800f8ec <USBH_HandleEnum+0x3d8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	795b      	ldrb	r3, [r3, #5]
 800f656:	4619      	mov	r1, r3
 800f658:	6878      	ldr	r0, [r7, #4]
 800f65a:	f001 f9af 	bl	80109bc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	791b      	ldrb	r3, [r3, #4]
 800f662:	4619      	mov	r1, r3
 800f664:	6878      	ldr	r0, [r7, #4]
 800f666:	f001 f9a9 	bl	80109bc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	2200      	movs	r2, #0
 800f66e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2200      	movs	r2, #0
 800f674:	701a      	strb	r2, [r3, #0]
      break;
 800f676:	e139      	b.n	800f8ec <USBH_HandleEnum+0x3d8>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800f678:	2101      	movs	r1, #1
 800f67a:	6878      	ldr	r0, [r7, #4]
 800f67c:	f000 faf4 	bl	800fc68 <USBH_SetAddress>
 800f680:	4603      	mov	r3, r0
 800f682:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f684:	7bbb      	ldrb	r3, [r7, #14]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d130      	bne.n	800f6ec <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800f68a:	2002      	movs	r0, #2
 800f68c:	f004 f877 	bl	801377e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2201      	movs	r2, #1
 800f694:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2203      	movs	r2, #3
 800f69c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	7919      	ldrb	r1, [r3, #4]
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800f6ae:	687a      	ldr	r2, [r7, #4]
 800f6b0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f6b2:	9202      	str	r2, [sp, #8]
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	9201      	str	r2, [sp, #4]
 800f6b8:	9300      	str	r3, [sp, #0]
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	2280      	movs	r2, #128	@ 0x80
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f001 f92c 	bl	801091c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	7959      	ldrb	r1, [r3, #5]
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800f6d4:	687a      	ldr	r2, [r7, #4]
 800f6d6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f6d8:	9202      	str	r2, [sp, #8]
 800f6da:	2200      	movs	r2, #0
 800f6dc:	9201      	str	r2, [sp, #4]
 800f6de:	9300      	str	r3, [sp, #0]
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f001 f919 	bl	801091c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f6ea:	e101      	b.n	800f8f0 <USBH_HandleEnum+0x3dc>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f6ec:	7bbb      	ldrb	r3, [r7, #14]
 800f6ee:	2b03      	cmp	r3, #3
 800f6f0:	f040 80fe 	bne.w	800f8f0 <USBH_HandleEnum+0x3dc>
        phost->gState = HOST_ABORT_STATE;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	220d      	movs	r2, #13
 800f6f8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	705a      	strb	r2, [r3, #1]
      break;
 800f700:	e0f6      	b.n	800f8f0 <USBH_HandleEnum+0x3dc>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800f702:	2109      	movs	r1, #9
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f000 fa1c 	bl	800fb42 <USBH_Get_CfgDesc>
 800f70a:	4603      	mov	r3, r0
 800f70c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f70e:	7bbb      	ldrb	r3, [r7, #14]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d103      	bne.n	800f71c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2204      	movs	r2, #4
 800f718:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f71a:	e0eb      	b.n	800f8f4 <USBH_HandleEnum+0x3e0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f71c:	7bbb      	ldrb	r3, [r7, #14]
 800f71e:	2b03      	cmp	r3, #3
 800f720:	f040 80e8 	bne.w	800f8f4 <USBH_HandleEnum+0x3e0>
        phost->device.EnumCnt++;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f72a:	3301      	adds	r3, #1
 800f72c:	b2da      	uxtb	r2, r3
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f73a:	2b03      	cmp	r3, #3
 800f73c:	d903      	bls.n	800f746 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	220d      	movs	r2, #13
 800f742:	701a      	strb	r2, [r3, #0]
      break;
 800f744:	e0d6      	b.n	800f8f4 <USBH_HandleEnum+0x3e0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	795b      	ldrb	r3, [r3, #5]
 800f74a:	4619      	mov	r1, r3
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f001 f935 	bl	80109bc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	791b      	ldrb	r3, [r3, #4]
 800f756:	4619      	mov	r1, r3
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f001 f92f 	bl	80109bc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	2200      	movs	r2, #0
 800f762:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2200      	movs	r2, #0
 800f768:	701a      	strb	r2, [r3, #0]
      break;
 800f76a:	e0c3      	b.n	800f8f4 <USBH_HandleEnum+0x3e0>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800f772:	4619      	mov	r1, r3
 800f774:	6878      	ldr	r0, [r7, #4]
 800f776:	f000 f9e4 	bl	800fb42 <USBH_Get_CfgDesc>
 800f77a:	4603      	mov	r3, r0
 800f77c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f77e:	7bbb      	ldrb	r3, [r7, #14]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d103      	bne.n	800f78c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	2205      	movs	r2, #5
 800f788:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f78a:	e0b5      	b.n	800f8f8 <USBH_HandleEnum+0x3e4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f78c:	7bbb      	ldrb	r3, [r7, #14]
 800f78e:	2b03      	cmp	r3, #3
 800f790:	f040 80b2 	bne.w	800f8f8 <USBH_HandleEnum+0x3e4>
        phost->device.EnumCnt++;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f79a:	3301      	adds	r3, #1
 800f79c:	b2da      	uxtb	r2, r3
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f7aa:	2b03      	cmp	r3, #3
 800f7ac:	d903      	bls.n	800f7b6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	220d      	movs	r2, #13
 800f7b2:	701a      	strb	r2, [r3, #0]
      break;
 800f7b4:	e0a0      	b.n	800f8f8 <USBH_HandleEnum+0x3e4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	795b      	ldrb	r3, [r3, #5]
 800f7ba:	4619      	mov	r1, r3
 800f7bc:	6878      	ldr	r0, [r7, #4]
 800f7be:	f001 f8fd 	bl	80109bc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	791b      	ldrb	r3, [r3, #4]
 800f7c6:	4619      	mov	r1, r3
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f001 f8f7 	bl	80109bc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	701a      	strb	r2, [r3, #0]
      break;
 800f7da:	e08d      	b.n	800f8f8 <USBH_HandleEnum+0x3e4>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d025      	beq.n	800f832 <USBH_HandleEnum+0x31e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f7f2:	23ff      	movs	r3, #255	@ 0xff
 800f7f4:	6878      	ldr	r0, [r7, #4]
 800f7f6:	f000 f9ce 	bl	800fb96 <USBH_Get_StringDesc>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f7fe:	7bbb      	ldrb	r3, [r7, #14]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d109      	bne.n	800f818 <USBH_HandleEnum+0x304>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2206      	movs	r2, #6
 800f808:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800f80a:	2300      	movs	r3, #0
 800f80c:	2200      	movs	r2, #0
 800f80e:	2105      	movs	r1, #5
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f000 f91f 	bl	800fa54 <USBH_OS_PutMessage>

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800f816:	e071      	b.n	800f8fc <USBH_HandleEnum+0x3e8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f818:	7bbb      	ldrb	r3, [r7, #14]
 800f81a:	2b03      	cmp	r3, #3
 800f81c:	d16e      	bne.n	800f8fc <USBH_HandleEnum+0x3e8>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	2206      	movs	r2, #6
 800f822:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800f824:	2300      	movs	r3, #0
 800f826:	2200      	movs	r2, #0
 800f828:	2105      	movs	r1, #5
 800f82a:	6878      	ldr	r0, [r7, #4]
 800f82c:	f000 f912 	bl	800fa54 <USBH_OS_PutMessage>
      break;
 800f830:	e064      	b.n	800f8fc <USBH_HandleEnum+0x3e8>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	2206      	movs	r2, #6
 800f836:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800f838:	2300      	movs	r3, #0
 800f83a:	2200      	movs	r2, #0
 800f83c:	2105      	movs	r1, #5
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f000 f908 	bl	800fa54 <USBH_OS_PutMessage>
      break;
 800f844:	e05a      	b.n	800f8fc <USBH_HandleEnum+0x3e8>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d01f      	beq.n	800f890 <USBH_HandleEnum+0x37c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f85c:	23ff      	movs	r3, #255	@ 0xff
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f000 f999 	bl	800fb96 <USBH_Get_StringDesc>
 800f864:	4603      	mov	r3, r0
 800f866:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f868:	7bbb      	ldrb	r3, [r7, #14]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d103      	bne.n	800f876 <USBH_HandleEnum+0x362>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	2207      	movs	r2, #7
 800f872:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800f874:	e044      	b.n	800f900 <USBH_HandleEnum+0x3ec>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f876:	7bbb      	ldrb	r3, [r7, #14]
 800f878:	2b03      	cmp	r3, #3
 800f87a:	d141      	bne.n	800f900 <USBH_HandleEnum+0x3ec>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2207      	movs	r2, #7
 800f880:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800f882:	2300      	movs	r3, #0
 800f884:	2200      	movs	r2, #0
 800f886:	2105      	movs	r1, #5
 800f888:	6878      	ldr	r0, [r7, #4]
 800f88a:	f000 f8e3 	bl	800fa54 <USBH_OS_PutMessage>
      break;
 800f88e:	e037      	b.n	800f900 <USBH_HandleEnum+0x3ec>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2207      	movs	r2, #7
 800f894:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800f896:	2300      	movs	r3, #0
 800f898:	2200      	movs	r2, #0
 800f89a:	2105      	movs	r1, #5
 800f89c:	6878      	ldr	r0, [r7, #4]
 800f89e:	f000 f8d9 	bl	800fa54 <USBH_OS_PutMessage>
      break;
 800f8a2:	e02d      	b.n	800f900 <USBH_HandleEnum+0x3ec>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d017      	beq.n	800f8de <USBH_HandleEnum+0x3ca>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f8ba:	23ff      	movs	r3, #255	@ 0xff
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	f000 f96a 	bl	800fb96 <USBH_Get_StringDesc>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f8c6:	7bbb      	ldrb	r3, [r7, #14]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d102      	bne.n	800f8d2 <USBH_HandleEnum+0x3be>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800f8d0:	e018      	b.n	800f904 <USBH_HandleEnum+0x3f0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f8d2:	7bbb      	ldrb	r3, [r7, #14]
 800f8d4:	2b03      	cmp	r3, #3
 800f8d6:	d115      	bne.n	800f904 <USBH_HandleEnum+0x3f0>
          Status = USBH_OK;
 800f8d8:	2300      	movs	r3, #0
 800f8da:	73fb      	strb	r3, [r7, #15]
      break;
 800f8dc:	e012      	b.n	800f904 <USBH_HandleEnum+0x3f0>
        Status = USBH_OK;
 800f8de:	2300      	movs	r3, #0
 800f8e0:	73fb      	strb	r3, [r7, #15]
      break;
 800f8e2:	e00f      	b.n	800f904 <USBH_HandleEnum+0x3f0>

    default:
      break;
 800f8e4:	bf00      	nop
 800f8e6:	e00e      	b.n	800f906 <USBH_HandleEnum+0x3f2>
      break;
 800f8e8:	bf00      	nop
 800f8ea:	e00c      	b.n	800f906 <USBH_HandleEnum+0x3f2>
      break;
 800f8ec:	bf00      	nop
 800f8ee:	e00a      	b.n	800f906 <USBH_HandleEnum+0x3f2>
      break;
 800f8f0:	bf00      	nop
 800f8f2:	e008      	b.n	800f906 <USBH_HandleEnum+0x3f2>
      break;
 800f8f4:	bf00      	nop
 800f8f6:	e006      	b.n	800f906 <USBH_HandleEnum+0x3f2>
      break;
 800f8f8:	bf00      	nop
 800f8fa:	e004      	b.n	800f906 <USBH_HandleEnum+0x3f2>
      break;
 800f8fc:	bf00      	nop
 800f8fe:	e002      	b.n	800f906 <USBH_HandleEnum+0x3f2>
      break;
 800f900:	bf00      	nop
 800f902:	e000      	b.n	800f906 <USBH_HandleEnum+0x3f2>
      break;
 800f904:	bf00      	nop
  }
  return Status;
 800f906:	7bfb      	ldrb	r3, [r7, #15]
}
 800f908:	4618      	mov	r0, r3
 800f90a:	3710      	adds	r7, #16
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}

0800f910 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800f910:	b480      	push	{r7}
 800f912:	b083      	sub	sp, #12
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
 800f918:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	683a      	ldr	r2, [r7, #0]
 800f91e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800f922:	bf00      	nop
 800f924:	370c      	adds	r7, #12
 800f926:	46bd      	mov	sp, r7
 800f928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92c:	4770      	bx	lr

0800f92e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800f92e:	b580      	push	{r7, lr}
 800f930:	b082      	sub	sp, #8
 800f932:	af00      	add	r7, sp, #0
 800f934:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800f93c:	1c5a      	adds	r2, r3, #1
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f000 f804 	bl	800f952 <USBH_HandleSof>
}
 800f94a:	bf00      	nop
 800f94c:	3708      	adds	r7, #8
 800f94e:	46bd      	mov	sp, r7
 800f950:	bd80      	pop	{r7, pc}

0800f952 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800f952:	b580      	push	{r7, lr}
 800f954:	b082      	sub	sp, #8
 800f956:	af00      	add	r7, sp, #0
 800f958:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	781b      	ldrb	r3, [r3, #0]
 800f95e:	b2db      	uxtb	r3, r3
 800f960:	2b0b      	cmp	r3, #11
 800f962:	d10a      	bne.n	800f97a <USBH_HandleSof+0x28>
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d005      	beq.n	800f97a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f974:	699b      	ldr	r3, [r3, #24]
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	4798      	blx	r3
  }
}
 800f97a:	bf00      	nop
 800f97c:	3708      	adds	r7, #8
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}

0800f982 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800f982:	b580      	push	{r7, lr}
 800f984:	b082      	sub	sp, #8
 800f986:	af00      	add	r7, sp, #0
 800f988:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	2201      	movs	r2, #1
 800f98e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800f992:	2300      	movs	r3, #0
 800f994:	2200      	movs	r2, #0
 800f996:	2101      	movs	r1, #1
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	f000 f85b 	bl	800fa54 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 800f99e:	bf00      	nop
}
 800f9a0:	3708      	adds	r7, #8
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}

0800f9a6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800f9a6:	b480      	push	{r7}
 800f9a8:	b083      	sub	sp, #12
 800f9aa:	af00      	add	r7, sp, #0
 800f9ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	2201      	movs	r2, #1
 800f9ba:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800f9be:	bf00      	nop
}
 800f9c0:	370c      	adds	r7, #12
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c8:	4770      	bx	lr

0800f9ca <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800f9ca:	b580      	push	{r7, lr}
 800f9cc:	b082      	sub	sp, #8
 800f9ce:	af00      	add	r7, sp, #0
 800f9d0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2201      	movs	r2, #1
 800f9d6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2200      	movs	r2, #0
 800f9de:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	2101      	movs	r1, #1
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	f000 f82f 	bl	800fa54 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800f9f6:	2300      	movs	r3, #0
}
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	3708      	adds	r7, #8
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}

0800fa00 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b082      	sub	sp, #8
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	2201      	movs	r2, #1
 800fa0c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2200      	movs	r2, #0
 800fa14:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	f003 fd60 	bl	80134e6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	791b      	ldrb	r3, [r3, #4]
 800fa2a:	4619      	mov	r1, r3
 800fa2c:	6878      	ldr	r0, [r7, #4]
 800fa2e:	f000 ffc5 	bl	80109bc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	795b      	ldrb	r3, [r3, #5]
 800fa36:	4619      	mov	r1, r3
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f000 ffbf 	bl	80109bc <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800fa3e:	2300      	movs	r3, #0
 800fa40:	2200      	movs	r2, #0
 800fa42:	2101      	movs	r1, #1
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f000 f805 	bl	800fa54 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800fa4a:	2300      	movs	r3, #0
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	3708      	adds	r7, #8
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}

0800fa54 <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b086      	sub	sp, #24
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	60f8      	str	r0, [r7, #12]
 800fa5c:	607a      	str	r2, [r7, #4]
 800fa5e:	603b      	str	r3, [r7, #0]
 800fa60:	460b      	mov	r3, r1
 800fa62:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 800fa64:	7afa      	ldrb	r2, [r7, #11]
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  UNUSED(priority);

  /* Calculate the number of available spaces */
  uint32_t available_spaces = MSGQUEUE_OBJECTS - osMessageWaiting(phost->os_event);
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 800fa72:	4618      	mov	r0, r3
 800fa74:	f001 f9c8 	bl	8010e08 <osMessageWaiting>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	f1c3 0310 	rsb	r3, r3, #16
 800fa7e:	617b      	str	r3, [r7, #20]

  if (available_spaces != 0U)
 800fa80:	697b      	ldr	r3, [r7, #20]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d009      	beq.n	800fa9a <USBH_OS_PutMessage+0x46>
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fa92:	687a      	ldr	r2, [r7, #4]
 800fa94:	4619      	mov	r1, r3
 800fa96:	f001 f903 	bl	8010ca0 <osMessagePut>
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
  }
#endif /* (osCMSIS < 0x20000U) */
}
 800fa9a:	bf00      	nop
 800fa9c:	3718      	adds	r7, #24
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}

0800faa2 <USBH_Process_OS>:
  * @param  pvParameters not used
  * @retval None
  */
#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800faa2:	b580      	push	{r7, lr}
 800faa4:	b086      	sub	sp, #24
 800faa6:	af00      	add	r7, sp, #0
 800faa8:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 800fab0:	f107 030c 	add.w	r3, r7, #12
 800fab4:	f04f 32ff 	mov.w	r2, #4294967295
 800fab8:	4618      	mov	r0, r3
 800faba:	f001 f931 	bl	8010d20 <osMessageGet>
    if (event.status == osEventMessage)
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	2b10      	cmp	r3, #16
 800fac2:	d1f2      	bne.n	800faaa <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	f7ff fb0b 	bl	800f0e0 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800faca:	e7ee      	b.n	800faaa <USBH_Process_OS+0x8>

0800facc <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800fad4:	2300      	movs	r3, #0
 800fad6:	2200      	movs	r2, #0
 800fad8:	2101      	movs	r1, #1
 800fada:	6878      	ldr	r0, [r7, #4]
 800fadc:	f7ff ffba 	bl	800fa54 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800fae0:	2300      	movs	r3, #0
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	3708      	adds	r7, #8
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}

0800faea <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800faea:	b580      	push	{r7, lr}
 800faec:	b086      	sub	sp, #24
 800faee:	af02      	add	r7, sp, #8
 800faf0:	6078      	str	r0, [r7, #4]
 800faf2:	460b      	mov	r3, r1
 800faf4:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800faf6:	887b      	ldrh	r3, [r7, #2]
 800faf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fafc:	d901      	bls.n	800fb02 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800fafe:	2303      	movs	r3, #3
 800fb00:	e01b      	b.n	800fb3a <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800fb08:	887b      	ldrh	r3, [r7, #2]
 800fb0a:	9300      	str	r3, [sp, #0]
 800fb0c:	4613      	mov	r3, r2
 800fb0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fb12:	2100      	movs	r1, #0
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	f000 f872 	bl	800fbfe <USBH_GetDescriptor>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800fb1e:	7bfb      	ldrb	r3, [r7, #15]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d109      	bne.n	800fb38 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800fb2a:	887a      	ldrh	r2, [r7, #2]
 800fb2c:	4619      	mov	r1, r3
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f000 f92a 	bl	800fd88 <USBH_ParseDevDesc>
 800fb34:	4603      	mov	r3, r0
 800fb36:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800fb38:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	3710      	adds	r7, #16
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	bd80      	pop	{r7, pc}

0800fb42 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800fb42:	b580      	push	{r7, lr}
 800fb44:	b086      	sub	sp, #24
 800fb46:	af02      	add	r7, sp, #8
 800fb48:	6078      	str	r0, [r7, #4]
 800fb4a:	460b      	mov	r3, r1
 800fb4c:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	331c      	adds	r3, #28
 800fb52:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800fb54:	887b      	ldrh	r3, [r7, #2]
 800fb56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fb5a:	d901      	bls.n	800fb60 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800fb5c:	2303      	movs	r3, #3
 800fb5e:	e016      	b.n	800fb8e <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800fb60:	887b      	ldrh	r3, [r7, #2]
 800fb62:	9300      	str	r3, [sp, #0]
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fb6a:	2100      	movs	r1, #0
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f000 f846 	bl	800fbfe <USBH_GetDescriptor>
 800fb72:	4603      	mov	r3, r0
 800fb74:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800fb76:	7bfb      	ldrb	r3, [r7, #15]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d107      	bne.n	800fb8c <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800fb7c:	887b      	ldrh	r3, [r7, #2]
 800fb7e:	461a      	mov	r2, r3
 800fb80:	68b9      	ldr	r1, [r7, #8]
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f000 f9b0 	bl	800fee8 <USBH_ParseCfgDesc>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800fb8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb8e:	4618      	mov	r0, r3
 800fb90:	3710      	adds	r7, #16
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}

0800fb96 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800fb96:	b580      	push	{r7, lr}
 800fb98:	b088      	sub	sp, #32
 800fb9a:	af02      	add	r7, sp, #8
 800fb9c:	60f8      	str	r0, [r7, #12]
 800fb9e:	607a      	str	r2, [r7, #4]
 800fba0:	461a      	mov	r2, r3
 800fba2:	460b      	mov	r3, r1
 800fba4:	72fb      	strb	r3, [r7, #11]
 800fba6:	4613      	mov	r3, r2
 800fba8:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800fbaa:	893b      	ldrh	r3, [r7, #8]
 800fbac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fbb0:	d802      	bhi.n	800fbb8 <USBH_Get_StringDesc+0x22>
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d101      	bne.n	800fbbc <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800fbb8:	2303      	movs	r3, #3
 800fbba:	e01c      	b.n	800fbf6 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800fbbc:	7afb      	ldrb	r3, [r7, #11]
 800fbbe:	b29b      	uxth	r3, r3
 800fbc0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800fbc4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800fbcc:	893b      	ldrh	r3, [r7, #8]
 800fbce:	9300      	str	r3, [sp, #0]
 800fbd0:	460b      	mov	r3, r1
 800fbd2:	2100      	movs	r1, #0
 800fbd4:	68f8      	ldr	r0, [r7, #12]
 800fbd6:	f000 f812 	bl	800fbfe <USBH_GetDescriptor>
 800fbda:	4603      	mov	r3, r0
 800fbdc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800fbde:	7dfb      	ldrb	r3, [r7, #23]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d107      	bne.n	800fbf4 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800fbea:	893a      	ldrh	r2, [r7, #8]
 800fbec:	6879      	ldr	r1, [r7, #4]
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f000 fb8d 	bl	801030e <USBH_ParseStringDesc>
  }

  return status;
 800fbf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	3718      	adds	r7, #24
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	bd80      	pop	{r7, pc}

0800fbfe <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800fbfe:	b580      	push	{r7, lr}
 800fc00:	b084      	sub	sp, #16
 800fc02:	af00      	add	r7, sp, #0
 800fc04:	60f8      	str	r0, [r7, #12]
 800fc06:	607b      	str	r3, [r7, #4]
 800fc08:	460b      	mov	r3, r1
 800fc0a:	72fb      	strb	r3, [r7, #11]
 800fc0c:	4613      	mov	r3, r2
 800fc0e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	789b      	ldrb	r3, [r3, #2]
 800fc14:	2b01      	cmp	r3, #1
 800fc16:	d11c      	bne.n	800fc52 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800fc18:	7afb      	ldrb	r3, [r7, #11]
 800fc1a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800fc1e:	b2da      	uxtb	r2, r3
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	2206      	movs	r2, #6
 800fc28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	893a      	ldrh	r2, [r7, #8]
 800fc2e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800fc30:	893b      	ldrh	r3, [r7, #8]
 800fc32:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fc36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fc3a:	d104      	bne.n	800fc46 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	f240 4209 	movw	r2, #1033	@ 0x409
 800fc42:	829a      	strh	r2, [r3, #20]
 800fc44:	e002      	b.n	800fc4c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	8b3a      	ldrh	r2, [r7, #24]
 800fc50:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800fc52:	8b3b      	ldrh	r3, [r7, #24]
 800fc54:	461a      	mov	r2, r3
 800fc56:	6879      	ldr	r1, [r7, #4]
 800fc58:	68f8      	ldr	r0, [r7, #12]
 800fc5a:	f000 fba5 	bl	80103a8 <USBH_CtlReq>
 800fc5e:	4603      	mov	r3, r0
}
 800fc60:	4618      	mov	r0, r3
 800fc62:	3710      	adds	r7, #16
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bd80      	pop	{r7, pc}

0800fc68 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b082      	sub	sp, #8
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
 800fc70:	460b      	mov	r3, r1
 800fc72:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	789b      	ldrb	r3, [r3, #2]
 800fc78:	2b01      	cmp	r3, #1
 800fc7a:	d10f      	bne.n	800fc9c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2200      	movs	r2, #0
 800fc80:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	2205      	movs	r2, #5
 800fc86:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800fc88:	78fb      	ldrb	r3, [r7, #3]
 800fc8a:	b29a      	uxth	r2, r3
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2200      	movs	r2, #0
 800fc94:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	2200      	movs	r2, #0
 800fc9a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	2100      	movs	r1, #0
 800fca0:	6878      	ldr	r0, [r7, #4]
 800fca2:	f000 fb81 	bl	80103a8 <USBH_CtlReq>
 800fca6:	4603      	mov	r3, r0
}
 800fca8:	4618      	mov	r0, r3
 800fcaa:	3708      	adds	r7, #8
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}

0800fcb0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b082      	sub	sp, #8
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
 800fcb8:	460b      	mov	r3, r1
 800fcba:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	789b      	ldrb	r3, [r3, #2]
 800fcc0:	2b01      	cmp	r3, #1
 800fcc2:	d10e      	bne.n	800fce2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	2209      	movs	r2, #9
 800fcce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	887a      	ldrh	r2, [r7, #2]
 800fcd4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	2200      	movs	r2, #0
 800fcda:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	2200      	movs	r2, #0
 800fce0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800fce2:	2200      	movs	r2, #0
 800fce4:	2100      	movs	r1, #0
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f000 fb5e 	bl	80103a8 <USBH_CtlReq>
 800fcec:	4603      	mov	r3, r0
}
 800fcee:	4618      	mov	r0, r3
 800fcf0:	3708      	adds	r7, #8
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	bd80      	pop	{r7, pc}

0800fcf6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800fcf6:	b580      	push	{r7, lr}
 800fcf8:	b082      	sub	sp, #8
 800fcfa:	af00      	add	r7, sp, #0
 800fcfc:	6078      	str	r0, [r7, #4]
 800fcfe:	460b      	mov	r3, r1
 800fd00:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	789b      	ldrb	r3, [r3, #2]
 800fd06:	2b01      	cmp	r3, #1
 800fd08:	d10f      	bne.n	800fd2a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2203      	movs	r2, #3
 800fd14:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800fd16:	78fb      	ldrb	r3, [r7, #3]
 800fd18:	b29a      	uxth	r2, r3
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2200      	movs	r2, #0
 800fd22:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	2200      	movs	r2, #0
 800fd28:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	2100      	movs	r1, #0
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	f000 fb3a 	bl	80103a8 <USBH_CtlReq>
 800fd34:	4603      	mov	r3, r0
}
 800fd36:	4618      	mov	r0, r3
 800fd38:	3708      	adds	r7, #8
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}

0800fd3e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800fd3e:	b580      	push	{r7, lr}
 800fd40:	b082      	sub	sp, #8
 800fd42:	af00      	add	r7, sp, #0
 800fd44:	6078      	str	r0, [r7, #4]
 800fd46:	460b      	mov	r3, r1
 800fd48:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	789b      	ldrb	r3, [r3, #2]
 800fd4e:	2b01      	cmp	r3, #1
 800fd50:	d10f      	bne.n	800fd72 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	2202      	movs	r2, #2
 800fd56:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	2201      	movs	r2, #1
 800fd5c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2200      	movs	r2, #0
 800fd62:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800fd64:	78fb      	ldrb	r3, [r7, #3]
 800fd66:	b29a      	uxth	r2, r3
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2200      	movs	r2, #0
 800fd70:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800fd72:	2200      	movs	r2, #0
 800fd74:	2100      	movs	r1, #0
 800fd76:	6878      	ldr	r0, [r7, #4]
 800fd78:	f000 fb16 	bl	80103a8 <USBH_CtlReq>
 800fd7c:	4603      	mov	r3, r0
}
 800fd7e:	4618      	mov	r0, r3
 800fd80:	3708      	adds	r7, #8
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bd80      	pop	{r7, pc}
	...

0800fd88 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800fd88:	b480      	push	{r7}
 800fd8a:	b087      	sub	sp, #28
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	60f8      	str	r0, [r7, #12]
 800fd90:	60b9      	str	r1, [r7, #8]
 800fd92:	4613      	mov	r3, r2
 800fd94:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800fd9c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800fda2:	68bb      	ldr	r3, [r7, #8]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d101      	bne.n	800fdac <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800fda8:	2302      	movs	r3, #2
 800fdaa:	e094      	b.n	800fed6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	781a      	ldrb	r2, [r3, #0]
 800fdb0:	693b      	ldr	r3, [r7, #16]
 800fdb2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	785a      	ldrb	r2, [r3, #1]
 800fdb8:	693b      	ldr	r3, [r7, #16]
 800fdba:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800fdbc:	68bb      	ldr	r3, [r7, #8]
 800fdbe:	3302      	adds	r3, #2
 800fdc0:	781b      	ldrb	r3, [r3, #0]
 800fdc2:	461a      	mov	r2, r3
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	3303      	adds	r3, #3
 800fdc8:	781b      	ldrb	r3, [r3, #0]
 800fdca:	021b      	lsls	r3, r3, #8
 800fdcc:	b29b      	uxth	r3, r3
 800fdce:	4313      	orrs	r3, r2
 800fdd0:	b29a      	uxth	r2, r3
 800fdd2:	693b      	ldr	r3, [r7, #16]
 800fdd4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800fdd6:	68bb      	ldr	r3, [r7, #8]
 800fdd8:	791a      	ldrb	r2, [r3, #4]
 800fdda:	693b      	ldr	r3, [r7, #16]
 800fddc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800fdde:	68bb      	ldr	r3, [r7, #8]
 800fde0:	795a      	ldrb	r2, [r3, #5]
 800fde2:	693b      	ldr	r3, [r7, #16]
 800fde4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800fde6:	68bb      	ldr	r3, [r7, #8]
 800fde8:	799a      	ldrb	r2, [r3, #6]
 800fdea:	693b      	ldr	r3, [r7, #16]
 800fdec:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800fdee:	68bb      	ldr	r3, [r7, #8]
 800fdf0:	79da      	ldrb	r2, [r3, #7]
 800fdf2:	693b      	ldr	r3, [r7, #16]
 800fdf4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d004      	beq.n	800fe0a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800fe06:	2b01      	cmp	r3, #1
 800fe08:	d11b      	bne.n	800fe42 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800fe0a:	693b      	ldr	r3, [r7, #16]
 800fe0c:	79db      	ldrb	r3, [r3, #7]
 800fe0e:	2b20      	cmp	r3, #32
 800fe10:	dc0f      	bgt.n	800fe32 <USBH_ParseDevDesc+0xaa>
 800fe12:	2b08      	cmp	r3, #8
 800fe14:	db0f      	blt.n	800fe36 <USBH_ParseDevDesc+0xae>
 800fe16:	3b08      	subs	r3, #8
 800fe18:	4a32      	ldr	r2, [pc, #200]	@ (800fee4 <USBH_ParseDevDesc+0x15c>)
 800fe1a:	fa22 f303 	lsr.w	r3, r2, r3
 800fe1e:	f003 0301 	and.w	r3, r3, #1
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	bf14      	ite	ne
 800fe26:	2301      	movne	r3, #1
 800fe28:	2300      	moveq	r3, #0
 800fe2a:	b2db      	uxtb	r3, r3
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d106      	bne.n	800fe3e <USBH_ParseDevDesc+0xb6>
 800fe30:	e001      	b.n	800fe36 <USBH_ParseDevDesc+0xae>
 800fe32:	2b40      	cmp	r3, #64	@ 0x40
 800fe34:	d003      	beq.n	800fe3e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800fe36:	693b      	ldr	r3, [r7, #16]
 800fe38:	2208      	movs	r2, #8
 800fe3a:	71da      	strb	r2, [r3, #7]
        break;
 800fe3c:	e000      	b.n	800fe40 <USBH_ParseDevDesc+0xb8>
        break;
 800fe3e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800fe40:	e00e      	b.n	800fe60 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800fe48:	2b02      	cmp	r3, #2
 800fe4a:	d107      	bne.n	800fe5c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800fe4c:	693b      	ldr	r3, [r7, #16]
 800fe4e:	79db      	ldrb	r3, [r3, #7]
 800fe50:	2b08      	cmp	r3, #8
 800fe52:	d005      	beq.n	800fe60 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800fe54:	693b      	ldr	r3, [r7, #16]
 800fe56:	2208      	movs	r2, #8
 800fe58:	71da      	strb	r2, [r3, #7]
 800fe5a:	e001      	b.n	800fe60 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800fe5c:	2303      	movs	r3, #3
 800fe5e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800fe60:	88fb      	ldrh	r3, [r7, #6]
 800fe62:	2b08      	cmp	r3, #8
 800fe64:	d936      	bls.n	800fed4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	3308      	adds	r3, #8
 800fe6a:	781b      	ldrb	r3, [r3, #0]
 800fe6c:	461a      	mov	r2, r3
 800fe6e:	68bb      	ldr	r3, [r7, #8]
 800fe70:	3309      	adds	r3, #9
 800fe72:	781b      	ldrb	r3, [r3, #0]
 800fe74:	021b      	lsls	r3, r3, #8
 800fe76:	b29b      	uxth	r3, r3
 800fe78:	4313      	orrs	r3, r2
 800fe7a:	b29a      	uxth	r2, r3
 800fe7c:	693b      	ldr	r3, [r7, #16]
 800fe7e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800fe80:	68bb      	ldr	r3, [r7, #8]
 800fe82:	330a      	adds	r3, #10
 800fe84:	781b      	ldrb	r3, [r3, #0]
 800fe86:	461a      	mov	r2, r3
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	330b      	adds	r3, #11
 800fe8c:	781b      	ldrb	r3, [r3, #0]
 800fe8e:	021b      	lsls	r3, r3, #8
 800fe90:	b29b      	uxth	r3, r3
 800fe92:	4313      	orrs	r3, r2
 800fe94:	b29a      	uxth	r2, r3
 800fe96:	693b      	ldr	r3, [r7, #16]
 800fe98:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800fe9a:	68bb      	ldr	r3, [r7, #8]
 800fe9c:	330c      	adds	r3, #12
 800fe9e:	781b      	ldrb	r3, [r3, #0]
 800fea0:	461a      	mov	r2, r3
 800fea2:	68bb      	ldr	r3, [r7, #8]
 800fea4:	330d      	adds	r3, #13
 800fea6:	781b      	ldrb	r3, [r3, #0]
 800fea8:	021b      	lsls	r3, r3, #8
 800feaa:	b29b      	uxth	r3, r3
 800feac:	4313      	orrs	r3, r2
 800feae:	b29a      	uxth	r2, r3
 800feb0:	693b      	ldr	r3, [r7, #16]
 800feb2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800feb4:	68bb      	ldr	r3, [r7, #8]
 800feb6:	7b9a      	ldrb	r2, [r3, #14]
 800feb8:	693b      	ldr	r3, [r7, #16]
 800feba:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800febc:	68bb      	ldr	r3, [r7, #8]
 800febe:	7bda      	ldrb	r2, [r3, #15]
 800fec0:	693b      	ldr	r3, [r7, #16]
 800fec2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800fec4:	68bb      	ldr	r3, [r7, #8]
 800fec6:	7c1a      	ldrb	r2, [r3, #16]
 800fec8:	693b      	ldr	r3, [r7, #16]
 800feca:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	7c5a      	ldrb	r2, [r3, #17]
 800fed0:	693b      	ldr	r3, [r7, #16]
 800fed2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800fed4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fed6:	4618      	mov	r0, r3
 800fed8:	371c      	adds	r7, #28
 800feda:	46bd      	mov	sp, r7
 800fedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee0:	4770      	bx	lr
 800fee2:	bf00      	nop
 800fee4:	01000101 	.word	0x01000101

0800fee8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b08c      	sub	sp, #48	@ 0x30
 800feec:	af00      	add	r7, sp, #0
 800feee:	60f8      	str	r0, [r7, #12]
 800fef0:	60b9      	str	r1, [r7, #8]
 800fef2:	4613      	mov	r3, r2
 800fef4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800fefc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800fefe:	2300      	movs	r3, #0
 800ff00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ff04:	2300      	movs	r3, #0
 800ff06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800ff10:	68bb      	ldr	r3, [r7, #8]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d101      	bne.n	800ff1a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800ff16:	2302      	movs	r3, #2
 800ff18:	e0de      	b.n	80100d8 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ff1a:	68bb      	ldr	r3, [r7, #8]
 800ff1c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800ff1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff20:	781b      	ldrb	r3, [r3, #0]
 800ff22:	2b09      	cmp	r3, #9
 800ff24:	d002      	beq.n	800ff2c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800ff26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff28:	2209      	movs	r2, #9
 800ff2a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800ff2c:	68bb      	ldr	r3, [r7, #8]
 800ff2e:	781a      	ldrb	r2, [r3, #0]
 800ff30:	6a3b      	ldr	r3, [r7, #32]
 800ff32:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800ff34:	68bb      	ldr	r3, [r7, #8]
 800ff36:	785a      	ldrb	r2, [r3, #1]
 800ff38:	6a3b      	ldr	r3, [r7, #32]
 800ff3a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ff3c:	68bb      	ldr	r3, [r7, #8]
 800ff3e:	3302      	adds	r3, #2
 800ff40:	781b      	ldrb	r3, [r3, #0]
 800ff42:	461a      	mov	r2, r3
 800ff44:	68bb      	ldr	r3, [r7, #8]
 800ff46:	3303      	adds	r3, #3
 800ff48:	781b      	ldrb	r3, [r3, #0]
 800ff4a:	021b      	lsls	r3, r3, #8
 800ff4c:	b29b      	uxth	r3, r3
 800ff4e:	4313      	orrs	r3, r2
 800ff50:	b29b      	uxth	r3, r3
 800ff52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ff56:	bf28      	it	cs
 800ff58:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800ff5c:	b29a      	uxth	r2, r3
 800ff5e:	6a3b      	ldr	r3, [r7, #32]
 800ff60:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	791a      	ldrb	r2, [r3, #4]
 800ff66:	6a3b      	ldr	r3, [r7, #32]
 800ff68:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800ff6a:	68bb      	ldr	r3, [r7, #8]
 800ff6c:	795a      	ldrb	r2, [r3, #5]
 800ff6e:	6a3b      	ldr	r3, [r7, #32]
 800ff70:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	799a      	ldrb	r2, [r3, #6]
 800ff76:	6a3b      	ldr	r3, [r7, #32]
 800ff78:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	79da      	ldrb	r2, [r3, #7]
 800ff7e:	6a3b      	ldr	r3, [r7, #32]
 800ff80:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800ff82:	68bb      	ldr	r3, [r7, #8]
 800ff84:	7a1a      	ldrb	r2, [r3, #8]
 800ff86:	6a3b      	ldr	r3, [r7, #32]
 800ff88:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ff8a:	88fb      	ldrh	r3, [r7, #6]
 800ff8c:	2b09      	cmp	r3, #9
 800ff8e:	f240 80a1 	bls.w	80100d4 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800ff92:	2309      	movs	r3, #9
 800ff94:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ff96:	2300      	movs	r3, #0
 800ff98:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ff9a:	e085      	b.n	80100a8 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ff9c:	f107 0316 	add.w	r3, r7, #22
 800ffa0:	4619      	mov	r1, r3
 800ffa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ffa4:	f000 f9e6 	bl	8010374 <USBH_GetNextDesc>
 800ffa8:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800ffaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffac:	785b      	ldrb	r3, [r3, #1]
 800ffae:	2b04      	cmp	r3, #4
 800ffb0:	d17a      	bne.n	80100a8 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800ffb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffb4:	781b      	ldrb	r3, [r3, #0]
 800ffb6:	2b09      	cmp	r3, #9
 800ffb8:	d002      	beq.n	800ffc0 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800ffba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffbc:	2209      	movs	r2, #9
 800ffbe:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800ffc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ffc4:	221a      	movs	r2, #26
 800ffc6:	fb02 f303 	mul.w	r3, r2, r3
 800ffca:	3308      	adds	r3, #8
 800ffcc:	6a3a      	ldr	r2, [r7, #32]
 800ffce:	4413      	add	r3, r2
 800ffd0:	3302      	adds	r3, #2
 800ffd2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ffd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ffd6:	69f8      	ldr	r0, [r7, #28]
 800ffd8:	f000 f882 	bl	80100e0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ffdc:	2300      	movs	r3, #0
 800ffde:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ffe6:	e043      	b.n	8010070 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ffe8:	f107 0316 	add.w	r3, r7, #22
 800ffec:	4619      	mov	r1, r3
 800ffee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fff0:	f000 f9c0 	bl	8010374 <USBH_GetNextDesc>
 800fff4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800fff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fff8:	785b      	ldrb	r3, [r3, #1]
 800fffa:	2b05      	cmp	r3, #5
 800fffc:	d138      	bne.n	8010070 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800fffe:	69fb      	ldr	r3, [r7, #28]
 8010000:	795b      	ldrb	r3, [r3, #5]
 8010002:	2b01      	cmp	r3, #1
 8010004:	d113      	bne.n	801002e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8010006:	69fb      	ldr	r3, [r7, #28]
 8010008:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 801000a:	2b02      	cmp	r3, #2
 801000c:	d003      	beq.n	8010016 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 801000e:	69fb      	ldr	r3, [r7, #28]
 8010010:	799b      	ldrb	r3, [r3, #6]
 8010012:	2b03      	cmp	r3, #3
 8010014:	d10b      	bne.n	801002e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010016:	69fb      	ldr	r3, [r7, #28]
 8010018:	79db      	ldrb	r3, [r3, #7]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d10b      	bne.n	8010036 <USBH_ParseCfgDesc+0x14e>
 801001e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010020:	781b      	ldrb	r3, [r3, #0]
 8010022:	2b09      	cmp	r3, #9
 8010024:	d007      	beq.n	8010036 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8010026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010028:	2209      	movs	r2, #9
 801002a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801002c:	e003      	b.n	8010036 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 801002e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010030:	2207      	movs	r2, #7
 8010032:	701a      	strb	r2, [r3, #0]
 8010034:	e000      	b.n	8010038 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010036:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8010038:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801003c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010040:	3201      	adds	r2, #1
 8010042:	00d2      	lsls	r2, r2, #3
 8010044:	211a      	movs	r1, #26
 8010046:	fb01 f303 	mul.w	r3, r1, r3
 801004a:	4413      	add	r3, r2
 801004c:	3308      	adds	r3, #8
 801004e:	6a3a      	ldr	r2, [r7, #32]
 8010050:	4413      	add	r3, r2
 8010052:	3304      	adds	r3, #4
 8010054:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8010056:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010058:	69b9      	ldr	r1, [r7, #24]
 801005a:	68f8      	ldr	r0, [r7, #12]
 801005c:	f000 f86f 	bl	801013e <USBH_ParseEPDesc>
 8010060:	4603      	mov	r3, r0
 8010062:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8010066:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801006a:	3301      	adds	r3, #1
 801006c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8010070:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010074:	2b01      	cmp	r3, #1
 8010076:	d80a      	bhi.n	801008e <USBH_ParseCfgDesc+0x1a6>
 8010078:	69fb      	ldr	r3, [r7, #28]
 801007a:	791b      	ldrb	r3, [r3, #4]
 801007c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010080:	429a      	cmp	r2, r3
 8010082:	d204      	bcs.n	801008e <USBH_ParseCfgDesc+0x1a6>
 8010084:	6a3b      	ldr	r3, [r7, #32]
 8010086:	885a      	ldrh	r2, [r3, #2]
 8010088:	8afb      	ldrh	r3, [r7, #22]
 801008a:	429a      	cmp	r2, r3
 801008c:	d8ac      	bhi.n	800ffe8 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 801008e:	69fb      	ldr	r3, [r7, #28]
 8010090:	791b      	ldrb	r3, [r3, #4]
 8010092:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010096:	429a      	cmp	r2, r3
 8010098:	d201      	bcs.n	801009e <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 801009a:	2303      	movs	r3, #3
 801009c:	e01c      	b.n	80100d8 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 801009e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80100a2:	3301      	adds	r3, #1
 80100a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80100a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80100ac:	2b01      	cmp	r3, #1
 80100ae:	d805      	bhi.n	80100bc <USBH_ParseCfgDesc+0x1d4>
 80100b0:	6a3b      	ldr	r3, [r7, #32]
 80100b2:	885a      	ldrh	r2, [r3, #2]
 80100b4:	8afb      	ldrh	r3, [r7, #22]
 80100b6:	429a      	cmp	r2, r3
 80100b8:	f63f af70 	bhi.w	800ff9c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80100bc:	6a3b      	ldr	r3, [r7, #32]
 80100be:	791b      	ldrb	r3, [r3, #4]
 80100c0:	2b02      	cmp	r3, #2
 80100c2:	bf28      	it	cs
 80100c4:	2302      	movcs	r3, #2
 80100c6:	b2db      	uxtb	r3, r3
 80100c8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80100cc:	429a      	cmp	r2, r3
 80100ce:	d201      	bcs.n	80100d4 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 80100d0:	2303      	movs	r3, #3
 80100d2:	e001      	b.n	80100d8 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 80100d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80100d8:	4618      	mov	r0, r3
 80100da:	3730      	adds	r7, #48	@ 0x30
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}

080100e0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80100e0:	b480      	push	{r7}
 80100e2:	b083      	sub	sp, #12
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
 80100e8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	781a      	ldrb	r2, [r3, #0]
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	785a      	ldrb	r2, [r3, #1]
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	789a      	ldrb	r2, [r3, #2]
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8010102:	683b      	ldr	r3, [r7, #0]
 8010104:	78da      	ldrb	r2, [r3, #3]
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	791a      	ldrb	r2, [r3, #4]
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8010112:	683b      	ldr	r3, [r7, #0]
 8010114:	795a      	ldrb	r2, [r3, #5]
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	799a      	ldrb	r2, [r3, #6]
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8010122:	683b      	ldr	r3, [r7, #0]
 8010124:	79da      	ldrb	r2, [r3, #7]
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 801012a:	683b      	ldr	r3, [r7, #0]
 801012c:	7a1a      	ldrb	r2, [r3, #8]
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	721a      	strb	r2, [r3, #8]
}
 8010132:	bf00      	nop
 8010134:	370c      	adds	r7, #12
 8010136:	46bd      	mov	sp, r7
 8010138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013c:	4770      	bx	lr

0801013e <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 801013e:	b480      	push	{r7}
 8010140:	b087      	sub	sp, #28
 8010142:	af00      	add	r7, sp, #0
 8010144:	60f8      	str	r0, [r7, #12]
 8010146:	60b9      	str	r1, [r7, #8]
 8010148:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 801014a:	2300      	movs	r3, #0
 801014c:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	781a      	ldrb	r2, [r3, #0]
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	785a      	ldrb	r2, [r3, #1]
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	789a      	ldrb	r2, [r3, #2]
 8010162:	68bb      	ldr	r3, [r7, #8]
 8010164:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	78da      	ldrb	r2, [r3, #3]
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	3304      	adds	r3, #4
 8010172:	781b      	ldrb	r3, [r3, #0]
 8010174:	461a      	mov	r2, r3
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	3305      	adds	r3, #5
 801017a:	781b      	ldrb	r3, [r3, #0]
 801017c:	021b      	lsls	r3, r3, #8
 801017e:	b29b      	uxth	r3, r3
 8010180:	4313      	orrs	r3, r2
 8010182:	b29a      	uxth	r2, r3
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	799a      	ldrb	r2, [r3, #6]
 801018c:	68bb      	ldr	r3, [r7, #8]
 801018e:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	889b      	ldrh	r3, [r3, #4]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d009      	beq.n	80101ac <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8010198:	68bb      	ldr	r3, [r7, #8]
 801019a:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 801019c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80101a0:	d804      	bhi.n	80101ac <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80101a2:	68bb      	ldr	r3, [r7, #8]
 80101a4:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80101a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80101aa:	d901      	bls.n	80101b0 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80101ac:	2303      	movs	r3, #3
 80101ae:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d136      	bne.n	8010228 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80101ba:	68bb      	ldr	r3, [r7, #8]
 80101bc:	78db      	ldrb	r3, [r3, #3]
 80101be:	f003 0303 	and.w	r3, r3, #3
 80101c2:	2b02      	cmp	r3, #2
 80101c4:	d108      	bne.n	80101d8 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80101c6:	68bb      	ldr	r3, [r7, #8]
 80101c8:	889b      	ldrh	r3, [r3, #4]
 80101ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80101ce:	f240 8097 	bls.w	8010300 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80101d2:	2303      	movs	r3, #3
 80101d4:	75fb      	strb	r3, [r7, #23]
 80101d6:	e093      	b.n	8010300 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	78db      	ldrb	r3, [r3, #3]
 80101dc:	f003 0303 	and.w	r3, r3, #3
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d107      	bne.n	80101f4 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	889b      	ldrh	r3, [r3, #4]
 80101e8:	2b40      	cmp	r3, #64	@ 0x40
 80101ea:	f240 8089 	bls.w	8010300 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80101ee:	2303      	movs	r3, #3
 80101f0:	75fb      	strb	r3, [r7, #23]
 80101f2:	e085      	b.n	8010300 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80101f4:	68bb      	ldr	r3, [r7, #8]
 80101f6:	78db      	ldrb	r3, [r3, #3]
 80101f8:	f003 0303 	and.w	r3, r3, #3
 80101fc:	2b01      	cmp	r3, #1
 80101fe:	d005      	beq.n	801020c <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	78db      	ldrb	r3, [r3, #3]
 8010204:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8010208:	2b03      	cmp	r3, #3
 801020a:	d10a      	bne.n	8010222 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	799b      	ldrb	r3, [r3, #6]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d003      	beq.n	801021c <USBH_ParseEPDesc+0xde>
 8010214:	68bb      	ldr	r3, [r7, #8]
 8010216:	799b      	ldrb	r3, [r3, #6]
 8010218:	2b10      	cmp	r3, #16
 801021a:	d970      	bls.n	80102fe <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 801021c:	2303      	movs	r3, #3
 801021e:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010220:	e06d      	b.n	80102fe <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010222:	2303      	movs	r3, #3
 8010224:	75fb      	strb	r3, [r7, #23]
 8010226:	e06b      	b.n	8010300 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801022e:	2b01      	cmp	r3, #1
 8010230:	d13c      	bne.n	80102ac <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8010232:	68bb      	ldr	r3, [r7, #8]
 8010234:	78db      	ldrb	r3, [r3, #3]
 8010236:	f003 0303 	and.w	r3, r3, #3
 801023a:	2b02      	cmp	r3, #2
 801023c:	d005      	beq.n	801024a <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 801023e:	68bb      	ldr	r3, [r7, #8]
 8010240:	78db      	ldrb	r3, [r3, #3]
 8010242:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8010246:	2b00      	cmp	r3, #0
 8010248:	d106      	bne.n	8010258 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 801024a:	68bb      	ldr	r3, [r7, #8]
 801024c:	889b      	ldrh	r3, [r3, #4]
 801024e:	2b40      	cmp	r3, #64	@ 0x40
 8010250:	d956      	bls.n	8010300 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010252:	2303      	movs	r3, #3
 8010254:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8010256:	e053      	b.n	8010300 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	78db      	ldrb	r3, [r3, #3]
 801025c:	f003 0303 	and.w	r3, r3, #3
 8010260:	2b01      	cmp	r3, #1
 8010262:	d10e      	bne.n	8010282 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	799b      	ldrb	r3, [r3, #6]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d007      	beq.n	801027c <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 801026c:	68bb      	ldr	r3, [r7, #8]
 801026e:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8010270:	2b10      	cmp	r3, #16
 8010272:	d803      	bhi.n	801027c <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8010274:	68bb      	ldr	r3, [r7, #8]
 8010276:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8010278:	2b40      	cmp	r3, #64	@ 0x40
 801027a:	d941      	bls.n	8010300 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801027c:	2303      	movs	r3, #3
 801027e:	75fb      	strb	r3, [r7, #23]
 8010280:	e03e      	b.n	8010300 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	78db      	ldrb	r3, [r3, #3]
 8010286:	f003 0303 	and.w	r3, r3, #3
 801028a:	2b03      	cmp	r3, #3
 801028c:	d10b      	bne.n	80102a6 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	799b      	ldrb	r3, [r3, #6]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d004      	beq.n	80102a0 <USBH_ParseEPDesc+0x162>
 8010296:	68bb      	ldr	r3, [r7, #8]
 8010298:	889b      	ldrh	r3, [r3, #4]
 801029a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801029e:	d32f      	bcc.n	8010300 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80102a0:	2303      	movs	r3, #3
 80102a2:	75fb      	strb	r3, [r7, #23]
 80102a4:	e02c      	b.n	8010300 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80102a6:	2303      	movs	r3, #3
 80102a8:	75fb      	strb	r3, [r7, #23]
 80102aa:	e029      	b.n	8010300 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80102b2:	2b02      	cmp	r3, #2
 80102b4:	d120      	bne.n	80102f8 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	78db      	ldrb	r3, [r3, #3]
 80102ba:	f003 0303 	and.w	r3, r3, #3
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d106      	bne.n	80102d0 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80102c2:	68bb      	ldr	r3, [r7, #8]
 80102c4:	889b      	ldrh	r3, [r3, #4]
 80102c6:	2b08      	cmp	r3, #8
 80102c8:	d01a      	beq.n	8010300 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80102ca:	2303      	movs	r3, #3
 80102cc:	75fb      	strb	r3, [r7, #23]
 80102ce:	e017      	b.n	8010300 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80102d0:	68bb      	ldr	r3, [r7, #8]
 80102d2:	78db      	ldrb	r3, [r3, #3]
 80102d4:	f003 0303 	and.w	r3, r3, #3
 80102d8:	2b03      	cmp	r3, #3
 80102da:	d10a      	bne.n	80102f2 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	799b      	ldrb	r3, [r3, #6]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d003      	beq.n	80102ec <USBH_ParseEPDesc+0x1ae>
 80102e4:	68bb      	ldr	r3, [r7, #8]
 80102e6:	889b      	ldrh	r3, [r3, #4]
 80102e8:	2b08      	cmp	r3, #8
 80102ea:	d909      	bls.n	8010300 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80102ec:	2303      	movs	r3, #3
 80102ee:	75fb      	strb	r3, [r7, #23]
 80102f0:	e006      	b.n	8010300 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80102f2:	2303      	movs	r3, #3
 80102f4:	75fb      	strb	r3, [r7, #23]
 80102f6:	e003      	b.n	8010300 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80102f8:	2303      	movs	r3, #3
 80102fa:	75fb      	strb	r3, [r7, #23]
 80102fc:	e000      	b.n	8010300 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80102fe:	bf00      	nop
  }

  return status;
 8010300:	7dfb      	ldrb	r3, [r7, #23]
}
 8010302:	4618      	mov	r0, r3
 8010304:	371c      	adds	r7, #28
 8010306:	46bd      	mov	sp, r7
 8010308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030c:	4770      	bx	lr

0801030e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 801030e:	b480      	push	{r7}
 8010310:	b087      	sub	sp, #28
 8010312:	af00      	add	r7, sp, #0
 8010314:	60f8      	str	r0, [r7, #12]
 8010316:	60b9      	str	r1, [r7, #8]
 8010318:	4613      	mov	r3, r2
 801031a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	3301      	adds	r3, #1
 8010320:	781b      	ldrb	r3, [r3, #0]
 8010322:	2b03      	cmp	r3, #3
 8010324:	d120      	bne.n	8010368 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	781b      	ldrb	r3, [r3, #0]
 801032a:	1e9a      	subs	r2, r3, #2
 801032c:	88fb      	ldrh	r3, [r7, #6]
 801032e:	4293      	cmp	r3, r2
 8010330:	bf28      	it	cs
 8010332:	4613      	movcs	r3, r2
 8010334:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	3302      	adds	r3, #2
 801033a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 801033c:	2300      	movs	r3, #0
 801033e:	82fb      	strh	r3, [r7, #22]
 8010340:	e00b      	b.n	801035a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8010342:	8afb      	ldrh	r3, [r7, #22]
 8010344:	68fa      	ldr	r2, [r7, #12]
 8010346:	4413      	add	r3, r2
 8010348:	781a      	ldrb	r2, [r3, #0]
 801034a:	68bb      	ldr	r3, [r7, #8]
 801034c:	701a      	strb	r2, [r3, #0]
      pdest++;
 801034e:	68bb      	ldr	r3, [r7, #8]
 8010350:	3301      	adds	r3, #1
 8010352:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8010354:	8afb      	ldrh	r3, [r7, #22]
 8010356:	3302      	adds	r3, #2
 8010358:	82fb      	strh	r3, [r7, #22]
 801035a:	8afa      	ldrh	r2, [r7, #22]
 801035c:	8abb      	ldrh	r3, [r7, #20]
 801035e:	429a      	cmp	r2, r3
 8010360:	d3ef      	bcc.n	8010342 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8010362:	68bb      	ldr	r3, [r7, #8]
 8010364:	2200      	movs	r2, #0
 8010366:	701a      	strb	r2, [r3, #0]
  }
}
 8010368:	bf00      	nop
 801036a:	371c      	adds	r7, #28
 801036c:	46bd      	mov	sp, r7
 801036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010372:	4770      	bx	lr

08010374 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010374:	b480      	push	{r7}
 8010376:	b085      	sub	sp, #20
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
 801037c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 801037e:	683b      	ldr	r3, [r7, #0]
 8010380:	881b      	ldrh	r3, [r3, #0]
 8010382:	687a      	ldr	r2, [r7, #4]
 8010384:	7812      	ldrb	r2, [r2, #0]
 8010386:	4413      	add	r3, r2
 8010388:	b29a      	uxth	r2, r3
 801038a:	683b      	ldr	r3, [r7, #0]
 801038c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	781b      	ldrb	r3, [r3, #0]
 8010392:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	4413      	add	r3, r2
 8010398:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801039a:	68fb      	ldr	r3, [r7, #12]
}
 801039c:	4618      	mov	r0, r3
 801039e:	3714      	adds	r7, #20
 80103a0:	46bd      	mov	sp, r7
 80103a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a6:	4770      	bx	lr

080103a8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b086      	sub	sp, #24
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	60f8      	str	r0, [r7, #12]
 80103b0:	60b9      	str	r1, [r7, #8]
 80103b2:	4613      	mov	r3, r2
 80103b4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80103b6:	2301      	movs	r3, #1
 80103b8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	789b      	ldrb	r3, [r3, #2]
 80103be:	2b01      	cmp	r3, #1
 80103c0:	d002      	beq.n	80103c8 <USBH_CtlReq+0x20>
 80103c2:	2b02      	cmp	r3, #2
 80103c4:	d015      	beq.n	80103f2 <USBH_CtlReq+0x4a>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 80103c6:	e033      	b.n	8010430 <USBH_CtlReq+0x88>
      phost->Control.buff = buff;
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	68ba      	ldr	r2, [r7, #8]
 80103cc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	88fa      	ldrh	r2, [r7, #6]
 80103d2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	2201      	movs	r2, #1
 80103d8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	2202      	movs	r2, #2
 80103de:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80103e0:	2301      	movs	r3, #1
 80103e2:	75fb      	strb	r3, [r7, #23]
      USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80103e4:	2300      	movs	r3, #0
 80103e6:	2200      	movs	r2, #0
 80103e8:	2103      	movs	r1, #3
 80103ea:	68f8      	ldr	r0, [r7, #12]
 80103ec:	f7ff fb32 	bl	800fa54 <USBH_OS_PutMessage>
      break;
 80103f0:	e01e      	b.n	8010430 <USBH_CtlReq+0x88>
      status = USBH_HandleControl(phost);
 80103f2:	68f8      	ldr	r0, [r7, #12]
 80103f4:	f000 f822 	bl	801043c <USBH_HandleControl>
 80103f8:	4603      	mov	r3, r0
 80103fa:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80103fc:	7dfb      	ldrb	r3, [r7, #23]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d002      	beq.n	8010408 <USBH_CtlReq+0x60>
 8010402:	7dfb      	ldrb	r3, [r7, #23]
 8010404:	2b03      	cmp	r3, #3
 8010406:	d106      	bne.n	8010416 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	2201      	movs	r2, #1
 801040c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	2200      	movs	r2, #0
 8010412:	761a      	strb	r2, [r3, #24]
 8010414:	e005      	b.n	8010422 <USBH_CtlReq+0x7a>
      else if (status == USBH_FAIL)
 8010416:	7dfb      	ldrb	r3, [r7, #23]
 8010418:	2b02      	cmp	r3, #2
 801041a:	d102      	bne.n	8010422 <USBH_CtlReq+0x7a>
        phost->RequestState = CMD_SEND;
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	2201      	movs	r2, #1
 8010420:	709a      	strb	r2, [r3, #2]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8010422:	2300      	movs	r3, #0
 8010424:	2200      	movs	r2, #0
 8010426:	2103      	movs	r1, #3
 8010428:	68f8      	ldr	r0, [r7, #12]
 801042a:	f7ff fb13 	bl	800fa54 <USBH_OS_PutMessage>
      break;
 801042e:	bf00      	nop
  }
  return status;
 8010430:	7dfb      	ldrb	r3, [r7, #23]
}
 8010432:	4618      	mov	r0, r3
 8010434:	3718      	adds	r7, #24
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}
	...

0801043c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b086      	sub	sp, #24
 8010440:	af02      	add	r7, sp, #8
 8010442:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8010444:	2301      	movs	r3, #1
 8010446:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010448:	2300      	movs	r3, #0
 801044a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	7e1b      	ldrb	r3, [r3, #24]
 8010450:	3b01      	subs	r3, #1
 8010452:	2b0a      	cmp	r3, #10
 8010454:	f200 81b2 	bhi.w	80107bc <USBH_HandleControl+0x380>
 8010458:	a201      	add	r2, pc, #4	@ (adr r2, 8010460 <USBH_HandleControl+0x24>)
 801045a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801045e:	bf00      	nop
 8010460:	0801048d 	.word	0x0801048d
 8010464:	080104a7 	.word	0x080104a7
 8010468:	08010529 	.word	0x08010529
 801046c:	0801054f 	.word	0x0801054f
 8010470:	080105ad 	.word	0x080105ad
 8010474:	080105d7 	.word	0x080105d7
 8010478:	08010659 	.word	0x08010659
 801047c:	0801067b 	.word	0x0801067b
 8010480:	080106dd 	.word	0x080106dd
 8010484:	08010703 	.word	0x08010703
 8010488:	08010765 	.word	0x08010765
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	f103 0110 	add.w	r1, r3, #16
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	795b      	ldrb	r3, [r3, #5]
 8010496:	461a      	mov	r2, r3
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f000 f99f 	bl	80107dc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	2202      	movs	r2, #2
 80104a2:	761a      	strb	r2, [r3, #24]
      break;
 80104a4:	e195      	b.n	80107d2 <USBH_HandleControl+0x396>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	795b      	ldrb	r3, [r3, #5]
 80104aa:	4619      	mov	r1, r3
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	f003 f909 	bl	80136c4 <USBH_LL_GetURBState>
 80104b2:	4603      	mov	r3, r0
 80104b4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80104b6:	7bbb      	ldrb	r3, [r7, #14]
 80104b8:	2b01      	cmp	r3, #1
 80104ba:	d124      	bne.n	8010506 <USBH_HandleControl+0xca>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	7c1b      	ldrb	r3, [r3, #16]
 80104c0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80104c4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	8adb      	ldrh	r3, [r3, #22]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d00a      	beq.n	80104e4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80104ce:	7b7b      	ldrb	r3, [r7, #13]
 80104d0:	2b80      	cmp	r3, #128	@ 0x80
 80104d2:	d103      	bne.n	80104dc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2203      	movs	r2, #3
 80104d8:	761a      	strb	r2, [r3, #24]
 80104da:	e00d      	b.n	80104f8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	2205      	movs	r2, #5
 80104e0:	761a      	strb	r2, [r3, #24]
 80104e2:	e009      	b.n	80104f8 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80104e4:	7b7b      	ldrb	r3, [r7, #13]
 80104e6:	2b80      	cmp	r3, #128	@ 0x80
 80104e8:	d103      	bne.n	80104f2 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2209      	movs	r2, #9
 80104ee:	761a      	strb	r2, [r3, #24]
 80104f0:	e002      	b.n	80104f8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2207      	movs	r2, #7
 80104f6:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80104f8:	2300      	movs	r3, #0
 80104fa:	2200      	movs	r2, #0
 80104fc:	2103      	movs	r1, #3
 80104fe:	6878      	ldr	r0, [r7, #4]
 8010500:	f7ff faa8 	bl	800fa54 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8010504:	e15c      	b.n	80107c0 <USBH_HandleControl+0x384>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8010506:	7bbb      	ldrb	r3, [r7, #14]
 8010508:	2b04      	cmp	r3, #4
 801050a:	d003      	beq.n	8010514 <USBH_HandleControl+0xd8>
 801050c:	7bbb      	ldrb	r3, [r7, #14]
 801050e:	2b02      	cmp	r3, #2
 8010510:	f040 8156 	bne.w	80107c0 <USBH_HandleControl+0x384>
          phost->Control.state = CTRL_ERROR;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	220b      	movs	r2, #11
 8010518:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801051a:	2300      	movs	r3, #0
 801051c:	2200      	movs	r2, #0
 801051e:	2103      	movs	r1, #3
 8010520:	6878      	ldr	r0, [r7, #4]
 8010522:	f7ff fa97 	bl	800fa54 <USBH_OS_PutMessage>
      break;
 8010526:	e14b      	b.n	80107c0 <USBH_HandleControl+0x384>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801052e:	b29a      	uxth	r2, r3
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	6899      	ldr	r1, [r3, #8]
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	899a      	ldrh	r2, [r3, #12]
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	791b      	ldrb	r3, [r3, #4]
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f000 f98a 	bl	801085a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	2204      	movs	r2, #4
 801054a:	761a      	strb	r2, [r3, #24]
      break;
 801054c:	e141      	b.n	80107d2 <USBH_HandleControl+0x396>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	791b      	ldrb	r3, [r3, #4]
 8010552:	4619      	mov	r1, r3
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	f003 f8b5 	bl	80136c4 <USBH_LL_GetURBState>
 801055a:	4603      	mov	r3, r0
 801055c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 801055e:	7bbb      	ldrb	r3, [r7, #14]
 8010560:	2b01      	cmp	r3, #1
 8010562:	d109      	bne.n	8010578 <USBH_HandleControl+0x13c>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2209      	movs	r2, #9
 8010568:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801056a:	2300      	movs	r3, #0
 801056c:	2200      	movs	r2, #0
 801056e:	2103      	movs	r1, #3
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f7ff fa6f 	bl	800fa54 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8010576:	e125      	b.n	80107c4 <USBH_HandleControl+0x388>
      else if (URB_Status == USBH_URB_STALL)
 8010578:	7bbb      	ldrb	r3, [r7, #14]
 801057a:	2b05      	cmp	r3, #5
 801057c:	d108      	bne.n	8010590 <USBH_HandleControl+0x154>
        status = USBH_NOT_SUPPORTED;
 801057e:	2303      	movs	r3, #3
 8010580:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8010582:	2300      	movs	r3, #0
 8010584:	2200      	movs	r2, #0
 8010586:	2103      	movs	r1, #3
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f7ff fa63 	bl	800fa54 <USBH_OS_PutMessage>
      break;
 801058e:	e119      	b.n	80107c4 <USBH_HandleControl+0x388>
        if (URB_Status == USBH_URB_ERROR)
 8010590:	7bbb      	ldrb	r3, [r7, #14]
 8010592:	2b04      	cmp	r3, #4
 8010594:	f040 8116 	bne.w	80107c4 <USBH_HandleControl+0x388>
          phost->Control.state = CTRL_ERROR;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	220b      	movs	r2, #11
 801059c:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801059e:	2300      	movs	r3, #0
 80105a0:	2200      	movs	r2, #0
 80105a2:	2103      	movs	r1, #3
 80105a4:	6878      	ldr	r0, [r7, #4]
 80105a6:	f7ff fa55 	bl	800fa54 <USBH_OS_PutMessage>
      break;
 80105aa:	e10b      	b.n	80107c4 <USBH_HandleControl+0x388>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6899      	ldr	r1, [r3, #8]
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	899a      	ldrh	r2, [r3, #12]
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	795b      	ldrb	r3, [r3, #5]
 80105b8:	2001      	movs	r0, #1
 80105ba:	9000      	str	r0, [sp, #0]
 80105bc:	6878      	ldr	r0, [r7, #4]
 80105be:	f000 f927 	bl	8010810 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80105c8:	b29a      	uxth	r2, r3
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	2206      	movs	r2, #6
 80105d2:	761a      	strb	r2, [r3, #24]
      break;
 80105d4:	e0fd      	b.n	80107d2 <USBH_HandleControl+0x396>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	795b      	ldrb	r3, [r3, #5]
 80105da:	4619      	mov	r1, r3
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f003 f871 	bl	80136c4 <USBH_LL_GetURBState>
 80105e2:	4603      	mov	r3, r0
 80105e4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80105e6:	7bbb      	ldrb	r3, [r7, #14]
 80105e8:	2b01      	cmp	r3, #1
 80105ea:	d109      	bne.n	8010600 <USBH_HandleControl+0x1c4>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	2207      	movs	r2, #7
 80105f0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80105f2:	2300      	movs	r3, #0
 80105f4:	2200      	movs	r2, #0
 80105f6:	2103      	movs	r1, #3
 80105f8:	6878      	ldr	r0, [r7, #4]
 80105fa:	f7ff fa2b 	bl	800fa54 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80105fe:	e0e3      	b.n	80107c8 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_STALL)
 8010600:	7bbb      	ldrb	r3, [r7, #14]
 8010602:	2b05      	cmp	r3, #5
 8010604:	d10b      	bne.n	801061e <USBH_HandleControl+0x1e2>
        phost->Control.state = CTRL_STALLED;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	220c      	movs	r2, #12
 801060a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 801060c:	2303      	movs	r3, #3
 801060e:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8010610:	2300      	movs	r3, #0
 8010612:	2200      	movs	r2, #0
 8010614:	2103      	movs	r1, #3
 8010616:	6878      	ldr	r0, [r7, #4]
 8010618:	f7ff fa1c 	bl	800fa54 <USBH_OS_PutMessage>
      break;
 801061c:	e0d4      	b.n	80107c8 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_NOTREADY)
 801061e:	7bbb      	ldrb	r3, [r7, #14]
 8010620:	2b02      	cmp	r3, #2
 8010622:	d109      	bne.n	8010638 <USBH_HandleControl+0x1fc>
        phost->Control.state = CTRL_DATA_OUT;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2205      	movs	r2, #5
 8010628:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801062a:	2300      	movs	r3, #0
 801062c:	2200      	movs	r2, #0
 801062e:	2103      	movs	r1, #3
 8010630:	6878      	ldr	r0, [r7, #4]
 8010632:	f7ff fa0f 	bl	800fa54 <USBH_OS_PutMessage>
      break;
 8010636:	e0c7      	b.n	80107c8 <USBH_HandleControl+0x38c>
        if (URB_Status == USBH_URB_ERROR)
 8010638:	7bbb      	ldrb	r3, [r7, #14]
 801063a:	2b04      	cmp	r3, #4
 801063c:	f040 80c4 	bne.w	80107c8 <USBH_HandleControl+0x38c>
          phost->Control.state = CTRL_ERROR;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	220b      	movs	r2, #11
 8010644:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8010646:	2302      	movs	r3, #2
 8010648:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801064a:	2300      	movs	r3, #0
 801064c:	2200      	movs	r2, #0
 801064e:	2103      	movs	r1, #3
 8010650:	6878      	ldr	r0, [r7, #4]
 8010652:	f7ff f9ff 	bl	800fa54 <USBH_OS_PutMessage>
      break;
 8010656:	e0b7      	b.n	80107c8 <USBH_HandleControl+0x38c>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	791b      	ldrb	r3, [r3, #4]
 801065c:	2200      	movs	r2, #0
 801065e:	2100      	movs	r1, #0
 8010660:	6878      	ldr	r0, [r7, #4]
 8010662:	f000 f8fa 	bl	801085a <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801066c:	b29a      	uxth	r2, r3
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	2208      	movs	r2, #8
 8010676:	761a      	strb	r2, [r3, #24]

      break;
 8010678:	e0ab      	b.n	80107d2 <USBH_HandleControl+0x396>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	791b      	ldrb	r3, [r3, #4]
 801067e:	4619      	mov	r1, r3
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f003 f81f 	bl	80136c4 <USBH_LL_GetURBState>
 8010686:	4603      	mov	r3, r0
 8010688:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801068a:	7bbb      	ldrb	r3, [r7, #14]
 801068c:	2b01      	cmp	r3, #1
 801068e:	d10b      	bne.n	80106a8 <USBH_HandleControl+0x26c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	220d      	movs	r2, #13
 8010694:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8010696:	2300      	movs	r3, #0
 8010698:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801069a:	2300      	movs	r3, #0
 801069c:	2200      	movs	r2, #0
 801069e:	2103      	movs	r1, #3
 80106a0:	6878      	ldr	r0, [r7, #4]
 80106a2:	f7ff f9d7 	bl	800fa54 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80106a6:	e091      	b.n	80107cc <USBH_HandleControl+0x390>
      else if (URB_Status == USBH_URB_ERROR)
 80106a8:	7bbb      	ldrb	r3, [r7, #14]
 80106aa:	2b04      	cmp	r3, #4
 80106ac:	d109      	bne.n	80106c2 <USBH_HandleControl+0x286>
        phost->Control.state = CTRL_ERROR;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	220b      	movs	r2, #11
 80106b2:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80106b4:	2300      	movs	r3, #0
 80106b6:	2200      	movs	r2, #0
 80106b8:	2103      	movs	r1, #3
 80106ba:	6878      	ldr	r0, [r7, #4]
 80106bc:	f7ff f9ca 	bl	800fa54 <USBH_OS_PutMessage>
      break;
 80106c0:	e084      	b.n	80107cc <USBH_HandleControl+0x390>
        if (URB_Status == USBH_URB_STALL)
 80106c2:	7bbb      	ldrb	r3, [r7, #14]
 80106c4:	2b05      	cmp	r3, #5
 80106c6:	f040 8081 	bne.w	80107cc <USBH_HandleControl+0x390>
          status = USBH_NOT_SUPPORTED;
 80106ca:	2303      	movs	r3, #3
 80106cc:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80106ce:	2300      	movs	r3, #0
 80106d0:	2200      	movs	r2, #0
 80106d2:	2103      	movs	r1, #3
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f7ff f9bd 	bl	800fa54 <USBH_OS_PutMessage>
      break;
 80106da:	e077      	b.n	80107cc <USBH_HandleControl+0x390>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	795b      	ldrb	r3, [r3, #5]
 80106e0:	2201      	movs	r2, #1
 80106e2:	9200      	str	r2, [sp, #0]
 80106e4:	2200      	movs	r2, #0
 80106e6:	2100      	movs	r1, #0
 80106e8:	6878      	ldr	r0, [r7, #4]
 80106ea:	f000 f891 	bl	8010810 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80106f4:	b29a      	uxth	r2, r3
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	220a      	movs	r2, #10
 80106fe:	761a      	strb	r2, [r3, #24]
      break;
 8010700:	e067      	b.n	80107d2 <USBH_HandleControl+0x396>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	795b      	ldrb	r3, [r3, #5]
 8010706:	4619      	mov	r1, r3
 8010708:	6878      	ldr	r0, [r7, #4]
 801070a:	f002 ffdb 	bl	80136c4 <USBH_LL_GetURBState>
 801070e:	4603      	mov	r3, r0
 8010710:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8010712:	7bbb      	ldrb	r3, [r7, #14]
 8010714:	2b01      	cmp	r3, #1
 8010716:	d10b      	bne.n	8010730 <USBH_HandleControl+0x2f4>
      {
        status = USBH_OK;
 8010718:	2300      	movs	r3, #0
 801071a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	220d      	movs	r2, #13
 8010720:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8010722:	2300      	movs	r3, #0
 8010724:	2200      	movs	r2, #0
 8010726:	2103      	movs	r1, #3
 8010728:	6878      	ldr	r0, [r7, #4]
 801072a:	f7ff f993 	bl	800fa54 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 801072e:	e04f      	b.n	80107d0 <USBH_HandleControl+0x394>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010730:	7bbb      	ldrb	r3, [r7, #14]
 8010732:	2b02      	cmp	r3, #2
 8010734:	d109      	bne.n	801074a <USBH_HandleControl+0x30e>
        phost->Control.state = CTRL_STATUS_OUT;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	2209      	movs	r2, #9
 801073a:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801073c:	2300      	movs	r3, #0
 801073e:	2200      	movs	r2, #0
 8010740:	2103      	movs	r1, #3
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f7ff f986 	bl	800fa54 <USBH_OS_PutMessage>
      break;
 8010748:	e042      	b.n	80107d0 <USBH_HandleControl+0x394>
        if (URB_Status == USBH_URB_ERROR)
 801074a:	7bbb      	ldrb	r3, [r7, #14]
 801074c:	2b04      	cmp	r3, #4
 801074e:	d13f      	bne.n	80107d0 <USBH_HandleControl+0x394>
          phost->Control.state = CTRL_ERROR;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	220b      	movs	r2, #11
 8010754:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8010756:	2300      	movs	r3, #0
 8010758:	2200      	movs	r2, #0
 801075a:	2103      	movs	r1, #3
 801075c:	6878      	ldr	r0, [r7, #4]
 801075e:	f7ff f979 	bl	800fa54 <USBH_OS_PutMessage>
      break;
 8010762:	e035      	b.n	80107d0 <USBH_HandleControl+0x394>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	7e5b      	ldrb	r3, [r3, #25]
 8010768:	3301      	adds	r3, #1
 801076a:	b2da      	uxtb	r2, r3
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	765a      	strb	r2, [r3, #25]
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	7e5b      	ldrb	r3, [r3, #25]
 8010774:	2b02      	cmp	r3, #2
 8010776:	d806      	bhi.n	8010786 <USBH_HandleControl+0x34a>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2201      	movs	r2, #1
 801077c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	2201      	movs	r2, #1
 8010782:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8010784:	e025      	b.n	80107d2 <USBH_HandleControl+0x396>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801078c:	2106      	movs	r1, #6
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	2200      	movs	r2, #0
 8010796:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	795b      	ldrb	r3, [r3, #5]
 801079c:	4619      	mov	r1, r3
 801079e:	6878      	ldr	r0, [r7, #4]
 80107a0:	f000 f90c 	bl	80109bc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	791b      	ldrb	r3, [r3, #4]
 80107a8:	4619      	mov	r1, r3
 80107aa:	6878      	ldr	r0, [r7, #4]
 80107ac:	f000 f906 	bl	80109bc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2200      	movs	r2, #0
 80107b4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80107b6:	2302      	movs	r3, #2
 80107b8:	73fb      	strb	r3, [r7, #15]
      break;
 80107ba:	e00a      	b.n	80107d2 <USBH_HandleControl+0x396>

    default:
      break;
 80107bc:	bf00      	nop
 80107be:	e008      	b.n	80107d2 <USBH_HandleControl+0x396>
      break;
 80107c0:	bf00      	nop
 80107c2:	e006      	b.n	80107d2 <USBH_HandleControl+0x396>
      break;
 80107c4:	bf00      	nop
 80107c6:	e004      	b.n	80107d2 <USBH_HandleControl+0x396>
      break;
 80107c8:	bf00      	nop
 80107ca:	e002      	b.n	80107d2 <USBH_HandleControl+0x396>
      break;
 80107cc:	bf00      	nop
 80107ce:	e000      	b.n	80107d2 <USBH_HandleControl+0x396>
      break;
 80107d0:	bf00      	nop
  }

  return status;
 80107d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	3710      	adds	r7, #16
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}

080107dc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b088      	sub	sp, #32
 80107e0:	af04      	add	r7, sp, #16
 80107e2:	60f8      	str	r0, [r7, #12]
 80107e4:	60b9      	str	r1, [r7, #8]
 80107e6:	4613      	mov	r3, r2
 80107e8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80107ea:	79f9      	ldrb	r1, [r7, #7]
 80107ec:	2300      	movs	r3, #0
 80107ee:	9303      	str	r3, [sp, #12]
 80107f0:	2308      	movs	r3, #8
 80107f2:	9302      	str	r3, [sp, #8]
 80107f4:	68bb      	ldr	r3, [r7, #8]
 80107f6:	9301      	str	r3, [sp, #4]
 80107f8:	2300      	movs	r3, #0
 80107fa:	9300      	str	r3, [sp, #0]
 80107fc:	2300      	movs	r3, #0
 80107fe:	2200      	movs	r2, #0
 8010800:	68f8      	ldr	r0, [r7, #12]
 8010802:	f002 ff2e 	bl	8013662 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8010806:	2300      	movs	r3, #0
}
 8010808:	4618      	mov	r0, r3
 801080a:	3710      	adds	r7, #16
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}

08010810 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b088      	sub	sp, #32
 8010814:	af04      	add	r7, sp, #16
 8010816:	60f8      	str	r0, [r7, #12]
 8010818:	60b9      	str	r1, [r7, #8]
 801081a:	4611      	mov	r1, r2
 801081c:	461a      	mov	r2, r3
 801081e:	460b      	mov	r3, r1
 8010820:	80fb      	strh	r3, [r7, #6]
 8010822:	4613      	mov	r3, r2
 8010824:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801082c:	2b00      	cmp	r3, #0
 801082e:	d001      	beq.n	8010834 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8010830:	2300      	movs	r3, #0
 8010832:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010834:	7979      	ldrb	r1, [r7, #5]
 8010836:	7e3b      	ldrb	r3, [r7, #24]
 8010838:	9303      	str	r3, [sp, #12]
 801083a:	88fb      	ldrh	r3, [r7, #6]
 801083c:	9302      	str	r3, [sp, #8]
 801083e:	68bb      	ldr	r3, [r7, #8]
 8010840:	9301      	str	r3, [sp, #4]
 8010842:	2301      	movs	r3, #1
 8010844:	9300      	str	r3, [sp, #0]
 8010846:	2300      	movs	r3, #0
 8010848:	2200      	movs	r2, #0
 801084a:	68f8      	ldr	r0, [r7, #12]
 801084c:	f002 ff09 	bl	8013662 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8010850:	2300      	movs	r3, #0
}
 8010852:	4618      	mov	r0, r3
 8010854:	3710      	adds	r7, #16
 8010856:	46bd      	mov	sp, r7
 8010858:	bd80      	pop	{r7, pc}

0801085a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801085a:	b580      	push	{r7, lr}
 801085c:	b088      	sub	sp, #32
 801085e:	af04      	add	r7, sp, #16
 8010860:	60f8      	str	r0, [r7, #12]
 8010862:	60b9      	str	r1, [r7, #8]
 8010864:	4611      	mov	r1, r2
 8010866:	461a      	mov	r2, r3
 8010868:	460b      	mov	r3, r1
 801086a:	80fb      	strh	r3, [r7, #6]
 801086c:	4613      	mov	r3, r2
 801086e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010870:	7979      	ldrb	r1, [r7, #5]
 8010872:	2300      	movs	r3, #0
 8010874:	9303      	str	r3, [sp, #12]
 8010876:	88fb      	ldrh	r3, [r7, #6]
 8010878:	9302      	str	r3, [sp, #8]
 801087a:	68bb      	ldr	r3, [r7, #8]
 801087c:	9301      	str	r3, [sp, #4]
 801087e:	2301      	movs	r3, #1
 8010880:	9300      	str	r3, [sp, #0]
 8010882:	2300      	movs	r3, #0
 8010884:	2201      	movs	r2, #1
 8010886:	68f8      	ldr	r0, [r7, #12]
 8010888:	f002 feeb 	bl	8013662 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 801088c:	2300      	movs	r3, #0

}
 801088e:	4618      	mov	r0, r3
 8010890:	3710      	adds	r7, #16
 8010892:	46bd      	mov	sp, r7
 8010894:	bd80      	pop	{r7, pc}

08010896 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8010896:	b580      	push	{r7, lr}
 8010898:	b088      	sub	sp, #32
 801089a:	af04      	add	r7, sp, #16
 801089c:	60f8      	str	r0, [r7, #12]
 801089e:	60b9      	str	r1, [r7, #8]
 80108a0:	4611      	mov	r1, r2
 80108a2:	461a      	mov	r2, r3
 80108a4:	460b      	mov	r3, r1
 80108a6:	80fb      	strh	r3, [r7, #6]
 80108a8:	4613      	mov	r3, r2
 80108aa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d001      	beq.n	80108ba <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80108b6:	2300      	movs	r3, #0
 80108b8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80108ba:	7979      	ldrb	r1, [r7, #5]
 80108bc:	7e3b      	ldrb	r3, [r7, #24]
 80108be:	9303      	str	r3, [sp, #12]
 80108c0:	88fb      	ldrh	r3, [r7, #6]
 80108c2:	9302      	str	r3, [sp, #8]
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	9301      	str	r3, [sp, #4]
 80108c8:	2301      	movs	r3, #1
 80108ca:	9300      	str	r3, [sp, #0]
 80108cc:	2302      	movs	r3, #2
 80108ce:	2200      	movs	r2, #0
 80108d0:	68f8      	ldr	r0, [r7, #12]
 80108d2:	f002 fec6 	bl	8013662 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80108d6:	2300      	movs	r3, #0
}
 80108d8:	4618      	mov	r0, r3
 80108da:	3710      	adds	r7, #16
 80108dc:	46bd      	mov	sp, r7
 80108de:	bd80      	pop	{r7, pc}

080108e0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b088      	sub	sp, #32
 80108e4:	af04      	add	r7, sp, #16
 80108e6:	60f8      	str	r0, [r7, #12]
 80108e8:	60b9      	str	r1, [r7, #8]
 80108ea:	4611      	mov	r1, r2
 80108ec:	461a      	mov	r2, r3
 80108ee:	460b      	mov	r3, r1
 80108f0:	80fb      	strh	r3, [r7, #6]
 80108f2:	4613      	mov	r3, r2
 80108f4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80108f6:	7979      	ldrb	r1, [r7, #5]
 80108f8:	2300      	movs	r3, #0
 80108fa:	9303      	str	r3, [sp, #12]
 80108fc:	88fb      	ldrh	r3, [r7, #6]
 80108fe:	9302      	str	r3, [sp, #8]
 8010900:	68bb      	ldr	r3, [r7, #8]
 8010902:	9301      	str	r3, [sp, #4]
 8010904:	2301      	movs	r3, #1
 8010906:	9300      	str	r3, [sp, #0]
 8010908:	2302      	movs	r3, #2
 801090a:	2201      	movs	r2, #1
 801090c:	68f8      	ldr	r0, [r7, #12]
 801090e:	f002 fea8 	bl	8013662 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8010912:	2300      	movs	r3, #0
}
 8010914:	4618      	mov	r0, r3
 8010916:	3710      	adds	r7, #16
 8010918:	46bd      	mov	sp, r7
 801091a:	bd80      	pop	{r7, pc}

0801091c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b086      	sub	sp, #24
 8010920:	af04      	add	r7, sp, #16
 8010922:	6078      	str	r0, [r7, #4]
 8010924:	4608      	mov	r0, r1
 8010926:	4611      	mov	r1, r2
 8010928:	461a      	mov	r2, r3
 801092a:	4603      	mov	r3, r0
 801092c:	70fb      	strb	r3, [r7, #3]
 801092e:	460b      	mov	r3, r1
 8010930:	70bb      	strb	r3, [r7, #2]
 8010932:	4613      	mov	r3, r2
 8010934:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8010936:	7878      	ldrb	r0, [r7, #1]
 8010938:	78ba      	ldrb	r2, [r7, #2]
 801093a:	78f9      	ldrb	r1, [r7, #3]
 801093c:	8b3b      	ldrh	r3, [r7, #24]
 801093e:	9302      	str	r3, [sp, #8]
 8010940:	7d3b      	ldrb	r3, [r7, #20]
 8010942:	9301      	str	r3, [sp, #4]
 8010944:	7c3b      	ldrb	r3, [r7, #16]
 8010946:	9300      	str	r3, [sp, #0]
 8010948:	4603      	mov	r3, r0
 801094a:	6878      	ldr	r0, [r7, #4]
 801094c:	f002 fe3b 	bl	80135c6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8010950:	2300      	movs	r3, #0
}
 8010952:	4618      	mov	r0, r3
 8010954:	3708      	adds	r7, #8
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}

0801095a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801095a:	b580      	push	{r7, lr}
 801095c:	b082      	sub	sp, #8
 801095e:	af00      	add	r7, sp, #0
 8010960:	6078      	str	r0, [r7, #4]
 8010962:	460b      	mov	r3, r1
 8010964:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8010966:	78fb      	ldrb	r3, [r7, #3]
 8010968:	4619      	mov	r1, r3
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	f002 fe5a 	bl	8013624 <USBH_LL_ClosePipe>

  return USBH_OK;
 8010970:	2300      	movs	r3, #0
}
 8010972:	4618      	mov	r0, r3
 8010974:	3708      	adds	r7, #8
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}

0801097a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801097a:	b580      	push	{r7, lr}
 801097c:	b084      	sub	sp, #16
 801097e:	af00      	add	r7, sp, #0
 8010980:	6078      	str	r0, [r7, #4]
 8010982:	460b      	mov	r3, r1
 8010984:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8010986:	6878      	ldr	r0, [r7, #4]
 8010988:	f000 f836 	bl	80109f8 <USBH_GetFreePipe>
 801098c:	4603      	mov	r3, r0
 801098e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8010990:	89fb      	ldrh	r3, [r7, #14]
 8010992:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010996:	4293      	cmp	r3, r2
 8010998:	d00a      	beq.n	80109b0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 801099a:	78fa      	ldrb	r2, [r7, #3]
 801099c:	89fb      	ldrh	r3, [r7, #14]
 801099e:	f003 030f 	and.w	r3, r3, #15
 80109a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80109a6:	6879      	ldr	r1, [r7, #4]
 80109a8:	33e0      	adds	r3, #224	@ 0xe0
 80109aa:	009b      	lsls	r3, r3, #2
 80109ac:	440b      	add	r3, r1
 80109ae:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80109b0:	89fb      	ldrh	r3, [r7, #14]
 80109b2:	b2db      	uxtb	r3, r3
}
 80109b4:	4618      	mov	r0, r3
 80109b6:	3710      	adds	r7, #16
 80109b8:	46bd      	mov	sp, r7
 80109ba:	bd80      	pop	{r7, pc}

080109bc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80109bc:	b480      	push	{r7}
 80109be:	b083      	sub	sp, #12
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
 80109c4:	460b      	mov	r3, r1
 80109c6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80109c8:	78fb      	ldrb	r3, [r7, #3]
 80109ca:	2b0f      	cmp	r3, #15
 80109cc:	d80d      	bhi.n	80109ea <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80109ce:	78fb      	ldrb	r3, [r7, #3]
 80109d0:	687a      	ldr	r2, [r7, #4]
 80109d2:	33e0      	adds	r3, #224	@ 0xe0
 80109d4:	009b      	lsls	r3, r3, #2
 80109d6:	4413      	add	r3, r2
 80109d8:	685a      	ldr	r2, [r3, #4]
 80109da:	78fb      	ldrb	r3, [r7, #3]
 80109dc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80109e0:	6879      	ldr	r1, [r7, #4]
 80109e2:	33e0      	adds	r3, #224	@ 0xe0
 80109e4:	009b      	lsls	r3, r3, #2
 80109e6:	440b      	add	r3, r1
 80109e8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80109ea:	2300      	movs	r3, #0
}
 80109ec:	4618      	mov	r0, r3
 80109ee:	370c      	adds	r7, #12
 80109f0:	46bd      	mov	sp, r7
 80109f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f6:	4770      	bx	lr

080109f8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80109f8:	b480      	push	{r7}
 80109fa:	b085      	sub	sp, #20
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8010a00:	2300      	movs	r3, #0
 8010a02:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8010a04:	2300      	movs	r3, #0
 8010a06:	73fb      	strb	r3, [r7, #15]
 8010a08:	e00f      	b.n	8010a2a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8010a0a:	7bfb      	ldrb	r3, [r7, #15]
 8010a0c:	687a      	ldr	r2, [r7, #4]
 8010a0e:	33e0      	adds	r3, #224	@ 0xe0
 8010a10:	009b      	lsls	r3, r3, #2
 8010a12:	4413      	add	r3, r2
 8010a14:	685b      	ldr	r3, [r3, #4]
 8010a16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d102      	bne.n	8010a24 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8010a1e:	7bfb      	ldrb	r3, [r7, #15]
 8010a20:	b29b      	uxth	r3, r3
 8010a22:	e007      	b.n	8010a34 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8010a24:	7bfb      	ldrb	r3, [r7, #15]
 8010a26:	3301      	adds	r3, #1
 8010a28:	73fb      	strb	r3, [r7, #15]
 8010a2a:	7bfb      	ldrb	r3, [r7, #15]
 8010a2c:	2b0f      	cmp	r3, #15
 8010a2e:	d9ec      	bls.n	8010a0a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8010a30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8010a34:	4618      	mov	r0, r3
 8010a36:	3714      	adds	r7, #20
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3e:	4770      	bx	lr

08010a40 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010a40:	b480      	push	{r7}
 8010a42:	b087      	sub	sp, #28
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	60f8      	str	r0, [r7, #12]
 8010a48:	60b9      	str	r1, [r7, #8]
 8010a4a:	4613      	mov	r3, r2
 8010a4c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010a4e:	2301      	movs	r3, #1
 8010a50:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010a52:	2300      	movs	r3, #0
 8010a54:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010a56:	4b1f      	ldr	r3, [pc, #124]	@ (8010ad4 <FATFS_LinkDriverEx+0x94>)
 8010a58:	7a5b      	ldrb	r3, [r3, #9]
 8010a5a:	b2db      	uxtb	r3, r3
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d131      	bne.n	8010ac4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010a60:	4b1c      	ldr	r3, [pc, #112]	@ (8010ad4 <FATFS_LinkDriverEx+0x94>)
 8010a62:	7a5b      	ldrb	r3, [r3, #9]
 8010a64:	b2db      	uxtb	r3, r3
 8010a66:	461a      	mov	r2, r3
 8010a68:	4b1a      	ldr	r3, [pc, #104]	@ (8010ad4 <FATFS_LinkDriverEx+0x94>)
 8010a6a:	2100      	movs	r1, #0
 8010a6c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010a6e:	4b19      	ldr	r3, [pc, #100]	@ (8010ad4 <FATFS_LinkDriverEx+0x94>)
 8010a70:	7a5b      	ldrb	r3, [r3, #9]
 8010a72:	b2db      	uxtb	r3, r3
 8010a74:	4a17      	ldr	r2, [pc, #92]	@ (8010ad4 <FATFS_LinkDriverEx+0x94>)
 8010a76:	009b      	lsls	r3, r3, #2
 8010a78:	4413      	add	r3, r2
 8010a7a:	68fa      	ldr	r2, [r7, #12]
 8010a7c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010a7e:	4b15      	ldr	r3, [pc, #84]	@ (8010ad4 <FATFS_LinkDriverEx+0x94>)
 8010a80:	7a5b      	ldrb	r3, [r3, #9]
 8010a82:	b2db      	uxtb	r3, r3
 8010a84:	461a      	mov	r2, r3
 8010a86:	4b13      	ldr	r3, [pc, #76]	@ (8010ad4 <FATFS_LinkDriverEx+0x94>)
 8010a88:	4413      	add	r3, r2
 8010a8a:	79fa      	ldrb	r2, [r7, #7]
 8010a8c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010a8e:	4b11      	ldr	r3, [pc, #68]	@ (8010ad4 <FATFS_LinkDriverEx+0x94>)
 8010a90:	7a5b      	ldrb	r3, [r3, #9]
 8010a92:	b2db      	uxtb	r3, r3
 8010a94:	1c5a      	adds	r2, r3, #1
 8010a96:	b2d1      	uxtb	r1, r2
 8010a98:	4a0e      	ldr	r2, [pc, #56]	@ (8010ad4 <FATFS_LinkDriverEx+0x94>)
 8010a9a:	7251      	strb	r1, [r2, #9]
 8010a9c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010a9e:	7dbb      	ldrb	r3, [r7, #22]
 8010aa0:	3330      	adds	r3, #48	@ 0x30
 8010aa2:	b2da      	uxtb	r2, r3
 8010aa4:	68bb      	ldr	r3, [r7, #8]
 8010aa6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010aa8:	68bb      	ldr	r3, [r7, #8]
 8010aaa:	3301      	adds	r3, #1
 8010aac:	223a      	movs	r2, #58	@ 0x3a
 8010aae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	3302      	adds	r3, #2
 8010ab4:	222f      	movs	r2, #47	@ 0x2f
 8010ab6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010ab8:	68bb      	ldr	r3, [r7, #8]
 8010aba:	3303      	adds	r3, #3
 8010abc:	2200      	movs	r2, #0
 8010abe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	371c      	adds	r7, #28
 8010aca:	46bd      	mov	sp, r7
 8010acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad0:	4770      	bx	lr
 8010ad2:	bf00      	nop
 8010ad4:	20000d90 	.word	0x20000d90

08010ad8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b082      	sub	sp, #8
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
 8010ae0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	6839      	ldr	r1, [r7, #0]
 8010ae6:	6878      	ldr	r0, [r7, #4]
 8010ae8:	f7ff ffaa 	bl	8010a40 <FATFS_LinkDriverEx>
 8010aec:	4603      	mov	r3, r0
}
 8010aee:	4618      	mov	r0, r3
 8010af0:	3708      	adds	r7, #8
 8010af2:	46bd      	mov	sp, r7
 8010af4:	bd80      	pop	{r7, pc}

08010af6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010af6:	b480      	push	{r7}
 8010af8:	b085      	sub	sp, #20
 8010afa:	af00      	add	r7, sp, #0
 8010afc:	4603      	mov	r3, r0
 8010afe:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010b00:	2300      	movs	r3, #0
 8010b02:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010b04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010b08:	2b84      	cmp	r3, #132	@ 0x84
 8010b0a:	d005      	beq.n	8010b18 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010b0c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	4413      	add	r3, r2
 8010b14:	3303      	adds	r3, #3
 8010b16:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8010b18:	68fb      	ldr	r3, [r7, #12]
}
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	3714      	adds	r7, #20
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b24:	4770      	bx	lr

08010b26 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8010b26:	b480      	push	{r7}
 8010b28:	b083      	sub	sp, #12
 8010b2a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010b2c:	f3ef 8305 	mrs	r3, IPSR
 8010b30:	607b      	str	r3, [r7, #4]
  return(result);
 8010b32:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	bf14      	ite	ne
 8010b38:	2301      	movne	r3, #1
 8010b3a:	2300      	moveq	r3, #0
 8010b3c:	b2db      	uxtb	r3, r3
}
 8010b3e:	4618      	mov	r0, r3
 8010b40:	370c      	adds	r7, #12
 8010b42:	46bd      	mov	sp, r7
 8010b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b48:	4770      	bx	lr

08010b4a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010b4a:	b580      	push	{r7, lr}
 8010b4c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8010b4e:	f001 f9cd 	bl	8011eec <vTaskStartScheduler>
  
  return osOK;
 8010b52:	2300      	movs	r3, #0
}
 8010b54:	4618      	mov	r0, r3
 8010b56:	bd80      	pop	{r7, pc}

08010b58 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8010b5c:	f001 fe2e 	bl	80127bc <xTaskGetSchedulerState>
 8010b60:	4603      	mov	r3, r0
 8010b62:	2b01      	cmp	r3, #1
 8010b64:	d101      	bne.n	8010b6a <osKernelRunning+0x12>
    return 0;
 8010b66:	2300      	movs	r3, #0
 8010b68:	e000      	b.n	8010b6c <osKernelRunning+0x14>
  else
    return 1;
 8010b6a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	bd80      	pop	{r7, pc}

08010b70 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8010b74:	f7ff ffd7 	bl	8010b26 <inHandlerMode>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d003      	beq.n	8010b86 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8010b7e:	f001 fad9 	bl	8012134 <xTaskGetTickCountFromISR>
 8010b82:	4603      	mov	r3, r0
 8010b84:	e002      	b.n	8010b8c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8010b86:	f001 fac5 	bl	8012114 <xTaskGetTickCount>
 8010b8a:	4603      	mov	r3, r0
  }
}
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	bd80      	pop	{r7, pc}

08010b90 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b92:	b089      	sub	sp, #36	@ 0x24
 8010b94:	af04      	add	r7, sp, #16
 8010b96:	6078      	str	r0, [r7, #4]
 8010b98:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	695b      	ldr	r3, [r3, #20]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d020      	beq.n	8010be4 <osThreadCreate+0x54>
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	699b      	ldr	r3, [r3, #24]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d01c      	beq.n	8010be4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	685c      	ldr	r4, [r3, #4]
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	691e      	ldr	r6, [r3, #16]
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	f7ff ff9a 	bl	8010af6 <makeFreeRtosPriority>
 8010bc2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	695b      	ldr	r3, [r3, #20]
 8010bc8:	687a      	ldr	r2, [r7, #4]
 8010bca:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010bcc:	9202      	str	r2, [sp, #8]
 8010bce:	9301      	str	r3, [sp, #4]
 8010bd0:	9100      	str	r1, [sp, #0]
 8010bd2:	683b      	ldr	r3, [r7, #0]
 8010bd4:	4632      	mov	r2, r6
 8010bd6:	4629      	mov	r1, r5
 8010bd8:	4620      	mov	r0, r4
 8010bda:	f000 ffa5 	bl	8011b28 <xTaskCreateStatic>
 8010bde:	4603      	mov	r3, r0
 8010be0:	60fb      	str	r3, [r7, #12]
 8010be2:	e01c      	b.n	8010c1e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	685c      	ldr	r4, [r3, #4]
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010bf0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f7ff ff7c 	bl	8010af6 <makeFreeRtosPriority>
 8010bfe:	4602      	mov	r2, r0
 8010c00:	f107 030c 	add.w	r3, r7, #12
 8010c04:	9301      	str	r3, [sp, #4]
 8010c06:	9200      	str	r2, [sp, #0]
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	4632      	mov	r2, r6
 8010c0c:	4629      	mov	r1, r5
 8010c0e:	4620      	mov	r0, r4
 8010c10:	f000 fff0 	bl	8011bf4 <xTaskCreate>
 8010c14:	4603      	mov	r3, r0
 8010c16:	2b01      	cmp	r3, #1
 8010c18:	d001      	beq.n	8010c1e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	e000      	b.n	8010c20 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8010c1e:	68fb      	ldr	r3, [r7, #12]
}
 8010c20:	4618      	mov	r0, r3
 8010c22:	3714      	adds	r7, #20
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010c28 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b084      	sub	sp, #16
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d001      	beq.n	8010c3e <osDelay+0x16>
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	e000      	b.n	8010c40 <osDelay+0x18>
 8010c3e:	2301      	movs	r3, #1
 8010c40:	4618      	mov	r0, r3
 8010c42:	f001 f91b 	bl	8011e7c <vTaskDelay>
  
  return osOK;
 8010c46:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010c48:	4618      	mov	r0, r3
 8010c4a:	3710      	adds	r7, #16
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}

08010c50 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8010c50:	b590      	push	{r4, r7, lr}
 8010c52:	b085      	sub	sp, #20
 8010c54:	af02      	add	r7, sp, #8
 8010c56:	6078      	str	r0, [r7, #4]
 8010c58:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	689b      	ldr	r3, [r3, #8]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d011      	beq.n	8010c86 <osMessageCreate+0x36>
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	68db      	ldr	r3, [r3, #12]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d00d      	beq.n	8010c86 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	6818      	ldr	r0, [r3, #0]
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	6859      	ldr	r1, [r3, #4]
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	689a      	ldr	r2, [r3, #8]
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	68db      	ldr	r3, [r3, #12]
 8010c7a:	2400      	movs	r4, #0
 8010c7c:	9400      	str	r4, [sp, #0]
 8010c7e:	f000 f9f9 	bl	8011074 <xQueueGenericCreateStatic>
 8010c82:	4603      	mov	r3, r0
 8010c84:	e008      	b.n	8010c98 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	6818      	ldr	r0, [r3, #0]
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	685b      	ldr	r3, [r3, #4]
 8010c8e:	2200      	movs	r2, #0
 8010c90:	4619      	mov	r1, r3
 8010c92:	f000 fa76 	bl	8011182 <xQueueGenericCreate>
 8010c96:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	370c      	adds	r7, #12
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd90      	pop	{r4, r7, pc}

08010ca0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b086      	sub	sp, #24
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	60f8      	str	r0, [r7, #12]
 8010ca8:	60b9      	str	r1, [r7, #8]
 8010caa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8010cac:	2300      	movs	r3, #0
 8010cae:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d101      	bne.n	8010cbe <osMessagePut+0x1e>
    ticks = 1;
 8010cba:	2301      	movs	r3, #1
 8010cbc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8010cbe:	f7ff ff32 	bl	8010b26 <inHandlerMode>
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d018      	beq.n	8010cfa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8010cc8:	f107 0210 	add.w	r2, r7, #16
 8010ccc:	f107 0108 	add.w	r1, r7, #8
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	68f8      	ldr	r0, [r7, #12]
 8010cd4:	f000 fbc2 	bl	801145c <xQueueGenericSendFromISR>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	2b01      	cmp	r3, #1
 8010cdc:	d001      	beq.n	8010ce2 <osMessagePut+0x42>
      return osErrorOS;
 8010cde:	23ff      	movs	r3, #255	@ 0xff
 8010ce0:	e018      	b.n	8010d14 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010ce2:	693b      	ldr	r3, [r7, #16]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d014      	beq.n	8010d12 <osMessagePut+0x72>
 8010ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8010d1c <osMessagePut+0x7c>)
 8010cea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010cee:	601a      	str	r2, [r3, #0]
 8010cf0:	f3bf 8f4f 	dsb	sy
 8010cf4:	f3bf 8f6f 	isb	sy
 8010cf8:	e00b      	b.n	8010d12 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8010cfa:	f107 0108 	add.w	r1, r7, #8
 8010cfe:	2300      	movs	r3, #0
 8010d00:	697a      	ldr	r2, [r7, #20]
 8010d02:	68f8      	ldr	r0, [r7, #12]
 8010d04:	f000 faa0 	bl	8011248 <xQueueGenericSend>
 8010d08:	4603      	mov	r3, r0
 8010d0a:	2b01      	cmp	r3, #1
 8010d0c:	d001      	beq.n	8010d12 <osMessagePut+0x72>
      return osErrorOS;
 8010d0e:	23ff      	movs	r3, #255	@ 0xff
 8010d10:	e000      	b.n	8010d14 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8010d12:	2300      	movs	r3, #0
}
 8010d14:	4618      	mov	r0, r3
 8010d16:	3718      	adds	r7, #24
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd80      	pop	{r7, pc}
 8010d1c:	e000ed04 	.word	0xe000ed04

08010d20 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8010d20:	b590      	push	{r4, r7, lr}
 8010d22:	b08b      	sub	sp, #44	@ 0x2c
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	60f8      	str	r0, [r7, #12]
 8010d28:	60b9      	str	r1, [r7, #8]
 8010d2a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8010d2c:	68bb      	ldr	r3, [r7, #8]
 8010d2e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8010d30:	2300      	movs	r3, #0
 8010d32:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8010d34:	68bb      	ldr	r3, [r7, #8]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d10a      	bne.n	8010d50 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8010d3a:	2380      	movs	r3, #128	@ 0x80
 8010d3c:	617b      	str	r3, [r7, #20]
    return event;
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	461c      	mov	r4, r3
 8010d42:	f107 0314 	add.w	r3, r7, #20
 8010d46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010d4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010d4e:	e054      	b.n	8010dfa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8010d50:	2300      	movs	r3, #0
 8010d52:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8010d54:	2300      	movs	r3, #0
 8010d56:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d5e:	d103      	bne.n	8010d68 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8010d60:	f04f 33ff 	mov.w	r3, #4294967295
 8010d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8010d66:	e009      	b.n	8010d7c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d006      	beq.n	8010d7c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8010d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d101      	bne.n	8010d7c <osMessageGet+0x5c>
      ticks = 1;
 8010d78:	2301      	movs	r3, #1
 8010d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8010d7c:	f7ff fed3 	bl	8010b26 <inHandlerMode>
 8010d80:	4603      	mov	r3, r0
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d01c      	beq.n	8010dc0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8010d86:	f107 0220 	add.w	r2, r7, #32
 8010d8a:	f107 0314 	add.w	r3, r7, #20
 8010d8e:	3304      	adds	r3, #4
 8010d90:	4619      	mov	r1, r3
 8010d92:	68b8      	ldr	r0, [r7, #8]
 8010d94:	f000 fcee 	bl	8011774 <xQueueReceiveFromISR>
 8010d98:	4603      	mov	r3, r0
 8010d9a:	2b01      	cmp	r3, #1
 8010d9c:	d102      	bne.n	8010da4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8010d9e:	2310      	movs	r3, #16
 8010da0:	617b      	str	r3, [r7, #20]
 8010da2:	e001      	b.n	8010da8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8010da4:	2300      	movs	r3, #0
 8010da6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010da8:	6a3b      	ldr	r3, [r7, #32]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d01d      	beq.n	8010dea <osMessageGet+0xca>
 8010dae:	4b15      	ldr	r3, [pc, #84]	@ (8010e04 <osMessageGet+0xe4>)
 8010db0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010db4:	601a      	str	r2, [r3, #0]
 8010db6:	f3bf 8f4f 	dsb	sy
 8010dba:	f3bf 8f6f 	isb	sy
 8010dbe:	e014      	b.n	8010dea <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8010dc0:	f107 0314 	add.w	r3, r7, #20
 8010dc4:	3304      	adds	r3, #4
 8010dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010dc8:	4619      	mov	r1, r3
 8010dca:	68b8      	ldr	r0, [r7, #8]
 8010dcc:	f000 fbea 	bl	80115a4 <xQueueReceive>
 8010dd0:	4603      	mov	r3, r0
 8010dd2:	2b01      	cmp	r3, #1
 8010dd4:	d102      	bne.n	8010ddc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8010dd6:	2310      	movs	r3, #16
 8010dd8:	617b      	str	r3, [r7, #20]
 8010dda:	e006      	b.n	8010dea <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8010ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d101      	bne.n	8010de6 <osMessageGet+0xc6>
 8010de2:	2300      	movs	r3, #0
 8010de4:	e000      	b.n	8010de8 <osMessageGet+0xc8>
 8010de6:	2340      	movs	r3, #64	@ 0x40
 8010de8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	461c      	mov	r4, r3
 8010dee:	f107 0314 	add.w	r3, r7, #20
 8010df2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010df6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8010dfa:	68f8      	ldr	r0, [r7, #12]
 8010dfc:	372c      	adds	r7, #44	@ 0x2c
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	bd90      	pop	{r4, r7, pc}
 8010e02:	bf00      	nop
 8010e04:	e000ed04 	.word	0xe000ed04

08010e08 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b082      	sub	sp, #8
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8010e10:	f7ff fe89 	bl	8010b26 <inHandlerMode>
 8010e14:	4603      	mov	r3, r0
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d004      	beq.n	8010e24 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8010e1a:	6878      	ldr	r0, [r7, #4]
 8010e1c:	f000 fd53 	bl	80118c6 <uxQueueMessagesWaitingFromISR>
 8010e20:	4603      	mov	r3, r0
 8010e22:	e003      	b.n	8010e2c <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8010e24:	6878      	ldr	r0, [r7, #4]
 8010e26:	f000 fd2d 	bl	8011884 <uxQueueMessagesWaiting>
 8010e2a:	4603      	mov	r3, r0
  }
}
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	3708      	adds	r7, #8
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}

08010e34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010e34:	b480      	push	{r7}
 8010e36:	b083      	sub	sp, #12
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f103 0208 	add.w	r2, r3, #8
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	f04f 32ff 	mov.w	r2, #4294967295
 8010e4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f103 0208 	add.w	r2, r3, #8
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	f103 0208 	add.w	r2, r3, #8
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	2200      	movs	r2, #0
 8010e66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010e68:	bf00      	nop
 8010e6a:	370c      	adds	r7, #12
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e72:	4770      	bx	lr

08010e74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010e74:	b480      	push	{r7}
 8010e76:	b083      	sub	sp, #12
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	2200      	movs	r2, #0
 8010e80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010e82:	bf00      	nop
 8010e84:	370c      	adds	r7, #12
 8010e86:	46bd      	mov	sp, r7
 8010e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8c:	4770      	bx	lr

08010e8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010e8e:	b480      	push	{r7}
 8010e90:	b085      	sub	sp, #20
 8010e92:	af00      	add	r7, sp, #0
 8010e94:	6078      	str	r0, [r7, #4]
 8010e96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	685b      	ldr	r3, [r3, #4]
 8010e9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	68fa      	ldr	r2, [r7, #12]
 8010ea2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	689a      	ldr	r2, [r3, #8]
 8010ea8:	683b      	ldr	r3, [r7, #0]
 8010eaa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	689b      	ldr	r3, [r3, #8]
 8010eb0:	683a      	ldr	r2, [r7, #0]
 8010eb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	683a      	ldr	r2, [r7, #0]
 8010eb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010eba:	683b      	ldr	r3, [r7, #0]
 8010ebc:	687a      	ldr	r2, [r7, #4]
 8010ebe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	1c5a      	adds	r2, r3, #1
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	601a      	str	r2, [r3, #0]
}
 8010eca:	bf00      	nop
 8010ecc:	3714      	adds	r7, #20
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed4:	4770      	bx	lr

08010ed6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010ed6:	b480      	push	{r7}
 8010ed8:	b085      	sub	sp, #20
 8010eda:	af00      	add	r7, sp, #0
 8010edc:	6078      	str	r0, [r7, #4]
 8010ede:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010ee0:	683b      	ldr	r3, [r7, #0]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010ee6:	68bb      	ldr	r3, [r7, #8]
 8010ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eec:	d103      	bne.n	8010ef6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	691b      	ldr	r3, [r3, #16]
 8010ef2:	60fb      	str	r3, [r7, #12]
 8010ef4:	e00c      	b.n	8010f10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	3308      	adds	r3, #8
 8010efa:	60fb      	str	r3, [r7, #12]
 8010efc:	e002      	b.n	8010f04 <vListInsert+0x2e>
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	685b      	ldr	r3, [r3, #4]
 8010f02:	60fb      	str	r3, [r7, #12]
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	685b      	ldr	r3, [r3, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	68ba      	ldr	r2, [r7, #8]
 8010f0c:	429a      	cmp	r2, r3
 8010f0e:	d2f6      	bcs.n	8010efe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	685a      	ldr	r2, [r3, #4]
 8010f14:	683b      	ldr	r3, [r7, #0]
 8010f16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010f18:	683b      	ldr	r3, [r7, #0]
 8010f1a:	685b      	ldr	r3, [r3, #4]
 8010f1c:	683a      	ldr	r2, [r7, #0]
 8010f1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010f20:	683b      	ldr	r3, [r7, #0]
 8010f22:	68fa      	ldr	r2, [r7, #12]
 8010f24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	683a      	ldr	r2, [r7, #0]
 8010f2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010f2c:	683b      	ldr	r3, [r7, #0]
 8010f2e:	687a      	ldr	r2, [r7, #4]
 8010f30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	1c5a      	adds	r2, r3, #1
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	601a      	str	r2, [r3, #0]
}
 8010f3c:	bf00      	nop
 8010f3e:	3714      	adds	r7, #20
 8010f40:	46bd      	mov	sp, r7
 8010f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f46:	4770      	bx	lr

08010f48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010f48:	b480      	push	{r7}
 8010f4a:	b085      	sub	sp, #20
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	691b      	ldr	r3, [r3, #16]
 8010f54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	685b      	ldr	r3, [r3, #4]
 8010f5a:	687a      	ldr	r2, [r7, #4]
 8010f5c:	6892      	ldr	r2, [r2, #8]
 8010f5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	689b      	ldr	r3, [r3, #8]
 8010f64:	687a      	ldr	r2, [r7, #4]
 8010f66:	6852      	ldr	r2, [r2, #4]
 8010f68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	685b      	ldr	r3, [r3, #4]
 8010f6e:	687a      	ldr	r2, [r7, #4]
 8010f70:	429a      	cmp	r2, r3
 8010f72:	d103      	bne.n	8010f7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	689a      	ldr	r2, [r3, #8]
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	2200      	movs	r2, #0
 8010f80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	1e5a      	subs	r2, r3, #1
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	681b      	ldr	r3, [r3, #0]
}
 8010f90:	4618      	mov	r0, r3
 8010f92:	3714      	adds	r7, #20
 8010f94:	46bd      	mov	sp, r7
 8010f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9a:	4770      	bx	lr

08010f9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b084      	sub	sp, #16
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
 8010fa4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d10d      	bne.n	8010fcc <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fb4:	b672      	cpsid	i
 8010fb6:	f383 8811 	msr	BASEPRI, r3
 8010fba:	f3bf 8f6f 	isb	sy
 8010fbe:	f3bf 8f4f 	dsb	sy
 8010fc2:	b662      	cpsie	i
 8010fc4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010fc6:	bf00      	nop
 8010fc8:	bf00      	nop
 8010fca:	e7fd      	b.n	8010fc8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8010fcc:	f001 fe16 	bl	8012bfc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	681a      	ldr	r2, [r3, #0]
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010fd8:	68f9      	ldr	r1, [r7, #12]
 8010fda:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010fdc:	fb01 f303 	mul.w	r3, r1, r3
 8010fe0:	441a      	add	r2, r3
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	2200      	movs	r2, #0
 8010fea:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	681a      	ldr	r2, [r3, #0]
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	681a      	ldr	r2, [r3, #0]
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010ffc:	3b01      	subs	r3, #1
 8010ffe:	68f9      	ldr	r1, [r7, #12]
 8011000:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8011002:	fb01 f303 	mul.w	r3, r1, r3
 8011006:	441a      	add	r2, r3
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	22ff      	movs	r2, #255	@ 0xff
 8011010:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	22ff      	movs	r2, #255	@ 0xff
 8011018:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 801101c:	683b      	ldr	r3, [r7, #0]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d114      	bne.n	801104c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	691b      	ldr	r3, [r3, #16]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d01a      	beq.n	8011060 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	3310      	adds	r3, #16
 801102e:	4618      	mov	r0, r3
 8011030:	f001 f9fa 	bl	8012428 <xTaskRemoveFromEventList>
 8011034:	4603      	mov	r3, r0
 8011036:	2b00      	cmp	r3, #0
 8011038:	d012      	beq.n	8011060 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801103a:	4b0d      	ldr	r3, [pc, #52]	@ (8011070 <xQueueGenericReset+0xd4>)
 801103c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011040:	601a      	str	r2, [r3, #0]
 8011042:	f3bf 8f4f 	dsb	sy
 8011046:	f3bf 8f6f 	isb	sy
 801104a:	e009      	b.n	8011060 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	3310      	adds	r3, #16
 8011050:	4618      	mov	r0, r3
 8011052:	f7ff feef 	bl	8010e34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	3324      	adds	r3, #36	@ 0x24
 801105a:	4618      	mov	r0, r3
 801105c:	f7ff feea 	bl	8010e34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011060:	f001 fe02 	bl	8012c68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011064:	2301      	movs	r3, #1
}
 8011066:	4618      	mov	r0, r3
 8011068:	3710      	adds	r7, #16
 801106a:	46bd      	mov	sp, r7
 801106c:	bd80      	pop	{r7, pc}
 801106e:	bf00      	nop
 8011070:	e000ed04 	.word	0xe000ed04

08011074 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011074:	b580      	push	{r7, lr}
 8011076:	b08e      	sub	sp, #56	@ 0x38
 8011078:	af02      	add	r7, sp, #8
 801107a:	60f8      	str	r0, [r7, #12]
 801107c:	60b9      	str	r1, [r7, #8]
 801107e:	607a      	str	r2, [r7, #4]
 8011080:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d10d      	bne.n	80110a4 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8011088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801108c:	b672      	cpsid	i
 801108e:	f383 8811 	msr	BASEPRI, r3
 8011092:	f3bf 8f6f 	isb	sy
 8011096:	f3bf 8f4f 	dsb	sy
 801109a:	b662      	cpsie	i
 801109c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801109e:	bf00      	nop
 80110a0:	bf00      	nop
 80110a2:	e7fd      	b.n	80110a0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80110a4:	683b      	ldr	r3, [r7, #0]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d10d      	bne.n	80110c6 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80110aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110ae:	b672      	cpsid	i
 80110b0:	f383 8811 	msr	BASEPRI, r3
 80110b4:	f3bf 8f6f 	isb	sy
 80110b8:	f3bf 8f4f 	dsb	sy
 80110bc:	b662      	cpsie	i
 80110be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80110c0:	bf00      	nop
 80110c2:	bf00      	nop
 80110c4:	e7fd      	b.n	80110c2 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d002      	beq.n	80110d2 <xQueueGenericCreateStatic+0x5e>
 80110cc:	68bb      	ldr	r3, [r7, #8]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d001      	beq.n	80110d6 <xQueueGenericCreateStatic+0x62>
 80110d2:	2301      	movs	r3, #1
 80110d4:	e000      	b.n	80110d8 <xQueueGenericCreateStatic+0x64>
 80110d6:	2300      	movs	r3, #0
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d10d      	bne.n	80110f8 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80110dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110e0:	b672      	cpsid	i
 80110e2:	f383 8811 	msr	BASEPRI, r3
 80110e6:	f3bf 8f6f 	isb	sy
 80110ea:	f3bf 8f4f 	dsb	sy
 80110ee:	b662      	cpsie	i
 80110f0:	623b      	str	r3, [r7, #32]
}
 80110f2:	bf00      	nop
 80110f4:	bf00      	nop
 80110f6:	e7fd      	b.n	80110f4 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d102      	bne.n	8011104 <xQueueGenericCreateStatic+0x90>
 80110fe:	68bb      	ldr	r3, [r7, #8]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d101      	bne.n	8011108 <xQueueGenericCreateStatic+0x94>
 8011104:	2301      	movs	r3, #1
 8011106:	e000      	b.n	801110a <xQueueGenericCreateStatic+0x96>
 8011108:	2300      	movs	r3, #0
 801110a:	2b00      	cmp	r3, #0
 801110c:	d10d      	bne.n	801112a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 801110e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011112:	b672      	cpsid	i
 8011114:	f383 8811 	msr	BASEPRI, r3
 8011118:	f3bf 8f6f 	isb	sy
 801111c:	f3bf 8f4f 	dsb	sy
 8011120:	b662      	cpsie	i
 8011122:	61fb      	str	r3, [r7, #28]
}
 8011124:	bf00      	nop
 8011126:	bf00      	nop
 8011128:	e7fd      	b.n	8011126 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801112a:	2348      	movs	r3, #72	@ 0x48
 801112c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801112e:	697b      	ldr	r3, [r7, #20]
 8011130:	2b48      	cmp	r3, #72	@ 0x48
 8011132:	d00d      	beq.n	8011150 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8011134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011138:	b672      	cpsid	i
 801113a:	f383 8811 	msr	BASEPRI, r3
 801113e:	f3bf 8f6f 	isb	sy
 8011142:	f3bf 8f4f 	dsb	sy
 8011146:	b662      	cpsie	i
 8011148:	61bb      	str	r3, [r7, #24]
}
 801114a:	bf00      	nop
 801114c:	bf00      	nop
 801114e:	e7fd      	b.n	801114c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011150:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011152:	683b      	ldr	r3, [r7, #0]
 8011154:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8011156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011158:	2b00      	cmp	r3, #0
 801115a:	d00d      	beq.n	8011178 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801115c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801115e:	2201      	movs	r2, #1
 8011160:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011164:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8011168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801116a:	9300      	str	r3, [sp, #0]
 801116c:	4613      	mov	r3, r2
 801116e:	687a      	ldr	r2, [r7, #4]
 8011170:	68b9      	ldr	r1, [r7, #8]
 8011172:	68f8      	ldr	r0, [r7, #12]
 8011174:	f000 f848 	bl	8011208 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 801117a:	4618      	mov	r0, r3
 801117c:	3730      	adds	r7, #48	@ 0x30
 801117e:	46bd      	mov	sp, r7
 8011180:	bd80      	pop	{r7, pc}

08011182 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011182:	b580      	push	{r7, lr}
 8011184:	b08a      	sub	sp, #40	@ 0x28
 8011186:	af02      	add	r7, sp, #8
 8011188:	60f8      	str	r0, [r7, #12]
 801118a:	60b9      	str	r1, [r7, #8]
 801118c:	4613      	mov	r3, r2
 801118e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d10d      	bne.n	80111b2 <xQueueGenericCreate+0x30>
	__asm volatile
 8011196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801119a:	b672      	cpsid	i
 801119c:	f383 8811 	msr	BASEPRI, r3
 80111a0:	f3bf 8f6f 	isb	sy
 80111a4:	f3bf 8f4f 	dsb	sy
 80111a8:	b662      	cpsie	i
 80111aa:	613b      	str	r3, [r7, #16]
}
 80111ac:	bf00      	nop
 80111ae:	bf00      	nop
 80111b0:	e7fd      	b.n	80111ae <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80111b2:	68bb      	ldr	r3, [r7, #8]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d102      	bne.n	80111be <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80111b8:	2300      	movs	r3, #0
 80111ba:	61fb      	str	r3, [r7, #28]
 80111bc:	e004      	b.n	80111c8 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	68ba      	ldr	r2, [r7, #8]
 80111c2:	fb02 f303 	mul.w	r3, r2, r3
 80111c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80111c8:	69fb      	ldr	r3, [r7, #28]
 80111ca:	3348      	adds	r3, #72	@ 0x48
 80111cc:	4618      	mov	r0, r3
 80111ce:	f001 fe43 	bl	8012e58 <pvPortMalloc>
 80111d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80111d4:	69bb      	ldr	r3, [r7, #24]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d011      	beq.n	80111fe <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80111da:	69bb      	ldr	r3, [r7, #24]
 80111dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80111de:	697b      	ldr	r3, [r7, #20]
 80111e0:	3348      	adds	r3, #72	@ 0x48
 80111e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80111e4:	69bb      	ldr	r3, [r7, #24]
 80111e6:	2200      	movs	r2, #0
 80111e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80111ec:	79fa      	ldrb	r2, [r7, #7]
 80111ee:	69bb      	ldr	r3, [r7, #24]
 80111f0:	9300      	str	r3, [sp, #0]
 80111f2:	4613      	mov	r3, r2
 80111f4:	697a      	ldr	r2, [r7, #20]
 80111f6:	68b9      	ldr	r1, [r7, #8]
 80111f8:	68f8      	ldr	r0, [r7, #12]
 80111fa:	f000 f805 	bl	8011208 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80111fe:	69bb      	ldr	r3, [r7, #24]
	}
 8011200:	4618      	mov	r0, r3
 8011202:	3720      	adds	r7, #32
 8011204:	46bd      	mov	sp, r7
 8011206:	bd80      	pop	{r7, pc}

08011208 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b084      	sub	sp, #16
 801120c:	af00      	add	r7, sp, #0
 801120e:	60f8      	str	r0, [r7, #12]
 8011210:	60b9      	str	r1, [r7, #8]
 8011212:	607a      	str	r2, [r7, #4]
 8011214:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011216:	68bb      	ldr	r3, [r7, #8]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d103      	bne.n	8011224 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801121c:	69bb      	ldr	r3, [r7, #24]
 801121e:	69ba      	ldr	r2, [r7, #24]
 8011220:	601a      	str	r2, [r3, #0]
 8011222:	e002      	b.n	801122a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011224:	69bb      	ldr	r3, [r7, #24]
 8011226:	687a      	ldr	r2, [r7, #4]
 8011228:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801122a:	69bb      	ldr	r3, [r7, #24]
 801122c:	68fa      	ldr	r2, [r7, #12]
 801122e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011230:	69bb      	ldr	r3, [r7, #24]
 8011232:	68ba      	ldr	r2, [r7, #8]
 8011234:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011236:	2101      	movs	r1, #1
 8011238:	69b8      	ldr	r0, [r7, #24]
 801123a:	f7ff feaf 	bl	8010f9c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801123e:	bf00      	nop
 8011240:	3710      	adds	r7, #16
 8011242:	46bd      	mov	sp, r7
 8011244:	bd80      	pop	{r7, pc}
	...

08011248 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b08e      	sub	sp, #56	@ 0x38
 801124c:	af00      	add	r7, sp, #0
 801124e:	60f8      	str	r0, [r7, #12]
 8011250:	60b9      	str	r1, [r7, #8]
 8011252:	607a      	str	r2, [r7, #4]
 8011254:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011256:	2300      	movs	r3, #0
 8011258:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801125e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011260:	2b00      	cmp	r3, #0
 8011262:	d10d      	bne.n	8011280 <xQueueGenericSend+0x38>
	__asm volatile
 8011264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011268:	b672      	cpsid	i
 801126a:	f383 8811 	msr	BASEPRI, r3
 801126e:	f3bf 8f6f 	isb	sy
 8011272:	f3bf 8f4f 	dsb	sy
 8011276:	b662      	cpsie	i
 8011278:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801127a:	bf00      	nop
 801127c:	bf00      	nop
 801127e:	e7fd      	b.n	801127c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011280:	68bb      	ldr	r3, [r7, #8]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d103      	bne.n	801128e <xQueueGenericSend+0x46>
 8011286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801128a:	2b00      	cmp	r3, #0
 801128c:	d101      	bne.n	8011292 <xQueueGenericSend+0x4a>
 801128e:	2301      	movs	r3, #1
 8011290:	e000      	b.n	8011294 <xQueueGenericSend+0x4c>
 8011292:	2300      	movs	r3, #0
 8011294:	2b00      	cmp	r3, #0
 8011296:	d10d      	bne.n	80112b4 <xQueueGenericSend+0x6c>
	__asm volatile
 8011298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801129c:	b672      	cpsid	i
 801129e:	f383 8811 	msr	BASEPRI, r3
 80112a2:	f3bf 8f6f 	isb	sy
 80112a6:	f3bf 8f4f 	dsb	sy
 80112aa:	b662      	cpsie	i
 80112ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80112ae:	bf00      	nop
 80112b0:	bf00      	nop
 80112b2:	e7fd      	b.n	80112b0 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	2b02      	cmp	r3, #2
 80112b8:	d103      	bne.n	80112c2 <xQueueGenericSend+0x7a>
 80112ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80112be:	2b01      	cmp	r3, #1
 80112c0:	d101      	bne.n	80112c6 <xQueueGenericSend+0x7e>
 80112c2:	2301      	movs	r3, #1
 80112c4:	e000      	b.n	80112c8 <xQueueGenericSend+0x80>
 80112c6:	2300      	movs	r3, #0
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d10d      	bne.n	80112e8 <xQueueGenericSend+0xa0>
	__asm volatile
 80112cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112d0:	b672      	cpsid	i
 80112d2:	f383 8811 	msr	BASEPRI, r3
 80112d6:	f3bf 8f6f 	isb	sy
 80112da:	f3bf 8f4f 	dsb	sy
 80112de:	b662      	cpsie	i
 80112e0:	623b      	str	r3, [r7, #32]
}
 80112e2:	bf00      	nop
 80112e4:	bf00      	nop
 80112e6:	e7fd      	b.n	80112e4 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80112e8:	f001 fa68 	bl	80127bc <xTaskGetSchedulerState>
 80112ec:	4603      	mov	r3, r0
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d102      	bne.n	80112f8 <xQueueGenericSend+0xb0>
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d101      	bne.n	80112fc <xQueueGenericSend+0xb4>
 80112f8:	2301      	movs	r3, #1
 80112fa:	e000      	b.n	80112fe <xQueueGenericSend+0xb6>
 80112fc:	2300      	movs	r3, #0
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d10d      	bne.n	801131e <xQueueGenericSend+0xd6>
	__asm volatile
 8011302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011306:	b672      	cpsid	i
 8011308:	f383 8811 	msr	BASEPRI, r3
 801130c:	f3bf 8f6f 	isb	sy
 8011310:	f3bf 8f4f 	dsb	sy
 8011314:	b662      	cpsie	i
 8011316:	61fb      	str	r3, [r7, #28]
}
 8011318:	bf00      	nop
 801131a:	bf00      	nop
 801131c:	e7fd      	b.n	801131a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801131e:	f001 fc6d 	bl	8012bfc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011324:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801132a:	429a      	cmp	r2, r3
 801132c:	d302      	bcc.n	8011334 <xQueueGenericSend+0xec>
 801132e:	683b      	ldr	r3, [r7, #0]
 8011330:	2b02      	cmp	r3, #2
 8011332:	d129      	bne.n	8011388 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011334:	683a      	ldr	r2, [r7, #0]
 8011336:	68b9      	ldr	r1, [r7, #8]
 8011338:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801133a:	f000 fae5 	bl	8011908 <prvCopyDataToQueue>
 801133e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011344:	2b00      	cmp	r3, #0
 8011346:	d010      	beq.n	801136a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801134a:	3324      	adds	r3, #36	@ 0x24
 801134c:	4618      	mov	r0, r3
 801134e:	f001 f86b 	bl	8012428 <xTaskRemoveFromEventList>
 8011352:	4603      	mov	r3, r0
 8011354:	2b00      	cmp	r3, #0
 8011356:	d013      	beq.n	8011380 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011358:	4b3f      	ldr	r3, [pc, #252]	@ (8011458 <xQueueGenericSend+0x210>)
 801135a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801135e:	601a      	str	r2, [r3, #0]
 8011360:	f3bf 8f4f 	dsb	sy
 8011364:	f3bf 8f6f 	isb	sy
 8011368:	e00a      	b.n	8011380 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801136a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801136c:	2b00      	cmp	r3, #0
 801136e:	d007      	beq.n	8011380 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011370:	4b39      	ldr	r3, [pc, #228]	@ (8011458 <xQueueGenericSend+0x210>)
 8011372:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011376:	601a      	str	r2, [r3, #0]
 8011378:	f3bf 8f4f 	dsb	sy
 801137c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011380:	f001 fc72 	bl	8012c68 <vPortExitCritical>
				return pdPASS;
 8011384:	2301      	movs	r3, #1
 8011386:	e063      	b.n	8011450 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d103      	bne.n	8011396 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801138e:	f001 fc6b 	bl	8012c68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011392:	2300      	movs	r3, #0
 8011394:	e05c      	b.n	8011450 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011398:	2b00      	cmp	r3, #0
 801139a:	d106      	bne.n	80113aa <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801139c:	f107 0314 	add.w	r3, r7, #20
 80113a0:	4618      	mov	r0, r3
 80113a2:	f001 f8a7 	bl	80124f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80113a6:	2301      	movs	r3, #1
 80113a8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80113aa:	f001 fc5d 	bl	8012c68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80113ae:	f000 fe03 	bl	8011fb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80113b2:	f001 fc23 	bl	8012bfc <vPortEnterCritical>
 80113b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80113bc:	b25b      	sxtb	r3, r3
 80113be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113c2:	d103      	bne.n	80113cc <xQueueGenericSend+0x184>
 80113c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113c6:	2200      	movs	r2, #0
 80113c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80113cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80113d2:	b25b      	sxtb	r3, r3
 80113d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113d8:	d103      	bne.n	80113e2 <xQueueGenericSend+0x19a>
 80113da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113dc:	2200      	movs	r2, #0
 80113de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80113e2:	f001 fc41 	bl	8012c68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80113e6:	1d3a      	adds	r2, r7, #4
 80113e8:	f107 0314 	add.w	r3, r7, #20
 80113ec:	4611      	mov	r1, r2
 80113ee:	4618      	mov	r0, r3
 80113f0:	f001 f896 	bl	8012520 <xTaskCheckForTimeOut>
 80113f4:	4603      	mov	r3, r0
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d124      	bne.n	8011444 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80113fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80113fc:	f000 fb7c 	bl	8011af8 <prvIsQueueFull>
 8011400:	4603      	mov	r3, r0
 8011402:	2b00      	cmp	r3, #0
 8011404:	d018      	beq.n	8011438 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011408:	3310      	adds	r3, #16
 801140a:	687a      	ldr	r2, [r7, #4]
 801140c:	4611      	mov	r1, r2
 801140e:	4618      	mov	r0, r3
 8011410:	f000 ffe2 	bl	80123d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011414:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011416:	f000 fb07 	bl	8011a28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801141a:	f000 fddb 	bl	8011fd4 <xTaskResumeAll>
 801141e:	4603      	mov	r3, r0
 8011420:	2b00      	cmp	r3, #0
 8011422:	f47f af7c 	bne.w	801131e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8011426:	4b0c      	ldr	r3, [pc, #48]	@ (8011458 <xQueueGenericSend+0x210>)
 8011428:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801142c:	601a      	str	r2, [r3, #0]
 801142e:	f3bf 8f4f 	dsb	sy
 8011432:	f3bf 8f6f 	isb	sy
 8011436:	e772      	b.n	801131e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011438:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801143a:	f000 faf5 	bl	8011a28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801143e:	f000 fdc9 	bl	8011fd4 <xTaskResumeAll>
 8011442:	e76c      	b.n	801131e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011444:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011446:	f000 faef 	bl	8011a28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801144a:	f000 fdc3 	bl	8011fd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801144e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011450:	4618      	mov	r0, r3
 8011452:	3738      	adds	r7, #56	@ 0x38
 8011454:	46bd      	mov	sp, r7
 8011456:	bd80      	pop	{r7, pc}
 8011458:	e000ed04 	.word	0xe000ed04

0801145c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b08e      	sub	sp, #56	@ 0x38
 8011460:	af00      	add	r7, sp, #0
 8011462:	60f8      	str	r0, [r7, #12]
 8011464:	60b9      	str	r1, [r7, #8]
 8011466:	607a      	str	r2, [r7, #4]
 8011468:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801146e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011470:	2b00      	cmp	r3, #0
 8011472:	d10d      	bne.n	8011490 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8011474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011478:	b672      	cpsid	i
 801147a:	f383 8811 	msr	BASEPRI, r3
 801147e:	f3bf 8f6f 	isb	sy
 8011482:	f3bf 8f4f 	dsb	sy
 8011486:	b662      	cpsie	i
 8011488:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801148a:	bf00      	nop
 801148c:	bf00      	nop
 801148e:	e7fd      	b.n	801148c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d103      	bne.n	801149e <xQueueGenericSendFromISR+0x42>
 8011496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801149a:	2b00      	cmp	r3, #0
 801149c:	d101      	bne.n	80114a2 <xQueueGenericSendFromISR+0x46>
 801149e:	2301      	movs	r3, #1
 80114a0:	e000      	b.n	80114a4 <xQueueGenericSendFromISR+0x48>
 80114a2:	2300      	movs	r3, #0
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d10d      	bne.n	80114c4 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80114a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114ac:	b672      	cpsid	i
 80114ae:	f383 8811 	msr	BASEPRI, r3
 80114b2:	f3bf 8f6f 	isb	sy
 80114b6:	f3bf 8f4f 	dsb	sy
 80114ba:	b662      	cpsie	i
 80114bc:	623b      	str	r3, [r7, #32]
}
 80114be:	bf00      	nop
 80114c0:	bf00      	nop
 80114c2:	e7fd      	b.n	80114c0 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80114c4:	683b      	ldr	r3, [r7, #0]
 80114c6:	2b02      	cmp	r3, #2
 80114c8:	d103      	bne.n	80114d2 <xQueueGenericSendFromISR+0x76>
 80114ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80114ce:	2b01      	cmp	r3, #1
 80114d0:	d101      	bne.n	80114d6 <xQueueGenericSendFromISR+0x7a>
 80114d2:	2301      	movs	r3, #1
 80114d4:	e000      	b.n	80114d8 <xQueueGenericSendFromISR+0x7c>
 80114d6:	2300      	movs	r3, #0
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d10d      	bne.n	80114f8 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80114dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114e0:	b672      	cpsid	i
 80114e2:	f383 8811 	msr	BASEPRI, r3
 80114e6:	f3bf 8f6f 	isb	sy
 80114ea:	f3bf 8f4f 	dsb	sy
 80114ee:	b662      	cpsie	i
 80114f0:	61fb      	str	r3, [r7, #28]
}
 80114f2:	bf00      	nop
 80114f4:	bf00      	nop
 80114f6:	e7fd      	b.n	80114f4 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80114f8:	f001 fc68 	bl	8012dcc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80114fc:	f3ef 8211 	mrs	r2, BASEPRI
 8011500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011504:	b672      	cpsid	i
 8011506:	f383 8811 	msr	BASEPRI, r3
 801150a:	f3bf 8f6f 	isb	sy
 801150e:	f3bf 8f4f 	dsb	sy
 8011512:	b662      	cpsie	i
 8011514:	61ba      	str	r2, [r7, #24]
 8011516:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011518:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801151a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801151c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801151e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011524:	429a      	cmp	r2, r3
 8011526:	d302      	bcc.n	801152e <xQueueGenericSendFromISR+0xd2>
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	2b02      	cmp	r3, #2
 801152c:	d12c      	bne.n	8011588 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801152e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011530:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011534:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011538:	683a      	ldr	r2, [r7, #0]
 801153a:	68b9      	ldr	r1, [r7, #8]
 801153c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801153e:	f000 f9e3 	bl	8011908 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011542:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8011546:	f1b3 3fff 	cmp.w	r3, #4294967295
 801154a:	d112      	bne.n	8011572 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801154c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801154e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011550:	2b00      	cmp	r3, #0
 8011552:	d016      	beq.n	8011582 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011556:	3324      	adds	r3, #36	@ 0x24
 8011558:	4618      	mov	r0, r3
 801155a:	f000 ff65 	bl	8012428 <xTaskRemoveFromEventList>
 801155e:	4603      	mov	r3, r0
 8011560:	2b00      	cmp	r3, #0
 8011562:	d00e      	beq.n	8011582 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d00b      	beq.n	8011582 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	2201      	movs	r2, #1
 801156e:	601a      	str	r2, [r3, #0]
 8011570:	e007      	b.n	8011582 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011572:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011576:	3301      	adds	r3, #1
 8011578:	b2db      	uxtb	r3, r3
 801157a:	b25a      	sxtb	r2, r3
 801157c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801157e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8011582:	2301      	movs	r3, #1
 8011584:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8011586:	e001      	b.n	801158c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011588:	2300      	movs	r3, #0
 801158a:	637b      	str	r3, [r7, #52]	@ 0x34
 801158c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801158e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011590:	693b      	ldr	r3, [r7, #16]
 8011592:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011596:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801159a:	4618      	mov	r0, r3
 801159c:	3738      	adds	r7, #56	@ 0x38
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}
	...

080115a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b08c      	sub	sp, #48	@ 0x30
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	60f8      	str	r0, [r7, #12]
 80115ac:	60b9      	str	r1, [r7, #8]
 80115ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80115b0:	2300      	movs	r3, #0
 80115b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80115b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d10d      	bne.n	80115da <xQueueReceive+0x36>
	__asm volatile
 80115be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115c2:	b672      	cpsid	i
 80115c4:	f383 8811 	msr	BASEPRI, r3
 80115c8:	f3bf 8f6f 	isb	sy
 80115cc:	f3bf 8f4f 	dsb	sy
 80115d0:	b662      	cpsie	i
 80115d2:	623b      	str	r3, [r7, #32]
}
 80115d4:	bf00      	nop
 80115d6:	bf00      	nop
 80115d8:	e7fd      	b.n	80115d6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80115da:	68bb      	ldr	r3, [r7, #8]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d103      	bne.n	80115e8 <xQueueReceive+0x44>
 80115e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d101      	bne.n	80115ec <xQueueReceive+0x48>
 80115e8:	2301      	movs	r3, #1
 80115ea:	e000      	b.n	80115ee <xQueueReceive+0x4a>
 80115ec:	2300      	movs	r3, #0
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d10d      	bne.n	801160e <xQueueReceive+0x6a>
	__asm volatile
 80115f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115f6:	b672      	cpsid	i
 80115f8:	f383 8811 	msr	BASEPRI, r3
 80115fc:	f3bf 8f6f 	isb	sy
 8011600:	f3bf 8f4f 	dsb	sy
 8011604:	b662      	cpsie	i
 8011606:	61fb      	str	r3, [r7, #28]
}
 8011608:	bf00      	nop
 801160a:	bf00      	nop
 801160c:	e7fd      	b.n	801160a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801160e:	f001 f8d5 	bl	80127bc <xTaskGetSchedulerState>
 8011612:	4603      	mov	r3, r0
 8011614:	2b00      	cmp	r3, #0
 8011616:	d102      	bne.n	801161e <xQueueReceive+0x7a>
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d101      	bne.n	8011622 <xQueueReceive+0x7e>
 801161e:	2301      	movs	r3, #1
 8011620:	e000      	b.n	8011624 <xQueueReceive+0x80>
 8011622:	2300      	movs	r3, #0
 8011624:	2b00      	cmp	r3, #0
 8011626:	d10d      	bne.n	8011644 <xQueueReceive+0xa0>
	__asm volatile
 8011628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801162c:	b672      	cpsid	i
 801162e:	f383 8811 	msr	BASEPRI, r3
 8011632:	f3bf 8f6f 	isb	sy
 8011636:	f3bf 8f4f 	dsb	sy
 801163a:	b662      	cpsie	i
 801163c:	61bb      	str	r3, [r7, #24]
}
 801163e:	bf00      	nop
 8011640:	bf00      	nop
 8011642:	e7fd      	b.n	8011640 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011644:	f001 fada 	bl	8012bfc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801164a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801164c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801164e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011650:	2b00      	cmp	r3, #0
 8011652:	d01f      	beq.n	8011694 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011654:	68b9      	ldr	r1, [r7, #8]
 8011656:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011658:	f000 f9c0 	bl	80119dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801165c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801165e:	1e5a      	subs	r2, r3, #1
 8011660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011662:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011666:	691b      	ldr	r3, [r3, #16]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d00f      	beq.n	801168c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801166c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801166e:	3310      	adds	r3, #16
 8011670:	4618      	mov	r0, r3
 8011672:	f000 fed9 	bl	8012428 <xTaskRemoveFromEventList>
 8011676:	4603      	mov	r3, r0
 8011678:	2b00      	cmp	r3, #0
 801167a:	d007      	beq.n	801168c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801167c:	4b3c      	ldr	r3, [pc, #240]	@ (8011770 <xQueueReceive+0x1cc>)
 801167e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011682:	601a      	str	r2, [r3, #0]
 8011684:	f3bf 8f4f 	dsb	sy
 8011688:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801168c:	f001 faec 	bl	8012c68 <vPortExitCritical>
				return pdPASS;
 8011690:	2301      	movs	r3, #1
 8011692:	e069      	b.n	8011768 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d103      	bne.n	80116a2 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801169a:	f001 fae5 	bl	8012c68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801169e:	2300      	movs	r3, #0
 80116a0:	e062      	b.n	8011768 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80116a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d106      	bne.n	80116b6 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80116a8:	f107 0310 	add.w	r3, r7, #16
 80116ac:	4618      	mov	r0, r3
 80116ae:	f000 ff21 	bl	80124f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80116b2:	2301      	movs	r3, #1
 80116b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80116b6:	f001 fad7 	bl	8012c68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80116ba:	f000 fc7d 	bl	8011fb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80116be:	f001 fa9d 	bl	8012bfc <vPortEnterCritical>
 80116c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80116c8:	b25b      	sxtb	r3, r3
 80116ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116ce:	d103      	bne.n	80116d8 <xQueueReceive+0x134>
 80116d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116d2:	2200      	movs	r2, #0
 80116d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80116d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80116de:	b25b      	sxtb	r3, r3
 80116e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116e4:	d103      	bne.n	80116ee <xQueueReceive+0x14a>
 80116e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116e8:	2200      	movs	r2, #0
 80116ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80116ee:	f001 fabb 	bl	8012c68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80116f2:	1d3a      	adds	r2, r7, #4
 80116f4:	f107 0310 	add.w	r3, r7, #16
 80116f8:	4611      	mov	r1, r2
 80116fa:	4618      	mov	r0, r3
 80116fc:	f000 ff10 	bl	8012520 <xTaskCheckForTimeOut>
 8011700:	4603      	mov	r3, r0
 8011702:	2b00      	cmp	r3, #0
 8011704:	d123      	bne.n	801174e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011706:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011708:	f000 f9e0 	bl	8011acc <prvIsQueueEmpty>
 801170c:	4603      	mov	r3, r0
 801170e:	2b00      	cmp	r3, #0
 8011710:	d017      	beq.n	8011742 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011714:	3324      	adds	r3, #36	@ 0x24
 8011716:	687a      	ldr	r2, [r7, #4]
 8011718:	4611      	mov	r1, r2
 801171a:	4618      	mov	r0, r3
 801171c:	f000 fe5c 	bl	80123d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011720:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011722:	f000 f981 	bl	8011a28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011726:	f000 fc55 	bl	8011fd4 <xTaskResumeAll>
 801172a:	4603      	mov	r3, r0
 801172c:	2b00      	cmp	r3, #0
 801172e:	d189      	bne.n	8011644 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8011730:	4b0f      	ldr	r3, [pc, #60]	@ (8011770 <xQueueReceive+0x1cc>)
 8011732:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011736:	601a      	str	r2, [r3, #0]
 8011738:	f3bf 8f4f 	dsb	sy
 801173c:	f3bf 8f6f 	isb	sy
 8011740:	e780      	b.n	8011644 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011742:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011744:	f000 f970 	bl	8011a28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011748:	f000 fc44 	bl	8011fd4 <xTaskResumeAll>
 801174c:	e77a      	b.n	8011644 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801174e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011750:	f000 f96a 	bl	8011a28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011754:	f000 fc3e 	bl	8011fd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011758:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801175a:	f000 f9b7 	bl	8011acc <prvIsQueueEmpty>
 801175e:	4603      	mov	r3, r0
 8011760:	2b00      	cmp	r3, #0
 8011762:	f43f af6f 	beq.w	8011644 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011766:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011768:	4618      	mov	r0, r3
 801176a:	3730      	adds	r7, #48	@ 0x30
 801176c:	46bd      	mov	sp, r7
 801176e:	bd80      	pop	{r7, pc}
 8011770:	e000ed04 	.word	0xe000ed04

08011774 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011774:	b580      	push	{r7, lr}
 8011776:	b08e      	sub	sp, #56	@ 0x38
 8011778:	af00      	add	r7, sp, #0
 801177a:	60f8      	str	r0, [r7, #12]
 801177c:	60b9      	str	r1, [r7, #8]
 801177e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011786:	2b00      	cmp	r3, #0
 8011788:	d10d      	bne.n	80117a6 <xQueueReceiveFromISR+0x32>
	__asm volatile
 801178a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801178e:	b672      	cpsid	i
 8011790:	f383 8811 	msr	BASEPRI, r3
 8011794:	f3bf 8f6f 	isb	sy
 8011798:	f3bf 8f4f 	dsb	sy
 801179c:	b662      	cpsie	i
 801179e:	623b      	str	r3, [r7, #32]
}
 80117a0:	bf00      	nop
 80117a2:	bf00      	nop
 80117a4:	e7fd      	b.n	80117a2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80117a6:	68bb      	ldr	r3, [r7, #8]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d103      	bne.n	80117b4 <xQueueReceiveFromISR+0x40>
 80117ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d101      	bne.n	80117b8 <xQueueReceiveFromISR+0x44>
 80117b4:	2301      	movs	r3, #1
 80117b6:	e000      	b.n	80117ba <xQueueReceiveFromISR+0x46>
 80117b8:	2300      	movs	r3, #0
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d10d      	bne.n	80117da <xQueueReceiveFromISR+0x66>
	__asm volatile
 80117be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117c2:	b672      	cpsid	i
 80117c4:	f383 8811 	msr	BASEPRI, r3
 80117c8:	f3bf 8f6f 	isb	sy
 80117cc:	f3bf 8f4f 	dsb	sy
 80117d0:	b662      	cpsie	i
 80117d2:	61fb      	str	r3, [r7, #28]
}
 80117d4:	bf00      	nop
 80117d6:	bf00      	nop
 80117d8:	e7fd      	b.n	80117d6 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80117da:	f001 faf7 	bl	8012dcc <vPortValidateInterruptPriority>
	__asm volatile
 80117de:	f3ef 8211 	mrs	r2, BASEPRI
 80117e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117e6:	b672      	cpsid	i
 80117e8:	f383 8811 	msr	BASEPRI, r3
 80117ec:	f3bf 8f6f 	isb	sy
 80117f0:	f3bf 8f4f 	dsb	sy
 80117f4:	b662      	cpsie	i
 80117f6:	61ba      	str	r2, [r7, #24]
 80117f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80117fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80117fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80117fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011802:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011806:	2b00      	cmp	r3, #0
 8011808:	d02f      	beq.n	801186a <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801180a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801180c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011810:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011814:	68b9      	ldr	r1, [r7, #8]
 8011816:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011818:	f000 f8e0 	bl	80119dc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801181c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801181e:	1e5a      	subs	r2, r3, #1
 8011820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011822:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011824:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8011828:	f1b3 3fff 	cmp.w	r3, #4294967295
 801182c:	d112      	bne.n	8011854 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801182e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011830:	691b      	ldr	r3, [r3, #16]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d016      	beq.n	8011864 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011838:	3310      	adds	r3, #16
 801183a:	4618      	mov	r0, r3
 801183c:	f000 fdf4 	bl	8012428 <xTaskRemoveFromEventList>
 8011840:	4603      	mov	r3, r0
 8011842:	2b00      	cmp	r3, #0
 8011844:	d00e      	beq.n	8011864 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d00b      	beq.n	8011864 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	2201      	movs	r2, #1
 8011850:	601a      	str	r2, [r3, #0]
 8011852:	e007      	b.n	8011864 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011854:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011858:	3301      	adds	r3, #1
 801185a:	b2db      	uxtb	r3, r3
 801185c:	b25a      	sxtb	r2, r3
 801185e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011860:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8011864:	2301      	movs	r3, #1
 8011866:	637b      	str	r3, [r7, #52]	@ 0x34
 8011868:	e001      	b.n	801186e <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 801186a:	2300      	movs	r3, #0
 801186c:	637b      	str	r3, [r7, #52]	@ 0x34
 801186e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011870:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011872:	693b      	ldr	r3, [r7, #16]
 8011874:	f383 8811 	msr	BASEPRI, r3
}
 8011878:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801187a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801187c:	4618      	mov	r0, r3
 801187e:	3738      	adds	r7, #56	@ 0x38
 8011880:	46bd      	mov	sp, r7
 8011882:	bd80      	pop	{r7, pc}

08011884 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8011884:	b580      	push	{r7, lr}
 8011886:	b084      	sub	sp, #16
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d10d      	bne.n	80118ae <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8011892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011896:	b672      	cpsid	i
 8011898:	f383 8811 	msr	BASEPRI, r3
 801189c:	f3bf 8f6f 	isb	sy
 80118a0:	f3bf 8f4f 	dsb	sy
 80118a4:	b662      	cpsie	i
 80118a6:	60bb      	str	r3, [r7, #8]
}
 80118a8:	bf00      	nop
 80118aa:	bf00      	nop
 80118ac:	e7fd      	b.n	80118aa <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80118ae:	f001 f9a5 	bl	8012bfc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80118b6:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80118b8:	f001 f9d6 	bl	8012c68 <vPortExitCritical>

	return uxReturn;
 80118bc:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80118be:	4618      	mov	r0, r3
 80118c0:	3710      	adds	r7, #16
 80118c2:	46bd      	mov	sp, r7
 80118c4:	bd80      	pop	{r7, pc}

080118c6 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80118c6:	b480      	push	{r7}
 80118c8:	b087      	sub	sp, #28
 80118ca:	af00      	add	r7, sp, #0
 80118cc:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80118d2:	697b      	ldr	r3, [r7, #20]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d10d      	bne.n	80118f4 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 80118d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118dc:	b672      	cpsid	i
 80118de:	f383 8811 	msr	BASEPRI, r3
 80118e2:	f3bf 8f6f 	isb	sy
 80118e6:	f3bf 8f4f 	dsb	sy
 80118ea:	b662      	cpsie	i
 80118ec:	60fb      	str	r3, [r7, #12]
}
 80118ee:	bf00      	nop
 80118f0:	bf00      	nop
 80118f2:	e7fd      	b.n	80118f0 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 80118f4:	697b      	ldr	r3, [r7, #20]
 80118f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80118f8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80118fa:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80118fc:	4618      	mov	r0, r3
 80118fe:	371c      	adds	r7, #28
 8011900:	46bd      	mov	sp, r7
 8011902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011906:	4770      	bx	lr

08011908 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b086      	sub	sp, #24
 801190c:	af00      	add	r7, sp, #0
 801190e:	60f8      	str	r0, [r7, #12]
 8011910:	60b9      	str	r1, [r7, #8]
 8011912:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011914:	2300      	movs	r3, #0
 8011916:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801191c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011922:	2b00      	cmp	r3, #0
 8011924:	d10d      	bne.n	8011942 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d14d      	bne.n	80119ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	689b      	ldr	r3, [r3, #8]
 8011932:	4618      	mov	r0, r3
 8011934:	f000 ff60 	bl	80127f8 <xTaskPriorityDisinherit>
 8011938:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	2200      	movs	r2, #0
 801193e:	609a      	str	r2, [r3, #8]
 8011940:	e043      	b.n	80119ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d119      	bne.n	801197c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	6858      	ldr	r0, [r3, #4]
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011950:	461a      	mov	r2, r3
 8011952:	68b9      	ldr	r1, [r7, #8]
 8011954:	f002 f868 	bl	8013a28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	685a      	ldr	r2, [r3, #4]
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011960:	441a      	add	r2, r3
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	685a      	ldr	r2, [r3, #4]
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	689b      	ldr	r3, [r3, #8]
 801196e:	429a      	cmp	r2, r3
 8011970:	d32b      	bcc.n	80119ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	681a      	ldr	r2, [r3, #0]
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	605a      	str	r2, [r3, #4]
 801197a:	e026      	b.n	80119ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	68d8      	ldr	r0, [r3, #12]
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011984:	461a      	mov	r2, r3
 8011986:	68b9      	ldr	r1, [r7, #8]
 8011988:	f002 f84e 	bl	8013a28 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	68da      	ldr	r2, [r3, #12]
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011994:	425b      	negs	r3, r3
 8011996:	441a      	add	r2, r3
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	68da      	ldr	r2, [r3, #12]
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	429a      	cmp	r2, r3
 80119a6:	d207      	bcs.n	80119b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	689a      	ldr	r2, [r3, #8]
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80119b0:	425b      	negs	r3, r3
 80119b2:	441a      	add	r2, r3
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	2b02      	cmp	r3, #2
 80119bc:	d105      	bne.n	80119ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80119be:	693b      	ldr	r3, [r7, #16]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d002      	beq.n	80119ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80119c4:	693b      	ldr	r3, [r7, #16]
 80119c6:	3b01      	subs	r3, #1
 80119c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80119ca:	693b      	ldr	r3, [r7, #16]
 80119cc:	1c5a      	adds	r2, r3, #1
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80119d2:	697b      	ldr	r3, [r7, #20]
}
 80119d4:	4618      	mov	r0, r3
 80119d6:	3718      	adds	r7, #24
 80119d8:	46bd      	mov	sp, r7
 80119da:	bd80      	pop	{r7, pc}

080119dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80119dc:	b580      	push	{r7, lr}
 80119de:	b082      	sub	sp, #8
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
 80119e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d018      	beq.n	8011a20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	68da      	ldr	r2, [r3, #12]
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80119f6:	441a      	add	r2, r3
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	68da      	ldr	r2, [r3, #12]
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	689b      	ldr	r3, [r3, #8]
 8011a04:	429a      	cmp	r2, r3
 8011a06:	d303      	bcc.n	8011a10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	681a      	ldr	r2, [r3, #0]
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	68d9      	ldr	r1, [r3, #12]
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a18:	461a      	mov	r2, r3
 8011a1a:	6838      	ldr	r0, [r7, #0]
 8011a1c:	f002 f804 	bl	8013a28 <memcpy>
	}
}
 8011a20:	bf00      	nop
 8011a22:	3708      	adds	r7, #8
 8011a24:	46bd      	mov	sp, r7
 8011a26:	bd80      	pop	{r7, pc}

08011a28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b084      	sub	sp, #16
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011a30:	f001 f8e4 	bl	8012bfc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011a3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011a3c:	e011      	b.n	8011a62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d012      	beq.n	8011a6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	3324      	adds	r3, #36	@ 0x24
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f000 fcec 	bl	8012428 <xTaskRemoveFromEventList>
 8011a50:	4603      	mov	r3, r0
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d001      	beq.n	8011a5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011a56:	f000 fdcb 	bl	80125f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011a5a:	7bfb      	ldrb	r3, [r7, #15]
 8011a5c:	3b01      	subs	r3, #1
 8011a5e:	b2db      	uxtb	r3, r3
 8011a60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	dce9      	bgt.n	8011a3e <prvUnlockQueue+0x16>
 8011a6a:	e000      	b.n	8011a6e <prvUnlockQueue+0x46>
					break;
 8011a6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	22ff      	movs	r2, #255	@ 0xff
 8011a72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8011a76:	f001 f8f7 	bl	8012c68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011a7a:	f001 f8bf 	bl	8012bfc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011a84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011a86:	e011      	b.n	8011aac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	691b      	ldr	r3, [r3, #16]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d012      	beq.n	8011ab6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	3310      	adds	r3, #16
 8011a94:	4618      	mov	r0, r3
 8011a96:	f000 fcc7 	bl	8012428 <xTaskRemoveFromEventList>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d001      	beq.n	8011aa4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011aa0:	f000 fda6 	bl	80125f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011aa4:	7bbb      	ldrb	r3, [r7, #14]
 8011aa6:	3b01      	subs	r3, #1
 8011aa8:	b2db      	uxtb	r3, r3
 8011aaa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011aac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	dce9      	bgt.n	8011a88 <prvUnlockQueue+0x60>
 8011ab4:	e000      	b.n	8011ab8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011ab6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	22ff      	movs	r2, #255	@ 0xff
 8011abc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8011ac0:	f001 f8d2 	bl	8012c68 <vPortExitCritical>
}
 8011ac4:	bf00      	nop
 8011ac6:	3710      	adds	r7, #16
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bd80      	pop	{r7, pc}

08011acc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b084      	sub	sp, #16
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011ad4:	f001 f892 	bl	8012bfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d102      	bne.n	8011ae6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011ae0:	2301      	movs	r3, #1
 8011ae2:	60fb      	str	r3, [r7, #12]
 8011ae4:	e001      	b.n	8011aea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011aea:	f001 f8bd 	bl	8012c68 <vPortExitCritical>

	return xReturn;
 8011aee:	68fb      	ldr	r3, [r7, #12]
}
 8011af0:	4618      	mov	r0, r3
 8011af2:	3710      	adds	r7, #16
 8011af4:	46bd      	mov	sp, r7
 8011af6:	bd80      	pop	{r7, pc}

08011af8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b084      	sub	sp, #16
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011b00:	f001 f87c 	bl	8012bfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011b0c:	429a      	cmp	r2, r3
 8011b0e:	d102      	bne.n	8011b16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011b10:	2301      	movs	r3, #1
 8011b12:	60fb      	str	r3, [r7, #12]
 8011b14:	e001      	b.n	8011b1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011b16:	2300      	movs	r3, #0
 8011b18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011b1a:	f001 f8a5 	bl	8012c68 <vPortExitCritical>

	return xReturn;
 8011b1e:	68fb      	ldr	r3, [r7, #12]
}
 8011b20:	4618      	mov	r0, r3
 8011b22:	3710      	adds	r7, #16
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}

08011b28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b08e      	sub	sp, #56	@ 0x38
 8011b2c:	af04      	add	r7, sp, #16
 8011b2e:	60f8      	str	r0, [r7, #12]
 8011b30:	60b9      	str	r1, [r7, #8]
 8011b32:	607a      	str	r2, [r7, #4]
 8011b34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d10d      	bne.n	8011b58 <xTaskCreateStatic+0x30>
	__asm volatile
 8011b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b40:	b672      	cpsid	i
 8011b42:	f383 8811 	msr	BASEPRI, r3
 8011b46:	f3bf 8f6f 	isb	sy
 8011b4a:	f3bf 8f4f 	dsb	sy
 8011b4e:	b662      	cpsie	i
 8011b50:	623b      	str	r3, [r7, #32]
}
 8011b52:	bf00      	nop
 8011b54:	bf00      	nop
 8011b56:	e7fd      	b.n	8011b54 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8011b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d10d      	bne.n	8011b7a <xTaskCreateStatic+0x52>
	__asm volatile
 8011b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b62:	b672      	cpsid	i
 8011b64:	f383 8811 	msr	BASEPRI, r3
 8011b68:	f3bf 8f6f 	isb	sy
 8011b6c:	f3bf 8f4f 	dsb	sy
 8011b70:	b662      	cpsie	i
 8011b72:	61fb      	str	r3, [r7, #28]
}
 8011b74:	bf00      	nop
 8011b76:	bf00      	nop
 8011b78:	e7fd      	b.n	8011b76 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011b7a:	2358      	movs	r3, #88	@ 0x58
 8011b7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011b7e:	693b      	ldr	r3, [r7, #16]
 8011b80:	2b58      	cmp	r3, #88	@ 0x58
 8011b82:	d00d      	beq.n	8011ba0 <xTaskCreateStatic+0x78>
	__asm volatile
 8011b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b88:	b672      	cpsid	i
 8011b8a:	f383 8811 	msr	BASEPRI, r3
 8011b8e:	f3bf 8f6f 	isb	sy
 8011b92:	f3bf 8f4f 	dsb	sy
 8011b96:	b662      	cpsie	i
 8011b98:	61bb      	str	r3, [r7, #24]
}
 8011b9a:	bf00      	nop
 8011b9c:	bf00      	nop
 8011b9e:	e7fd      	b.n	8011b9c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011ba0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d01e      	beq.n	8011be6 <xTaskCreateStatic+0xbe>
 8011ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d01b      	beq.n	8011be6 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bb0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011bb6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bba:	2202      	movs	r2, #2
 8011bbc:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	9303      	str	r3, [sp, #12]
 8011bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bc6:	9302      	str	r3, [sp, #8]
 8011bc8:	f107 0314 	add.w	r3, r7, #20
 8011bcc:	9301      	str	r3, [sp, #4]
 8011bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bd0:	9300      	str	r3, [sp, #0]
 8011bd2:	683b      	ldr	r3, [r7, #0]
 8011bd4:	687a      	ldr	r2, [r7, #4]
 8011bd6:	68b9      	ldr	r1, [r7, #8]
 8011bd8:	68f8      	ldr	r0, [r7, #12]
 8011bda:	f000 f850 	bl	8011c7e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011bde:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011be0:	f000 f8e2 	bl	8011da8 <prvAddNewTaskToReadyList>
 8011be4:	e001      	b.n	8011bea <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8011be6:	2300      	movs	r3, #0
 8011be8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011bea:	697b      	ldr	r3, [r7, #20]
	}
 8011bec:	4618      	mov	r0, r3
 8011bee:	3728      	adds	r7, #40	@ 0x28
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	bd80      	pop	{r7, pc}

08011bf4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b08c      	sub	sp, #48	@ 0x30
 8011bf8:	af04      	add	r7, sp, #16
 8011bfa:	60f8      	str	r0, [r7, #12]
 8011bfc:	60b9      	str	r1, [r7, #8]
 8011bfe:	603b      	str	r3, [r7, #0]
 8011c00:	4613      	mov	r3, r2
 8011c02:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011c04:	88fb      	ldrh	r3, [r7, #6]
 8011c06:	009b      	lsls	r3, r3, #2
 8011c08:	4618      	mov	r0, r3
 8011c0a:	f001 f925 	bl	8012e58 <pvPortMalloc>
 8011c0e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011c10:	697b      	ldr	r3, [r7, #20]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d00e      	beq.n	8011c34 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011c16:	2058      	movs	r0, #88	@ 0x58
 8011c18:	f001 f91e 	bl	8012e58 <pvPortMalloc>
 8011c1c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011c1e:	69fb      	ldr	r3, [r7, #28]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d003      	beq.n	8011c2c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011c24:	69fb      	ldr	r3, [r7, #28]
 8011c26:	697a      	ldr	r2, [r7, #20]
 8011c28:	631a      	str	r2, [r3, #48]	@ 0x30
 8011c2a:	e005      	b.n	8011c38 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011c2c:	6978      	ldr	r0, [r7, #20]
 8011c2e:	f001 f9e5 	bl	8012ffc <vPortFree>
 8011c32:	e001      	b.n	8011c38 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011c34:	2300      	movs	r3, #0
 8011c36:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011c38:	69fb      	ldr	r3, [r7, #28]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d017      	beq.n	8011c6e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011c3e:	69fb      	ldr	r3, [r7, #28]
 8011c40:	2200      	movs	r2, #0
 8011c42:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011c46:	88fa      	ldrh	r2, [r7, #6]
 8011c48:	2300      	movs	r3, #0
 8011c4a:	9303      	str	r3, [sp, #12]
 8011c4c:	69fb      	ldr	r3, [r7, #28]
 8011c4e:	9302      	str	r3, [sp, #8]
 8011c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c52:	9301      	str	r3, [sp, #4]
 8011c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c56:	9300      	str	r3, [sp, #0]
 8011c58:	683b      	ldr	r3, [r7, #0]
 8011c5a:	68b9      	ldr	r1, [r7, #8]
 8011c5c:	68f8      	ldr	r0, [r7, #12]
 8011c5e:	f000 f80e 	bl	8011c7e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011c62:	69f8      	ldr	r0, [r7, #28]
 8011c64:	f000 f8a0 	bl	8011da8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011c68:	2301      	movs	r3, #1
 8011c6a:	61bb      	str	r3, [r7, #24]
 8011c6c:	e002      	b.n	8011c74 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8011c72:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011c74:	69bb      	ldr	r3, [r7, #24]
	}
 8011c76:	4618      	mov	r0, r3
 8011c78:	3720      	adds	r7, #32
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	bd80      	pop	{r7, pc}

08011c7e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011c7e:	b580      	push	{r7, lr}
 8011c80:	b088      	sub	sp, #32
 8011c82:	af00      	add	r7, sp, #0
 8011c84:	60f8      	str	r0, [r7, #12]
 8011c86:	60b9      	str	r1, [r7, #8]
 8011c88:	607a      	str	r2, [r7, #4]
 8011c8a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c8e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	009b      	lsls	r3, r3, #2
 8011c94:	461a      	mov	r2, r3
 8011c96:	21a5      	movs	r1, #165	@ 0xa5
 8011c98:	f001 fe82 	bl	80139a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011ca0:	6879      	ldr	r1, [r7, #4]
 8011ca2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8011ca6:	440b      	add	r3, r1
 8011ca8:	009b      	lsls	r3, r3, #2
 8011caa:	4413      	add	r3, r2
 8011cac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011cae:	69bb      	ldr	r3, [r7, #24]
 8011cb0:	f023 0307 	bic.w	r3, r3, #7
 8011cb4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011cb6:	69bb      	ldr	r3, [r7, #24]
 8011cb8:	f003 0307 	and.w	r3, r3, #7
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d00d      	beq.n	8011cdc <prvInitialiseNewTask+0x5e>
	__asm volatile
 8011cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cc4:	b672      	cpsid	i
 8011cc6:	f383 8811 	msr	BASEPRI, r3
 8011cca:	f3bf 8f6f 	isb	sy
 8011cce:	f3bf 8f4f 	dsb	sy
 8011cd2:	b662      	cpsie	i
 8011cd4:	617b      	str	r3, [r7, #20]
}
 8011cd6:	bf00      	nop
 8011cd8:	bf00      	nop
 8011cda:	e7fd      	b.n	8011cd8 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011cdc:	68bb      	ldr	r3, [r7, #8]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d01f      	beq.n	8011d22 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	61fb      	str	r3, [r7, #28]
 8011ce6:	e012      	b.n	8011d0e <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011ce8:	68ba      	ldr	r2, [r7, #8]
 8011cea:	69fb      	ldr	r3, [r7, #28]
 8011cec:	4413      	add	r3, r2
 8011cee:	7819      	ldrb	r1, [r3, #0]
 8011cf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011cf2:	69fb      	ldr	r3, [r7, #28]
 8011cf4:	4413      	add	r3, r2
 8011cf6:	3334      	adds	r3, #52	@ 0x34
 8011cf8:	460a      	mov	r2, r1
 8011cfa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011cfc:	68ba      	ldr	r2, [r7, #8]
 8011cfe:	69fb      	ldr	r3, [r7, #28]
 8011d00:	4413      	add	r3, r2
 8011d02:	781b      	ldrb	r3, [r3, #0]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d006      	beq.n	8011d16 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011d08:	69fb      	ldr	r3, [r7, #28]
 8011d0a:	3301      	adds	r3, #1
 8011d0c:	61fb      	str	r3, [r7, #28]
 8011d0e:	69fb      	ldr	r3, [r7, #28]
 8011d10:	2b0f      	cmp	r3, #15
 8011d12:	d9e9      	bls.n	8011ce8 <prvInitialiseNewTask+0x6a>
 8011d14:	e000      	b.n	8011d18 <prvInitialiseNewTask+0x9a>
			{
				break;
 8011d16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011d20:	e003      	b.n	8011d2a <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d24:	2200      	movs	r2, #0
 8011d26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d2c:	2b06      	cmp	r3, #6
 8011d2e:	d901      	bls.n	8011d34 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011d30:	2306      	movs	r3, #6
 8011d32:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011d38:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011d3e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8011d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d42:	2200      	movs	r2, #0
 8011d44:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d48:	3304      	adds	r3, #4
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	f7ff f892 	bl	8010e74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d52:	3318      	adds	r3, #24
 8011d54:	4618      	mov	r0, r3
 8011d56:	f7ff f88d 	bl	8010e74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011d5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d62:	f1c3 0207 	rsb	r2, r3, #7
 8011d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011d6e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8011d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d72:	2200      	movs	r2, #0
 8011d74:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d78:	2200      	movs	r2, #0
 8011d7a:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d7e:	2200      	movs	r2, #0
 8011d80:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011d84:	683a      	ldr	r2, [r7, #0]
 8011d86:	68f9      	ldr	r1, [r7, #12]
 8011d88:	69b8      	ldr	r0, [r7, #24]
 8011d8a:	f000 fe27 	bl	80129dc <pxPortInitialiseStack>
 8011d8e:	4602      	mov	r2, r0
 8011d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d92:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d002      	beq.n	8011da0 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011d9e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011da0:	bf00      	nop
 8011da2:	3720      	adds	r7, #32
 8011da4:	46bd      	mov	sp, r7
 8011da6:	bd80      	pop	{r7, pc}

08011da8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b082      	sub	sp, #8
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011db0:	f000 ff24 	bl	8012bfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011db4:	4b2a      	ldr	r3, [pc, #168]	@ (8011e60 <prvAddNewTaskToReadyList+0xb8>)
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	3301      	adds	r3, #1
 8011dba:	4a29      	ldr	r2, [pc, #164]	@ (8011e60 <prvAddNewTaskToReadyList+0xb8>)
 8011dbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011dbe:	4b29      	ldr	r3, [pc, #164]	@ (8011e64 <prvAddNewTaskToReadyList+0xbc>)
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d109      	bne.n	8011dda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011dc6:	4a27      	ldr	r2, [pc, #156]	@ (8011e64 <prvAddNewTaskToReadyList+0xbc>)
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011dcc:	4b24      	ldr	r3, [pc, #144]	@ (8011e60 <prvAddNewTaskToReadyList+0xb8>)
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	2b01      	cmp	r3, #1
 8011dd2:	d110      	bne.n	8011df6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011dd4:	f000 fc32 	bl	801263c <prvInitialiseTaskLists>
 8011dd8:	e00d      	b.n	8011df6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011dda:	4b23      	ldr	r3, [pc, #140]	@ (8011e68 <prvAddNewTaskToReadyList+0xc0>)
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d109      	bne.n	8011df6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011de2:	4b20      	ldr	r3, [pc, #128]	@ (8011e64 <prvAddNewTaskToReadyList+0xbc>)
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011dec:	429a      	cmp	r2, r3
 8011dee:	d802      	bhi.n	8011df6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011df0:	4a1c      	ldr	r2, [pc, #112]	@ (8011e64 <prvAddNewTaskToReadyList+0xbc>)
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011df6:	4b1d      	ldr	r3, [pc, #116]	@ (8011e6c <prvAddNewTaskToReadyList+0xc4>)
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	3301      	adds	r3, #1
 8011dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8011e6c <prvAddNewTaskToReadyList+0xc4>)
 8011dfe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e04:	2201      	movs	r2, #1
 8011e06:	409a      	lsls	r2, r3
 8011e08:	4b19      	ldr	r3, [pc, #100]	@ (8011e70 <prvAddNewTaskToReadyList+0xc8>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	4313      	orrs	r3, r2
 8011e0e:	4a18      	ldr	r2, [pc, #96]	@ (8011e70 <prvAddNewTaskToReadyList+0xc8>)
 8011e10:	6013      	str	r3, [r2, #0]
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e16:	4613      	mov	r3, r2
 8011e18:	009b      	lsls	r3, r3, #2
 8011e1a:	4413      	add	r3, r2
 8011e1c:	009b      	lsls	r3, r3, #2
 8011e1e:	4a15      	ldr	r2, [pc, #84]	@ (8011e74 <prvAddNewTaskToReadyList+0xcc>)
 8011e20:	441a      	add	r2, r3
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	3304      	adds	r3, #4
 8011e26:	4619      	mov	r1, r3
 8011e28:	4610      	mov	r0, r2
 8011e2a:	f7ff f830 	bl	8010e8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011e2e:	f000 ff1b 	bl	8012c68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011e32:	4b0d      	ldr	r3, [pc, #52]	@ (8011e68 <prvAddNewTaskToReadyList+0xc0>)
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d00e      	beq.n	8011e58 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8011e64 <prvAddNewTaskToReadyList+0xbc>)
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e44:	429a      	cmp	r2, r3
 8011e46:	d207      	bcs.n	8011e58 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011e48:	4b0b      	ldr	r3, [pc, #44]	@ (8011e78 <prvAddNewTaskToReadyList+0xd0>)
 8011e4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011e4e:	601a      	str	r2, [r3, #0]
 8011e50:	f3bf 8f4f 	dsb	sy
 8011e54:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011e58:	bf00      	nop
 8011e5a:	3708      	adds	r7, #8
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bd80      	pop	{r7, pc}
 8011e60:	20000e9c 	.word	0x20000e9c
 8011e64:	20000d9c 	.word	0x20000d9c
 8011e68:	20000ea8 	.word	0x20000ea8
 8011e6c:	20000eb8 	.word	0x20000eb8
 8011e70:	20000ea4 	.word	0x20000ea4
 8011e74:	20000da0 	.word	0x20000da0
 8011e78:	e000ed04 	.word	0xe000ed04

08011e7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b084      	sub	sp, #16
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011e84:	2300      	movs	r3, #0
 8011e86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d01a      	beq.n	8011ec4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011e8e:	4b15      	ldr	r3, [pc, #84]	@ (8011ee4 <vTaskDelay+0x68>)
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d00d      	beq.n	8011eb2 <vTaskDelay+0x36>
	__asm volatile
 8011e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e9a:	b672      	cpsid	i
 8011e9c:	f383 8811 	msr	BASEPRI, r3
 8011ea0:	f3bf 8f6f 	isb	sy
 8011ea4:	f3bf 8f4f 	dsb	sy
 8011ea8:	b662      	cpsie	i
 8011eaa:	60bb      	str	r3, [r7, #8]
}
 8011eac:	bf00      	nop
 8011eae:	bf00      	nop
 8011eb0:	e7fd      	b.n	8011eae <vTaskDelay+0x32>
			vTaskSuspendAll();
 8011eb2:	f000 f881 	bl	8011fb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011eb6:	2100      	movs	r1, #0
 8011eb8:	6878      	ldr	r0, [r7, #4]
 8011eba:	f000 fd29 	bl	8012910 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011ebe:	f000 f889 	bl	8011fd4 <xTaskResumeAll>
 8011ec2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d107      	bne.n	8011eda <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8011eca:	4b07      	ldr	r3, [pc, #28]	@ (8011ee8 <vTaskDelay+0x6c>)
 8011ecc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011ed0:	601a      	str	r2, [r3, #0]
 8011ed2:	f3bf 8f4f 	dsb	sy
 8011ed6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011eda:	bf00      	nop
 8011edc:	3710      	adds	r7, #16
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	bd80      	pop	{r7, pc}
 8011ee2:	bf00      	nop
 8011ee4:	20000ec4 	.word	0x20000ec4
 8011ee8:	e000ed04 	.word	0xe000ed04

08011eec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b08a      	sub	sp, #40	@ 0x28
 8011ef0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011efa:	463a      	mov	r2, r7
 8011efc:	1d39      	adds	r1, r7, #4
 8011efe:	f107 0308 	add.w	r3, r7, #8
 8011f02:	4618      	mov	r0, r3
 8011f04:	f7ee fb34 	bl	8000570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011f08:	6839      	ldr	r1, [r7, #0]
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	68ba      	ldr	r2, [r7, #8]
 8011f0e:	9202      	str	r2, [sp, #8]
 8011f10:	9301      	str	r3, [sp, #4]
 8011f12:	2300      	movs	r3, #0
 8011f14:	9300      	str	r3, [sp, #0]
 8011f16:	2300      	movs	r3, #0
 8011f18:	460a      	mov	r2, r1
 8011f1a:	4921      	ldr	r1, [pc, #132]	@ (8011fa0 <vTaskStartScheduler+0xb4>)
 8011f1c:	4821      	ldr	r0, [pc, #132]	@ (8011fa4 <vTaskStartScheduler+0xb8>)
 8011f1e:	f7ff fe03 	bl	8011b28 <xTaskCreateStatic>
 8011f22:	4603      	mov	r3, r0
 8011f24:	4a20      	ldr	r2, [pc, #128]	@ (8011fa8 <vTaskStartScheduler+0xbc>)
 8011f26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011f28:	4b1f      	ldr	r3, [pc, #124]	@ (8011fa8 <vTaskStartScheduler+0xbc>)
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d002      	beq.n	8011f36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011f30:	2301      	movs	r3, #1
 8011f32:	617b      	str	r3, [r7, #20]
 8011f34:	e001      	b.n	8011f3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011f36:	2300      	movs	r3, #0
 8011f38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011f3a:	697b      	ldr	r3, [r7, #20]
 8011f3c:	2b01      	cmp	r3, #1
 8011f3e:	d118      	bne.n	8011f72 <vTaskStartScheduler+0x86>
	__asm volatile
 8011f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f44:	b672      	cpsid	i
 8011f46:	f383 8811 	msr	BASEPRI, r3
 8011f4a:	f3bf 8f6f 	isb	sy
 8011f4e:	f3bf 8f4f 	dsb	sy
 8011f52:	b662      	cpsie	i
 8011f54:	613b      	str	r3, [r7, #16]
}
 8011f56:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011f58:	4b14      	ldr	r3, [pc, #80]	@ (8011fac <vTaskStartScheduler+0xc0>)
 8011f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8011f5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011f60:	4b13      	ldr	r3, [pc, #76]	@ (8011fb0 <vTaskStartScheduler+0xc4>)
 8011f62:	2201      	movs	r2, #1
 8011f64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011f66:	4b13      	ldr	r3, [pc, #76]	@ (8011fb4 <vTaskStartScheduler+0xc8>)
 8011f68:	2200      	movs	r2, #0
 8011f6a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011f6c:	f000 fdc8 	bl	8012b00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011f70:	e011      	b.n	8011f96 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011f72:	697b      	ldr	r3, [r7, #20]
 8011f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f78:	d10d      	bne.n	8011f96 <vTaskStartScheduler+0xaa>
	__asm volatile
 8011f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f7e:	b672      	cpsid	i
 8011f80:	f383 8811 	msr	BASEPRI, r3
 8011f84:	f3bf 8f6f 	isb	sy
 8011f88:	f3bf 8f4f 	dsb	sy
 8011f8c:	b662      	cpsie	i
 8011f8e:	60fb      	str	r3, [r7, #12]
}
 8011f90:	bf00      	nop
 8011f92:	bf00      	nop
 8011f94:	e7fd      	b.n	8011f92 <vTaskStartScheduler+0xa6>
}
 8011f96:	bf00      	nop
 8011f98:	3718      	adds	r7, #24
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	bd80      	pop	{r7, pc}
 8011f9e:	bf00      	nop
 8011fa0:	08013b64 	.word	0x08013b64
 8011fa4:	08012609 	.word	0x08012609
 8011fa8:	20000ec0 	.word	0x20000ec0
 8011fac:	20000ebc 	.word	0x20000ebc
 8011fb0:	20000ea8 	.word	0x20000ea8
 8011fb4:	20000ea0 	.word	0x20000ea0

08011fb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011fb8:	b480      	push	{r7}
 8011fba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011fbc:	4b04      	ldr	r3, [pc, #16]	@ (8011fd0 <vTaskSuspendAll+0x18>)
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	3301      	adds	r3, #1
 8011fc2:	4a03      	ldr	r2, [pc, #12]	@ (8011fd0 <vTaskSuspendAll+0x18>)
 8011fc4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8011fc6:	bf00      	nop
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fce:	4770      	bx	lr
 8011fd0:	20000ec4 	.word	0x20000ec4

08011fd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011fd4:	b580      	push	{r7, lr}
 8011fd6:	b084      	sub	sp, #16
 8011fd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011fda:	2300      	movs	r3, #0
 8011fdc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011fde:	2300      	movs	r3, #0
 8011fe0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011fe2:	4b43      	ldr	r3, [pc, #268]	@ (80120f0 <xTaskResumeAll+0x11c>)
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d10d      	bne.n	8012006 <xTaskResumeAll+0x32>
	__asm volatile
 8011fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fee:	b672      	cpsid	i
 8011ff0:	f383 8811 	msr	BASEPRI, r3
 8011ff4:	f3bf 8f6f 	isb	sy
 8011ff8:	f3bf 8f4f 	dsb	sy
 8011ffc:	b662      	cpsie	i
 8011ffe:	603b      	str	r3, [r7, #0]
}
 8012000:	bf00      	nop
 8012002:	bf00      	nop
 8012004:	e7fd      	b.n	8012002 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012006:	f000 fdf9 	bl	8012bfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801200a:	4b39      	ldr	r3, [pc, #228]	@ (80120f0 <xTaskResumeAll+0x11c>)
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	3b01      	subs	r3, #1
 8012010:	4a37      	ldr	r2, [pc, #220]	@ (80120f0 <xTaskResumeAll+0x11c>)
 8012012:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012014:	4b36      	ldr	r3, [pc, #216]	@ (80120f0 <xTaskResumeAll+0x11c>)
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d161      	bne.n	80120e0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801201c:	4b35      	ldr	r3, [pc, #212]	@ (80120f4 <xTaskResumeAll+0x120>)
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d05d      	beq.n	80120e0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012024:	e02e      	b.n	8012084 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012026:	4b34      	ldr	r3, [pc, #208]	@ (80120f8 <xTaskResumeAll+0x124>)
 8012028:	68db      	ldr	r3, [r3, #12]
 801202a:	68db      	ldr	r3, [r3, #12]
 801202c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	3318      	adds	r3, #24
 8012032:	4618      	mov	r0, r3
 8012034:	f7fe ff88 	bl	8010f48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	3304      	adds	r3, #4
 801203c:	4618      	mov	r0, r3
 801203e:	f7fe ff83 	bl	8010f48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012046:	2201      	movs	r2, #1
 8012048:	409a      	lsls	r2, r3
 801204a:	4b2c      	ldr	r3, [pc, #176]	@ (80120fc <xTaskResumeAll+0x128>)
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	4313      	orrs	r3, r2
 8012050:	4a2a      	ldr	r2, [pc, #168]	@ (80120fc <xTaskResumeAll+0x128>)
 8012052:	6013      	str	r3, [r2, #0]
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012058:	4613      	mov	r3, r2
 801205a:	009b      	lsls	r3, r3, #2
 801205c:	4413      	add	r3, r2
 801205e:	009b      	lsls	r3, r3, #2
 8012060:	4a27      	ldr	r2, [pc, #156]	@ (8012100 <xTaskResumeAll+0x12c>)
 8012062:	441a      	add	r2, r3
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	3304      	adds	r3, #4
 8012068:	4619      	mov	r1, r3
 801206a:	4610      	mov	r0, r2
 801206c:	f7fe ff0f 	bl	8010e8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012074:	4b23      	ldr	r3, [pc, #140]	@ (8012104 <xTaskResumeAll+0x130>)
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801207a:	429a      	cmp	r2, r3
 801207c:	d302      	bcc.n	8012084 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 801207e:	4b22      	ldr	r3, [pc, #136]	@ (8012108 <xTaskResumeAll+0x134>)
 8012080:	2201      	movs	r2, #1
 8012082:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012084:	4b1c      	ldr	r3, [pc, #112]	@ (80120f8 <xTaskResumeAll+0x124>)
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d1cc      	bne.n	8012026 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d001      	beq.n	8012096 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012092:	f000 fb73 	bl	801277c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012096:	4b1d      	ldr	r3, [pc, #116]	@ (801210c <xTaskResumeAll+0x138>)
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d010      	beq.n	80120c4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80120a2:	f000 f859 	bl	8012158 <xTaskIncrementTick>
 80120a6:	4603      	mov	r3, r0
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d002      	beq.n	80120b2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80120ac:	4b16      	ldr	r3, [pc, #88]	@ (8012108 <xTaskResumeAll+0x134>)
 80120ae:	2201      	movs	r2, #1
 80120b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	3b01      	subs	r3, #1
 80120b6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d1f1      	bne.n	80120a2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80120be:	4b13      	ldr	r3, [pc, #76]	@ (801210c <xTaskResumeAll+0x138>)
 80120c0:	2200      	movs	r2, #0
 80120c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80120c4:	4b10      	ldr	r3, [pc, #64]	@ (8012108 <xTaskResumeAll+0x134>)
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d009      	beq.n	80120e0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80120cc:	2301      	movs	r3, #1
 80120ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80120d0:	4b0f      	ldr	r3, [pc, #60]	@ (8012110 <xTaskResumeAll+0x13c>)
 80120d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80120d6:	601a      	str	r2, [r3, #0]
 80120d8:	f3bf 8f4f 	dsb	sy
 80120dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80120e0:	f000 fdc2 	bl	8012c68 <vPortExitCritical>

	return xAlreadyYielded;
 80120e4:	68bb      	ldr	r3, [r7, #8]
}
 80120e6:	4618      	mov	r0, r3
 80120e8:	3710      	adds	r7, #16
 80120ea:	46bd      	mov	sp, r7
 80120ec:	bd80      	pop	{r7, pc}
 80120ee:	bf00      	nop
 80120f0:	20000ec4 	.word	0x20000ec4
 80120f4:	20000e9c 	.word	0x20000e9c
 80120f8:	20000e5c 	.word	0x20000e5c
 80120fc:	20000ea4 	.word	0x20000ea4
 8012100:	20000da0 	.word	0x20000da0
 8012104:	20000d9c 	.word	0x20000d9c
 8012108:	20000eb0 	.word	0x20000eb0
 801210c:	20000eac 	.word	0x20000eac
 8012110:	e000ed04 	.word	0xe000ed04

08012114 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012114:	b480      	push	{r7}
 8012116:	b083      	sub	sp, #12
 8012118:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801211a:	4b05      	ldr	r3, [pc, #20]	@ (8012130 <xTaskGetTickCount+0x1c>)
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012120:	687b      	ldr	r3, [r7, #4]
}
 8012122:	4618      	mov	r0, r3
 8012124:	370c      	adds	r7, #12
 8012126:	46bd      	mov	sp, r7
 8012128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212c:	4770      	bx	lr
 801212e:	bf00      	nop
 8012130:	20000ea0 	.word	0x20000ea0

08012134 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b082      	sub	sp, #8
 8012138:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801213a:	f000 fe47 	bl	8012dcc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801213e:	2300      	movs	r3, #0
 8012140:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8012142:	4b04      	ldr	r3, [pc, #16]	@ (8012154 <xTaskGetTickCountFromISR+0x20>)
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012148:	683b      	ldr	r3, [r7, #0]
}
 801214a:	4618      	mov	r0, r3
 801214c:	3708      	adds	r7, #8
 801214e:	46bd      	mov	sp, r7
 8012150:	bd80      	pop	{r7, pc}
 8012152:	bf00      	nop
 8012154:	20000ea0 	.word	0x20000ea0

08012158 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b086      	sub	sp, #24
 801215c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801215e:	2300      	movs	r3, #0
 8012160:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012162:	4b50      	ldr	r3, [pc, #320]	@ (80122a4 <xTaskIncrementTick+0x14c>)
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	2b00      	cmp	r3, #0
 8012168:	f040 808b 	bne.w	8012282 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801216c:	4b4e      	ldr	r3, [pc, #312]	@ (80122a8 <xTaskIncrementTick+0x150>)
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	3301      	adds	r3, #1
 8012172:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012174:	4a4c      	ldr	r2, [pc, #304]	@ (80122a8 <xTaskIncrementTick+0x150>)
 8012176:	693b      	ldr	r3, [r7, #16]
 8012178:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801217a:	693b      	ldr	r3, [r7, #16]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d123      	bne.n	80121c8 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8012180:	4b4a      	ldr	r3, [pc, #296]	@ (80122ac <xTaskIncrementTick+0x154>)
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d00d      	beq.n	80121a6 <xTaskIncrementTick+0x4e>
	__asm volatile
 801218a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801218e:	b672      	cpsid	i
 8012190:	f383 8811 	msr	BASEPRI, r3
 8012194:	f3bf 8f6f 	isb	sy
 8012198:	f3bf 8f4f 	dsb	sy
 801219c:	b662      	cpsie	i
 801219e:	603b      	str	r3, [r7, #0]
}
 80121a0:	bf00      	nop
 80121a2:	bf00      	nop
 80121a4:	e7fd      	b.n	80121a2 <xTaskIncrementTick+0x4a>
 80121a6:	4b41      	ldr	r3, [pc, #260]	@ (80122ac <xTaskIncrementTick+0x154>)
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	60fb      	str	r3, [r7, #12]
 80121ac:	4b40      	ldr	r3, [pc, #256]	@ (80122b0 <xTaskIncrementTick+0x158>)
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	4a3e      	ldr	r2, [pc, #248]	@ (80122ac <xTaskIncrementTick+0x154>)
 80121b2:	6013      	str	r3, [r2, #0]
 80121b4:	4a3e      	ldr	r2, [pc, #248]	@ (80122b0 <xTaskIncrementTick+0x158>)
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	6013      	str	r3, [r2, #0]
 80121ba:	4b3e      	ldr	r3, [pc, #248]	@ (80122b4 <xTaskIncrementTick+0x15c>)
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	3301      	adds	r3, #1
 80121c0:	4a3c      	ldr	r2, [pc, #240]	@ (80122b4 <xTaskIncrementTick+0x15c>)
 80121c2:	6013      	str	r3, [r2, #0]
 80121c4:	f000 fada 	bl	801277c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80121c8:	4b3b      	ldr	r3, [pc, #236]	@ (80122b8 <xTaskIncrementTick+0x160>)
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	693a      	ldr	r2, [r7, #16]
 80121ce:	429a      	cmp	r2, r3
 80121d0:	d348      	bcc.n	8012264 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80121d2:	4b36      	ldr	r3, [pc, #216]	@ (80122ac <xTaskIncrementTick+0x154>)
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d104      	bne.n	80121e6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121dc:	4b36      	ldr	r3, [pc, #216]	@ (80122b8 <xTaskIncrementTick+0x160>)
 80121de:	f04f 32ff 	mov.w	r2, #4294967295
 80121e2:	601a      	str	r2, [r3, #0]
					break;
 80121e4:	e03e      	b.n	8012264 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80121e6:	4b31      	ldr	r3, [pc, #196]	@ (80122ac <xTaskIncrementTick+0x154>)
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	68db      	ldr	r3, [r3, #12]
 80121ec:	68db      	ldr	r3, [r3, #12]
 80121ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80121f0:	68bb      	ldr	r3, [r7, #8]
 80121f2:	685b      	ldr	r3, [r3, #4]
 80121f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80121f6:	693a      	ldr	r2, [r7, #16]
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	429a      	cmp	r2, r3
 80121fc:	d203      	bcs.n	8012206 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80121fe:	4a2e      	ldr	r2, [pc, #184]	@ (80122b8 <xTaskIncrementTick+0x160>)
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012204:	e02e      	b.n	8012264 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012206:	68bb      	ldr	r3, [r7, #8]
 8012208:	3304      	adds	r3, #4
 801220a:	4618      	mov	r0, r3
 801220c:	f7fe fe9c 	bl	8010f48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012210:	68bb      	ldr	r3, [r7, #8]
 8012212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012214:	2b00      	cmp	r3, #0
 8012216:	d004      	beq.n	8012222 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012218:	68bb      	ldr	r3, [r7, #8]
 801221a:	3318      	adds	r3, #24
 801221c:	4618      	mov	r0, r3
 801221e:	f7fe fe93 	bl	8010f48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012222:	68bb      	ldr	r3, [r7, #8]
 8012224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012226:	2201      	movs	r2, #1
 8012228:	409a      	lsls	r2, r3
 801222a:	4b24      	ldr	r3, [pc, #144]	@ (80122bc <xTaskIncrementTick+0x164>)
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	4313      	orrs	r3, r2
 8012230:	4a22      	ldr	r2, [pc, #136]	@ (80122bc <xTaskIncrementTick+0x164>)
 8012232:	6013      	str	r3, [r2, #0]
 8012234:	68bb      	ldr	r3, [r7, #8]
 8012236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012238:	4613      	mov	r3, r2
 801223a:	009b      	lsls	r3, r3, #2
 801223c:	4413      	add	r3, r2
 801223e:	009b      	lsls	r3, r3, #2
 8012240:	4a1f      	ldr	r2, [pc, #124]	@ (80122c0 <xTaskIncrementTick+0x168>)
 8012242:	441a      	add	r2, r3
 8012244:	68bb      	ldr	r3, [r7, #8]
 8012246:	3304      	adds	r3, #4
 8012248:	4619      	mov	r1, r3
 801224a:	4610      	mov	r0, r2
 801224c:	f7fe fe1f 	bl	8010e8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012250:	68bb      	ldr	r3, [r7, #8]
 8012252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012254:	4b1b      	ldr	r3, [pc, #108]	@ (80122c4 <xTaskIncrementTick+0x16c>)
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801225a:	429a      	cmp	r2, r3
 801225c:	d3b9      	bcc.n	80121d2 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 801225e:	2301      	movs	r3, #1
 8012260:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012262:	e7b6      	b.n	80121d2 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012264:	4b17      	ldr	r3, [pc, #92]	@ (80122c4 <xTaskIncrementTick+0x16c>)
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801226a:	4915      	ldr	r1, [pc, #84]	@ (80122c0 <xTaskIncrementTick+0x168>)
 801226c:	4613      	mov	r3, r2
 801226e:	009b      	lsls	r3, r3, #2
 8012270:	4413      	add	r3, r2
 8012272:	009b      	lsls	r3, r3, #2
 8012274:	440b      	add	r3, r1
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	2b01      	cmp	r3, #1
 801227a:	d907      	bls.n	801228c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 801227c:	2301      	movs	r3, #1
 801227e:	617b      	str	r3, [r7, #20]
 8012280:	e004      	b.n	801228c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012282:	4b11      	ldr	r3, [pc, #68]	@ (80122c8 <xTaskIncrementTick+0x170>)
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	3301      	adds	r3, #1
 8012288:	4a0f      	ldr	r2, [pc, #60]	@ (80122c8 <xTaskIncrementTick+0x170>)
 801228a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801228c:	4b0f      	ldr	r3, [pc, #60]	@ (80122cc <xTaskIncrementTick+0x174>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d001      	beq.n	8012298 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8012294:	2301      	movs	r3, #1
 8012296:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012298:	697b      	ldr	r3, [r7, #20]
}
 801229a:	4618      	mov	r0, r3
 801229c:	3718      	adds	r7, #24
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}
 80122a2:	bf00      	nop
 80122a4:	20000ec4 	.word	0x20000ec4
 80122a8:	20000ea0 	.word	0x20000ea0
 80122ac:	20000e54 	.word	0x20000e54
 80122b0:	20000e58 	.word	0x20000e58
 80122b4:	20000eb4 	.word	0x20000eb4
 80122b8:	20000ebc 	.word	0x20000ebc
 80122bc:	20000ea4 	.word	0x20000ea4
 80122c0:	20000da0 	.word	0x20000da0
 80122c4:	20000d9c 	.word	0x20000d9c
 80122c8:	20000eac 	.word	0x20000eac
 80122cc:	20000eb0 	.word	0x20000eb0

080122d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b088      	sub	sp, #32
 80122d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80122d6:	4b3b      	ldr	r3, [pc, #236]	@ (80123c4 <vTaskSwitchContext+0xf4>)
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d003      	beq.n	80122e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80122de:	4b3a      	ldr	r3, [pc, #232]	@ (80123c8 <vTaskSwitchContext+0xf8>)
 80122e0:	2201      	movs	r2, #1
 80122e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80122e4:	e069      	b.n	80123ba <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 80122e6:	4b38      	ldr	r3, [pc, #224]	@ (80123c8 <vTaskSwitchContext+0xf8>)
 80122e8:	2200      	movs	r2, #0
 80122ea:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80122ec:	4b37      	ldr	r3, [pc, #220]	@ (80123cc <vTaskSwitchContext+0xfc>)
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80122f2:	61fb      	str	r3, [r7, #28]
 80122f4:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 80122f8:	61bb      	str	r3, [r7, #24]
 80122fa:	69fb      	ldr	r3, [r7, #28]
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	69ba      	ldr	r2, [r7, #24]
 8012300:	429a      	cmp	r2, r3
 8012302:	d111      	bne.n	8012328 <vTaskSwitchContext+0x58>
 8012304:	69fb      	ldr	r3, [r7, #28]
 8012306:	3304      	adds	r3, #4
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	69ba      	ldr	r2, [r7, #24]
 801230c:	429a      	cmp	r2, r3
 801230e:	d10b      	bne.n	8012328 <vTaskSwitchContext+0x58>
 8012310:	69fb      	ldr	r3, [r7, #28]
 8012312:	3308      	adds	r3, #8
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	69ba      	ldr	r2, [r7, #24]
 8012318:	429a      	cmp	r2, r3
 801231a:	d105      	bne.n	8012328 <vTaskSwitchContext+0x58>
 801231c:	69fb      	ldr	r3, [r7, #28]
 801231e:	330c      	adds	r3, #12
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	69ba      	ldr	r2, [r7, #24]
 8012324:	429a      	cmp	r2, r3
 8012326:	d008      	beq.n	801233a <vTaskSwitchContext+0x6a>
 8012328:	4b28      	ldr	r3, [pc, #160]	@ (80123cc <vTaskSwitchContext+0xfc>)
 801232a:	681a      	ldr	r2, [r3, #0]
 801232c:	4b27      	ldr	r3, [pc, #156]	@ (80123cc <vTaskSwitchContext+0xfc>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	3334      	adds	r3, #52	@ 0x34
 8012332:	4619      	mov	r1, r3
 8012334:	4610      	mov	r0, r2
 8012336:	f7ee f908 	bl	800054a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801233a:	4b25      	ldr	r3, [pc, #148]	@ (80123d0 <vTaskSwitchContext+0x100>)
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	fab3 f383 	clz	r3, r3
 8012346:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012348:	7afb      	ldrb	r3, [r7, #11]
 801234a:	f1c3 031f 	rsb	r3, r3, #31
 801234e:	617b      	str	r3, [r7, #20]
 8012350:	4920      	ldr	r1, [pc, #128]	@ (80123d4 <vTaskSwitchContext+0x104>)
 8012352:	697a      	ldr	r2, [r7, #20]
 8012354:	4613      	mov	r3, r2
 8012356:	009b      	lsls	r3, r3, #2
 8012358:	4413      	add	r3, r2
 801235a:	009b      	lsls	r3, r3, #2
 801235c:	440b      	add	r3, r1
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d10d      	bne.n	8012380 <vTaskSwitchContext+0xb0>
	__asm volatile
 8012364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012368:	b672      	cpsid	i
 801236a:	f383 8811 	msr	BASEPRI, r3
 801236e:	f3bf 8f6f 	isb	sy
 8012372:	f3bf 8f4f 	dsb	sy
 8012376:	b662      	cpsie	i
 8012378:	607b      	str	r3, [r7, #4]
}
 801237a:	bf00      	nop
 801237c:	bf00      	nop
 801237e:	e7fd      	b.n	801237c <vTaskSwitchContext+0xac>
 8012380:	697a      	ldr	r2, [r7, #20]
 8012382:	4613      	mov	r3, r2
 8012384:	009b      	lsls	r3, r3, #2
 8012386:	4413      	add	r3, r2
 8012388:	009b      	lsls	r3, r3, #2
 801238a:	4a12      	ldr	r2, [pc, #72]	@ (80123d4 <vTaskSwitchContext+0x104>)
 801238c:	4413      	add	r3, r2
 801238e:	613b      	str	r3, [r7, #16]
 8012390:	693b      	ldr	r3, [r7, #16]
 8012392:	685b      	ldr	r3, [r3, #4]
 8012394:	685a      	ldr	r2, [r3, #4]
 8012396:	693b      	ldr	r3, [r7, #16]
 8012398:	605a      	str	r2, [r3, #4]
 801239a:	693b      	ldr	r3, [r7, #16]
 801239c:	685a      	ldr	r2, [r3, #4]
 801239e:	693b      	ldr	r3, [r7, #16]
 80123a0:	3308      	adds	r3, #8
 80123a2:	429a      	cmp	r2, r3
 80123a4:	d104      	bne.n	80123b0 <vTaskSwitchContext+0xe0>
 80123a6:	693b      	ldr	r3, [r7, #16]
 80123a8:	685b      	ldr	r3, [r3, #4]
 80123aa:	685a      	ldr	r2, [r3, #4]
 80123ac:	693b      	ldr	r3, [r7, #16]
 80123ae:	605a      	str	r2, [r3, #4]
 80123b0:	693b      	ldr	r3, [r7, #16]
 80123b2:	685b      	ldr	r3, [r3, #4]
 80123b4:	68db      	ldr	r3, [r3, #12]
 80123b6:	4a05      	ldr	r2, [pc, #20]	@ (80123cc <vTaskSwitchContext+0xfc>)
 80123b8:	6013      	str	r3, [r2, #0]
}
 80123ba:	bf00      	nop
 80123bc:	3720      	adds	r7, #32
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd80      	pop	{r7, pc}
 80123c2:	bf00      	nop
 80123c4:	20000ec4 	.word	0x20000ec4
 80123c8:	20000eb0 	.word	0x20000eb0
 80123cc:	20000d9c 	.word	0x20000d9c
 80123d0:	20000ea4 	.word	0x20000ea4
 80123d4:	20000da0 	.word	0x20000da0

080123d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b084      	sub	sp, #16
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
 80123e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d10d      	bne.n	8012404 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80123e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123ec:	b672      	cpsid	i
 80123ee:	f383 8811 	msr	BASEPRI, r3
 80123f2:	f3bf 8f6f 	isb	sy
 80123f6:	f3bf 8f4f 	dsb	sy
 80123fa:	b662      	cpsie	i
 80123fc:	60fb      	str	r3, [r7, #12]
}
 80123fe:	bf00      	nop
 8012400:	bf00      	nop
 8012402:	e7fd      	b.n	8012400 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012404:	4b07      	ldr	r3, [pc, #28]	@ (8012424 <vTaskPlaceOnEventList+0x4c>)
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	3318      	adds	r3, #24
 801240a:	4619      	mov	r1, r3
 801240c:	6878      	ldr	r0, [r7, #4]
 801240e:	f7fe fd62 	bl	8010ed6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012412:	2101      	movs	r1, #1
 8012414:	6838      	ldr	r0, [r7, #0]
 8012416:	f000 fa7b 	bl	8012910 <prvAddCurrentTaskToDelayedList>
}
 801241a:	bf00      	nop
 801241c:	3710      	adds	r7, #16
 801241e:	46bd      	mov	sp, r7
 8012420:	bd80      	pop	{r7, pc}
 8012422:	bf00      	nop
 8012424:	20000d9c 	.word	0x20000d9c

08012428 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b086      	sub	sp, #24
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	68db      	ldr	r3, [r3, #12]
 8012434:	68db      	ldr	r3, [r3, #12]
 8012436:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012438:	693b      	ldr	r3, [r7, #16]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d10d      	bne.n	801245a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 801243e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012442:	b672      	cpsid	i
 8012444:	f383 8811 	msr	BASEPRI, r3
 8012448:	f3bf 8f6f 	isb	sy
 801244c:	f3bf 8f4f 	dsb	sy
 8012450:	b662      	cpsie	i
 8012452:	60fb      	str	r3, [r7, #12]
}
 8012454:	bf00      	nop
 8012456:	bf00      	nop
 8012458:	e7fd      	b.n	8012456 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801245a:	693b      	ldr	r3, [r7, #16]
 801245c:	3318      	adds	r3, #24
 801245e:	4618      	mov	r0, r3
 8012460:	f7fe fd72 	bl	8010f48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012464:	4b1d      	ldr	r3, [pc, #116]	@ (80124dc <xTaskRemoveFromEventList+0xb4>)
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d11c      	bne.n	80124a6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801246c:	693b      	ldr	r3, [r7, #16]
 801246e:	3304      	adds	r3, #4
 8012470:	4618      	mov	r0, r3
 8012472:	f7fe fd69 	bl	8010f48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012476:	693b      	ldr	r3, [r7, #16]
 8012478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801247a:	2201      	movs	r2, #1
 801247c:	409a      	lsls	r2, r3
 801247e:	4b18      	ldr	r3, [pc, #96]	@ (80124e0 <xTaskRemoveFromEventList+0xb8>)
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	4313      	orrs	r3, r2
 8012484:	4a16      	ldr	r2, [pc, #88]	@ (80124e0 <xTaskRemoveFromEventList+0xb8>)
 8012486:	6013      	str	r3, [r2, #0]
 8012488:	693b      	ldr	r3, [r7, #16]
 801248a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801248c:	4613      	mov	r3, r2
 801248e:	009b      	lsls	r3, r3, #2
 8012490:	4413      	add	r3, r2
 8012492:	009b      	lsls	r3, r3, #2
 8012494:	4a13      	ldr	r2, [pc, #76]	@ (80124e4 <xTaskRemoveFromEventList+0xbc>)
 8012496:	441a      	add	r2, r3
 8012498:	693b      	ldr	r3, [r7, #16]
 801249a:	3304      	adds	r3, #4
 801249c:	4619      	mov	r1, r3
 801249e:	4610      	mov	r0, r2
 80124a0:	f7fe fcf5 	bl	8010e8e <vListInsertEnd>
 80124a4:	e005      	b.n	80124b2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80124a6:	693b      	ldr	r3, [r7, #16]
 80124a8:	3318      	adds	r3, #24
 80124aa:	4619      	mov	r1, r3
 80124ac:	480e      	ldr	r0, [pc, #56]	@ (80124e8 <xTaskRemoveFromEventList+0xc0>)
 80124ae:	f7fe fcee 	bl	8010e8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80124b2:	693b      	ldr	r3, [r7, #16]
 80124b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80124b6:	4b0d      	ldr	r3, [pc, #52]	@ (80124ec <xTaskRemoveFromEventList+0xc4>)
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124bc:	429a      	cmp	r2, r3
 80124be:	d905      	bls.n	80124cc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80124c0:	2301      	movs	r3, #1
 80124c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80124c4:	4b0a      	ldr	r3, [pc, #40]	@ (80124f0 <xTaskRemoveFromEventList+0xc8>)
 80124c6:	2201      	movs	r2, #1
 80124c8:	601a      	str	r2, [r3, #0]
 80124ca:	e001      	b.n	80124d0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80124cc:	2300      	movs	r3, #0
 80124ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80124d0:	697b      	ldr	r3, [r7, #20]
}
 80124d2:	4618      	mov	r0, r3
 80124d4:	3718      	adds	r7, #24
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd80      	pop	{r7, pc}
 80124da:	bf00      	nop
 80124dc:	20000ec4 	.word	0x20000ec4
 80124e0:	20000ea4 	.word	0x20000ea4
 80124e4:	20000da0 	.word	0x20000da0
 80124e8:	20000e5c 	.word	0x20000e5c
 80124ec:	20000d9c 	.word	0x20000d9c
 80124f0:	20000eb0 	.word	0x20000eb0

080124f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80124f4:	b480      	push	{r7}
 80124f6:	b083      	sub	sp, #12
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80124fc:	4b06      	ldr	r3, [pc, #24]	@ (8012518 <vTaskInternalSetTimeOutState+0x24>)
 80124fe:	681a      	ldr	r2, [r3, #0]
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012504:	4b05      	ldr	r3, [pc, #20]	@ (801251c <vTaskInternalSetTimeOutState+0x28>)
 8012506:	681a      	ldr	r2, [r3, #0]
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	605a      	str	r2, [r3, #4]
}
 801250c:	bf00      	nop
 801250e:	370c      	adds	r7, #12
 8012510:	46bd      	mov	sp, r7
 8012512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012516:	4770      	bx	lr
 8012518:	20000eb4 	.word	0x20000eb4
 801251c:	20000ea0 	.word	0x20000ea0

08012520 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012520:	b580      	push	{r7, lr}
 8012522:	b088      	sub	sp, #32
 8012524:	af00      	add	r7, sp, #0
 8012526:	6078      	str	r0, [r7, #4]
 8012528:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d10d      	bne.n	801254c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8012530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012534:	b672      	cpsid	i
 8012536:	f383 8811 	msr	BASEPRI, r3
 801253a:	f3bf 8f6f 	isb	sy
 801253e:	f3bf 8f4f 	dsb	sy
 8012542:	b662      	cpsie	i
 8012544:	613b      	str	r3, [r7, #16]
}
 8012546:	bf00      	nop
 8012548:	bf00      	nop
 801254a:	e7fd      	b.n	8012548 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 801254c:	683b      	ldr	r3, [r7, #0]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d10d      	bne.n	801256e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8012552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012556:	b672      	cpsid	i
 8012558:	f383 8811 	msr	BASEPRI, r3
 801255c:	f3bf 8f6f 	isb	sy
 8012560:	f3bf 8f4f 	dsb	sy
 8012564:	b662      	cpsie	i
 8012566:	60fb      	str	r3, [r7, #12]
}
 8012568:	bf00      	nop
 801256a:	bf00      	nop
 801256c:	e7fd      	b.n	801256a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 801256e:	f000 fb45 	bl	8012bfc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012572:	4b1d      	ldr	r3, [pc, #116]	@ (80125e8 <xTaskCheckForTimeOut+0xc8>)
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	685b      	ldr	r3, [r3, #4]
 801257c:	69ba      	ldr	r2, [r7, #24]
 801257e:	1ad3      	subs	r3, r2, r3
 8012580:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012582:	683b      	ldr	r3, [r7, #0]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	f1b3 3fff 	cmp.w	r3, #4294967295
 801258a:	d102      	bne.n	8012592 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801258c:	2300      	movs	r3, #0
 801258e:	61fb      	str	r3, [r7, #28]
 8012590:	e023      	b.n	80125da <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681a      	ldr	r2, [r3, #0]
 8012596:	4b15      	ldr	r3, [pc, #84]	@ (80125ec <xTaskCheckForTimeOut+0xcc>)
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	429a      	cmp	r2, r3
 801259c:	d007      	beq.n	80125ae <xTaskCheckForTimeOut+0x8e>
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	685b      	ldr	r3, [r3, #4]
 80125a2:	69ba      	ldr	r2, [r7, #24]
 80125a4:	429a      	cmp	r2, r3
 80125a6:	d302      	bcc.n	80125ae <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80125a8:	2301      	movs	r3, #1
 80125aa:	61fb      	str	r3, [r7, #28]
 80125ac:	e015      	b.n	80125da <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80125ae:	683b      	ldr	r3, [r7, #0]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	697a      	ldr	r2, [r7, #20]
 80125b4:	429a      	cmp	r2, r3
 80125b6:	d20b      	bcs.n	80125d0 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80125b8:	683b      	ldr	r3, [r7, #0]
 80125ba:	681a      	ldr	r2, [r3, #0]
 80125bc:	697b      	ldr	r3, [r7, #20]
 80125be:	1ad2      	subs	r2, r2, r3
 80125c0:	683b      	ldr	r3, [r7, #0]
 80125c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80125c4:	6878      	ldr	r0, [r7, #4]
 80125c6:	f7ff ff95 	bl	80124f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80125ca:	2300      	movs	r3, #0
 80125cc:	61fb      	str	r3, [r7, #28]
 80125ce:	e004      	b.n	80125da <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80125d0:	683b      	ldr	r3, [r7, #0]
 80125d2:	2200      	movs	r2, #0
 80125d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80125d6:	2301      	movs	r3, #1
 80125d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80125da:	f000 fb45 	bl	8012c68 <vPortExitCritical>

	return xReturn;
 80125de:	69fb      	ldr	r3, [r7, #28]
}
 80125e0:	4618      	mov	r0, r3
 80125e2:	3720      	adds	r7, #32
 80125e4:	46bd      	mov	sp, r7
 80125e6:	bd80      	pop	{r7, pc}
 80125e8:	20000ea0 	.word	0x20000ea0
 80125ec:	20000eb4 	.word	0x20000eb4

080125f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80125f0:	b480      	push	{r7}
 80125f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80125f4:	4b03      	ldr	r3, [pc, #12]	@ (8012604 <vTaskMissedYield+0x14>)
 80125f6:	2201      	movs	r2, #1
 80125f8:	601a      	str	r2, [r3, #0]
}
 80125fa:	bf00      	nop
 80125fc:	46bd      	mov	sp, r7
 80125fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012602:	4770      	bx	lr
 8012604:	20000eb0 	.word	0x20000eb0

08012608 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b082      	sub	sp, #8
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012610:	f000 f854 	bl	80126bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012614:	4b07      	ldr	r3, [pc, #28]	@ (8012634 <prvIdleTask+0x2c>)
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	2b01      	cmp	r3, #1
 801261a:	d907      	bls.n	801262c <prvIdleTask+0x24>
			{
				taskYIELD();
 801261c:	4b06      	ldr	r3, [pc, #24]	@ (8012638 <prvIdleTask+0x30>)
 801261e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012622:	601a      	str	r2, [r3, #0]
 8012624:	f3bf 8f4f 	dsb	sy
 8012628:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 801262c:	f7ed ff86 	bl	800053c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8012630:	e7ee      	b.n	8012610 <prvIdleTask+0x8>
 8012632:	bf00      	nop
 8012634:	20000da0 	.word	0x20000da0
 8012638:	e000ed04 	.word	0xe000ed04

0801263c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b082      	sub	sp, #8
 8012640:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012642:	2300      	movs	r3, #0
 8012644:	607b      	str	r3, [r7, #4]
 8012646:	e00c      	b.n	8012662 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012648:	687a      	ldr	r2, [r7, #4]
 801264a:	4613      	mov	r3, r2
 801264c:	009b      	lsls	r3, r3, #2
 801264e:	4413      	add	r3, r2
 8012650:	009b      	lsls	r3, r3, #2
 8012652:	4a12      	ldr	r2, [pc, #72]	@ (801269c <prvInitialiseTaskLists+0x60>)
 8012654:	4413      	add	r3, r2
 8012656:	4618      	mov	r0, r3
 8012658:	f7fe fbec 	bl	8010e34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	3301      	adds	r3, #1
 8012660:	607b      	str	r3, [r7, #4]
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	2b06      	cmp	r3, #6
 8012666:	d9ef      	bls.n	8012648 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012668:	480d      	ldr	r0, [pc, #52]	@ (80126a0 <prvInitialiseTaskLists+0x64>)
 801266a:	f7fe fbe3 	bl	8010e34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801266e:	480d      	ldr	r0, [pc, #52]	@ (80126a4 <prvInitialiseTaskLists+0x68>)
 8012670:	f7fe fbe0 	bl	8010e34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012674:	480c      	ldr	r0, [pc, #48]	@ (80126a8 <prvInitialiseTaskLists+0x6c>)
 8012676:	f7fe fbdd 	bl	8010e34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801267a:	480c      	ldr	r0, [pc, #48]	@ (80126ac <prvInitialiseTaskLists+0x70>)
 801267c:	f7fe fbda 	bl	8010e34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012680:	480b      	ldr	r0, [pc, #44]	@ (80126b0 <prvInitialiseTaskLists+0x74>)
 8012682:	f7fe fbd7 	bl	8010e34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012686:	4b0b      	ldr	r3, [pc, #44]	@ (80126b4 <prvInitialiseTaskLists+0x78>)
 8012688:	4a05      	ldr	r2, [pc, #20]	@ (80126a0 <prvInitialiseTaskLists+0x64>)
 801268a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801268c:	4b0a      	ldr	r3, [pc, #40]	@ (80126b8 <prvInitialiseTaskLists+0x7c>)
 801268e:	4a05      	ldr	r2, [pc, #20]	@ (80126a4 <prvInitialiseTaskLists+0x68>)
 8012690:	601a      	str	r2, [r3, #0]
}
 8012692:	bf00      	nop
 8012694:	3708      	adds	r7, #8
 8012696:	46bd      	mov	sp, r7
 8012698:	bd80      	pop	{r7, pc}
 801269a:	bf00      	nop
 801269c:	20000da0 	.word	0x20000da0
 80126a0:	20000e2c 	.word	0x20000e2c
 80126a4:	20000e40 	.word	0x20000e40
 80126a8:	20000e5c 	.word	0x20000e5c
 80126ac:	20000e70 	.word	0x20000e70
 80126b0:	20000e88 	.word	0x20000e88
 80126b4:	20000e54 	.word	0x20000e54
 80126b8:	20000e58 	.word	0x20000e58

080126bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b082      	sub	sp, #8
 80126c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80126c2:	e019      	b.n	80126f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80126c4:	f000 fa9a 	bl	8012bfc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80126c8:	4b10      	ldr	r3, [pc, #64]	@ (801270c <prvCheckTasksWaitingTermination+0x50>)
 80126ca:	68db      	ldr	r3, [r3, #12]
 80126cc:	68db      	ldr	r3, [r3, #12]
 80126ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	3304      	adds	r3, #4
 80126d4:	4618      	mov	r0, r3
 80126d6:	f7fe fc37 	bl	8010f48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80126da:	4b0d      	ldr	r3, [pc, #52]	@ (8012710 <prvCheckTasksWaitingTermination+0x54>)
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	3b01      	subs	r3, #1
 80126e0:	4a0b      	ldr	r2, [pc, #44]	@ (8012710 <prvCheckTasksWaitingTermination+0x54>)
 80126e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80126e4:	4b0b      	ldr	r3, [pc, #44]	@ (8012714 <prvCheckTasksWaitingTermination+0x58>)
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	3b01      	subs	r3, #1
 80126ea:	4a0a      	ldr	r2, [pc, #40]	@ (8012714 <prvCheckTasksWaitingTermination+0x58>)
 80126ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80126ee:	f000 fabb 	bl	8012c68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80126f2:	6878      	ldr	r0, [r7, #4]
 80126f4:	f000 f810 	bl	8012718 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80126f8:	4b06      	ldr	r3, [pc, #24]	@ (8012714 <prvCheckTasksWaitingTermination+0x58>)
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d1e1      	bne.n	80126c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012700:	bf00      	nop
 8012702:	bf00      	nop
 8012704:	3708      	adds	r7, #8
 8012706:	46bd      	mov	sp, r7
 8012708:	bd80      	pop	{r7, pc}
 801270a:	bf00      	nop
 801270c:	20000e70 	.word	0x20000e70
 8012710:	20000e9c 	.word	0x20000e9c
 8012714:	20000e84 	.word	0x20000e84

08012718 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012718:	b580      	push	{r7, lr}
 801271a:	b084      	sub	sp, #16
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8012726:	2b00      	cmp	r3, #0
 8012728:	d108      	bne.n	801273c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801272e:	4618      	mov	r0, r3
 8012730:	f000 fc64 	bl	8012ffc <vPortFree>
				vPortFree( pxTCB );
 8012734:	6878      	ldr	r0, [r7, #4]
 8012736:	f000 fc61 	bl	8012ffc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801273a:	e01b      	b.n	8012774 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8012742:	2b01      	cmp	r3, #1
 8012744:	d103      	bne.n	801274e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8012746:	6878      	ldr	r0, [r7, #4]
 8012748:	f000 fc58 	bl	8012ffc <vPortFree>
	}
 801274c:	e012      	b.n	8012774 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8012754:	2b02      	cmp	r3, #2
 8012756:	d00d      	beq.n	8012774 <prvDeleteTCB+0x5c>
	__asm volatile
 8012758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801275c:	b672      	cpsid	i
 801275e:	f383 8811 	msr	BASEPRI, r3
 8012762:	f3bf 8f6f 	isb	sy
 8012766:	f3bf 8f4f 	dsb	sy
 801276a:	b662      	cpsie	i
 801276c:	60fb      	str	r3, [r7, #12]
}
 801276e:	bf00      	nop
 8012770:	bf00      	nop
 8012772:	e7fd      	b.n	8012770 <prvDeleteTCB+0x58>
	}
 8012774:	bf00      	nop
 8012776:	3710      	adds	r7, #16
 8012778:	46bd      	mov	sp, r7
 801277a:	bd80      	pop	{r7, pc}

0801277c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801277c:	b480      	push	{r7}
 801277e:	b083      	sub	sp, #12
 8012780:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012782:	4b0c      	ldr	r3, [pc, #48]	@ (80127b4 <prvResetNextTaskUnblockTime+0x38>)
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d104      	bne.n	8012796 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801278c:	4b0a      	ldr	r3, [pc, #40]	@ (80127b8 <prvResetNextTaskUnblockTime+0x3c>)
 801278e:	f04f 32ff 	mov.w	r2, #4294967295
 8012792:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012794:	e008      	b.n	80127a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012796:	4b07      	ldr	r3, [pc, #28]	@ (80127b4 <prvResetNextTaskUnblockTime+0x38>)
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	68db      	ldr	r3, [r3, #12]
 801279c:	68db      	ldr	r3, [r3, #12]
 801279e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	685b      	ldr	r3, [r3, #4]
 80127a4:	4a04      	ldr	r2, [pc, #16]	@ (80127b8 <prvResetNextTaskUnblockTime+0x3c>)
 80127a6:	6013      	str	r3, [r2, #0]
}
 80127a8:	bf00      	nop
 80127aa:	370c      	adds	r7, #12
 80127ac:	46bd      	mov	sp, r7
 80127ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b2:	4770      	bx	lr
 80127b4:	20000e54 	.word	0x20000e54
 80127b8:	20000ebc 	.word	0x20000ebc

080127bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80127bc:	b480      	push	{r7}
 80127be:	b083      	sub	sp, #12
 80127c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80127c2:	4b0b      	ldr	r3, [pc, #44]	@ (80127f0 <xTaskGetSchedulerState+0x34>)
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d102      	bne.n	80127d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80127ca:	2301      	movs	r3, #1
 80127cc:	607b      	str	r3, [r7, #4]
 80127ce:	e008      	b.n	80127e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80127d0:	4b08      	ldr	r3, [pc, #32]	@ (80127f4 <xTaskGetSchedulerState+0x38>)
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d102      	bne.n	80127de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80127d8:	2302      	movs	r3, #2
 80127da:	607b      	str	r3, [r7, #4]
 80127dc:	e001      	b.n	80127e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80127de:	2300      	movs	r3, #0
 80127e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80127e2:	687b      	ldr	r3, [r7, #4]
	}
 80127e4:	4618      	mov	r0, r3
 80127e6:	370c      	adds	r7, #12
 80127e8:	46bd      	mov	sp, r7
 80127ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ee:	4770      	bx	lr
 80127f0:	20000ea8 	.word	0x20000ea8
 80127f4:	20000ec4 	.word	0x20000ec4

080127f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b086      	sub	sp, #24
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012804:	2300      	movs	r3, #0
 8012806:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d074      	beq.n	80128f8 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801280e:	4b3d      	ldr	r3, [pc, #244]	@ (8012904 <xTaskPriorityDisinherit+0x10c>)
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	693a      	ldr	r2, [r7, #16]
 8012814:	429a      	cmp	r2, r3
 8012816:	d00d      	beq.n	8012834 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8012818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801281c:	b672      	cpsid	i
 801281e:	f383 8811 	msr	BASEPRI, r3
 8012822:	f3bf 8f6f 	isb	sy
 8012826:	f3bf 8f4f 	dsb	sy
 801282a:	b662      	cpsie	i
 801282c:	60fb      	str	r3, [r7, #12]
}
 801282e:	bf00      	nop
 8012830:	bf00      	nop
 8012832:	e7fd      	b.n	8012830 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8012834:	693b      	ldr	r3, [r7, #16]
 8012836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012838:	2b00      	cmp	r3, #0
 801283a:	d10d      	bne.n	8012858 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 801283c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012840:	b672      	cpsid	i
 8012842:	f383 8811 	msr	BASEPRI, r3
 8012846:	f3bf 8f6f 	isb	sy
 801284a:	f3bf 8f4f 	dsb	sy
 801284e:	b662      	cpsie	i
 8012850:	60bb      	str	r3, [r7, #8]
}
 8012852:	bf00      	nop
 8012854:	bf00      	nop
 8012856:	e7fd      	b.n	8012854 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8012858:	693b      	ldr	r3, [r7, #16]
 801285a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801285c:	1e5a      	subs	r2, r3, #1
 801285e:	693b      	ldr	r3, [r7, #16]
 8012860:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012862:	693b      	ldr	r3, [r7, #16]
 8012864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012866:	693b      	ldr	r3, [r7, #16]
 8012868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801286a:	429a      	cmp	r2, r3
 801286c:	d044      	beq.n	80128f8 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801286e:	693b      	ldr	r3, [r7, #16]
 8012870:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012872:	2b00      	cmp	r3, #0
 8012874:	d140      	bne.n	80128f8 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012876:	693b      	ldr	r3, [r7, #16]
 8012878:	3304      	adds	r3, #4
 801287a:	4618      	mov	r0, r3
 801287c:	f7fe fb64 	bl	8010f48 <uxListRemove>
 8012880:	4603      	mov	r3, r0
 8012882:	2b00      	cmp	r3, #0
 8012884:	d115      	bne.n	80128b2 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012886:	693b      	ldr	r3, [r7, #16]
 8012888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801288a:	491f      	ldr	r1, [pc, #124]	@ (8012908 <xTaskPriorityDisinherit+0x110>)
 801288c:	4613      	mov	r3, r2
 801288e:	009b      	lsls	r3, r3, #2
 8012890:	4413      	add	r3, r2
 8012892:	009b      	lsls	r3, r3, #2
 8012894:	440b      	add	r3, r1
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d10a      	bne.n	80128b2 <xTaskPriorityDisinherit+0xba>
 801289c:	693b      	ldr	r3, [r7, #16]
 801289e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128a0:	2201      	movs	r2, #1
 80128a2:	fa02 f303 	lsl.w	r3, r2, r3
 80128a6:	43da      	mvns	r2, r3
 80128a8:	4b18      	ldr	r3, [pc, #96]	@ (801290c <xTaskPriorityDisinherit+0x114>)
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	4013      	ands	r3, r2
 80128ae:	4a17      	ldr	r2, [pc, #92]	@ (801290c <xTaskPriorityDisinherit+0x114>)
 80128b0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80128b2:	693b      	ldr	r3, [r7, #16]
 80128b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80128b6:	693b      	ldr	r3, [r7, #16]
 80128b8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80128ba:	693b      	ldr	r3, [r7, #16]
 80128bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128be:	f1c3 0207 	rsb	r2, r3, #7
 80128c2:	693b      	ldr	r3, [r7, #16]
 80128c4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80128c6:	693b      	ldr	r3, [r7, #16]
 80128c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128ca:	2201      	movs	r2, #1
 80128cc:	409a      	lsls	r2, r3
 80128ce:	4b0f      	ldr	r3, [pc, #60]	@ (801290c <xTaskPriorityDisinherit+0x114>)
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	4313      	orrs	r3, r2
 80128d4:	4a0d      	ldr	r2, [pc, #52]	@ (801290c <xTaskPriorityDisinherit+0x114>)
 80128d6:	6013      	str	r3, [r2, #0]
 80128d8:	693b      	ldr	r3, [r7, #16]
 80128da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80128dc:	4613      	mov	r3, r2
 80128de:	009b      	lsls	r3, r3, #2
 80128e0:	4413      	add	r3, r2
 80128e2:	009b      	lsls	r3, r3, #2
 80128e4:	4a08      	ldr	r2, [pc, #32]	@ (8012908 <xTaskPriorityDisinherit+0x110>)
 80128e6:	441a      	add	r2, r3
 80128e8:	693b      	ldr	r3, [r7, #16]
 80128ea:	3304      	adds	r3, #4
 80128ec:	4619      	mov	r1, r3
 80128ee:	4610      	mov	r0, r2
 80128f0:	f7fe facd 	bl	8010e8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80128f4:	2301      	movs	r3, #1
 80128f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80128f8:	697b      	ldr	r3, [r7, #20]
	}
 80128fa:	4618      	mov	r0, r3
 80128fc:	3718      	adds	r7, #24
 80128fe:	46bd      	mov	sp, r7
 8012900:	bd80      	pop	{r7, pc}
 8012902:	bf00      	nop
 8012904:	20000d9c 	.word	0x20000d9c
 8012908:	20000da0 	.word	0x20000da0
 801290c:	20000ea4 	.word	0x20000ea4

08012910 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b084      	sub	sp, #16
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
 8012918:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801291a:	4b29      	ldr	r3, [pc, #164]	@ (80129c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012920:	4b28      	ldr	r3, [pc, #160]	@ (80129c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	3304      	adds	r3, #4
 8012926:	4618      	mov	r0, r3
 8012928:	f7fe fb0e 	bl	8010f48 <uxListRemove>
 801292c:	4603      	mov	r3, r0
 801292e:	2b00      	cmp	r3, #0
 8012930:	d10b      	bne.n	801294a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8012932:	4b24      	ldr	r3, [pc, #144]	@ (80129c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012938:	2201      	movs	r2, #1
 801293a:	fa02 f303 	lsl.w	r3, r2, r3
 801293e:	43da      	mvns	r2, r3
 8012940:	4b21      	ldr	r3, [pc, #132]	@ (80129c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	4013      	ands	r3, r2
 8012946:	4a20      	ldr	r2, [pc, #128]	@ (80129c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012948:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012950:	d10a      	bne.n	8012968 <prvAddCurrentTaskToDelayedList+0x58>
 8012952:	683b      	ldr	r3, [r7, #0]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d007      	beq.n	8012968 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012958:	4b1a      	ldr	r3, [pc, #104]	@ (80129c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	3304      	adds	r3, #4
 801295e:	4619      	mov	r1, r3
 8012960:	481a      	ldr	r0, [pc, #104]	@ (80129cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8012962:	f7fe fa94 	bl	8010e8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012966:	e026      	b.n	80129b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012968:	68fa      	ldr	r2, [r7, #12]
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	4413      	add	r3, r2
 801296e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012970:	4b14      	ldr	r3, [pc, #80]	@ (80129c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	68ba      	ldr	r2, [r7, #8]
 8012976:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012978:	68ba      	ldr	r2, [r7, #8]
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	429a      	cmp	r2, r3
 801297e:	d209      	bcs.n	8012994 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012980:	4b13      	ldr	r3, [pc, #76]	@ (80129d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8012982:	681a      	ldr	r2, [r3, #0]
 8012984:	4b0f      	ldr	r3, [pc, #60]	@ (80129c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	3304      	adds	r3, #4
 801298a:	4619      	mov	r1, r3
 801298c:	4610      	mov	r0, r2
 801298e:	f7fe faa2 	bl	8010ed6 <vListInsert>
}
 8012992:	e010      	b.n	80129b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012994:	4b0f      	ldr	r3, [pc, #60]	@ (80129d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8012996:	681a      	ldr	r2, [r3, #0]
 8012998:	4b0a      	ldr	r3, [pc, #40]	@ (80129c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	3304      	adds	r3, #4
 801299e:	4619      	mov	r1, r3
 80129a0:	4610      	mov	r0, r2
 80129a2:	f7fe fa98 	bl	8010ed6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80129a6:	4b0c      	ldr	r3, [pc, #48]	@ (80129d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	68ba      	ldr	r2, [r7, #8]
 80129ac:	429a      	cmp	r2, r3
 80129ae:	d202      	bcs.n	80129b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80129b0:	4a09      	ldr	r2, [pc, #36]	@ (80129d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80129b2:	68bb      	ldr	r3, [r7, #8]
 80129b4:	6013      	str	r3, [r2, #0]
}
 80129b6:	bf00      	nop
 80129b8:	3710      	adds	r7, #16
 80129ba:	46bd      	mov	sp, r7
 80129bc:	bd80      	pop	{r7, pc}
 80129be:	bf00      	nop
 80129c0:	20000ea0 	.word	0x20000ea0
 80129c4:	20000d9c 	.word	0x20000d9c
 80129c8:	20000ea4 	.word	0x20000ea4
 80129cc:	20000e88 	.word	0x20000e88
 80129d0:	20000e58 	.word	0x20000e58
 80129d4:	20000e54 	.word	0x20000e54
 80129d8:	20000ebc 	.word	0x20000ebc

080129dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80129dc:	b480      	push	{r7}
 80129de:	b085      	sub	sp, #20
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	60f8      	str	r0, [r7, #12]
 80129e4:	60b9      	str	r1, [r7, #8]
 80129e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	3b04      	subs	r3, #4
 80129ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80129f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	3b04      	subs	r3, #4
 80129fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80129fc:	68bb      	ldr	r3, [r7, #8]
 80129fe:	f023 0201 	bic.w	r2, r3, #1
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	3b04      	subs	r3, #4
 8012a0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012a0c:	4a0c      	ldr	r2, [pc, #48]	@ (8012a40 <pxPortInitialiseStack+0x64>)
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	3b14      	subs	r3, #20
 8012a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012a18:	687a      	ldr	r2, [r7, #4]
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	3b04      	subs	r3, #4
 8012a22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	f06f 0202 	mvn.w	r2, #2
 8012a2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	3b20      	subs	r3, #32
 8012a30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012a32:	68fb      	ldr	r3, [r7, #12]
}
 8012a34:	4618      	mov	r0, r3
 8012a36:	3714      	adds	r7, #20
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3e:	4770      	bx	lr
 8012a40:	08012a45 	.word	0x08012a45

08012a44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012a44:	b480      	push	{r7}
 8012a46:	b085      	sub	sp, #20
 8012a48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012a4e:	4b15      	ldr	r3, [pc, #84]	@ (8012aa4 <prvTaskExitError+0x60>)
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a56:	d00d      	beq.n	8012a74 <prvTaskExitError+0x30>
	__asm volatile
 8012a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a5c:	b672      	cpsid	i
 8012a5e:	f383 8811 	msr	BASEPRI, r3
 8012a62:	f3bf 8f6f 	isb	sy
 8012a66:	f3bf 8f4f 	dsb	sy
 8012a6a:	b662      	cpsie	i
 8012a6c:	60fb      	str	r3, [r7, #12]
}
 8012a6e:	bf00      	nop
 8012a70:	bf00      	nop
 8012a72:	e7fd      	b.n	8012a70 <prvTaskExitError+0x2c>
	__asm volatile
 8012a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a78:	b672      	cpsid	i
 8012a7a:	f383 8811 	msr	BASEPRI, r3
 8012a7e:	f3bf 8f6f 	isb	sy
 8012a82:	f3bf 8f4f 	dsb	sy
 8012a86:	b662      	cpsie	i
 8012a88:	60bb      	str	r3, [r7, #8]
}
 8012a8a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012a8c:	bf00      	nop
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d0fc      	beq.n	8012a8e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012a94:	bf00      	nop
 8012a96:	bf00      	nop
 8012a98:	3714      	adds	r7, #20
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa0:	4770      	bx	lr
 8012aa2:	bf00      	nop
 8012aa4:	2000002c 	.word	0x2000002c
	...

08012ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012ab0:	4b07      	ldr	r3, [pc, #28]	@ (8012ad0 <pxCurrentTCBConst2>)
 8012ab2:	6819      	ldr	r1, [r3, #0]
 8012ab4:	6808      	ldr	r0, [r1, #0]
 8012ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012aba:	f380 8809 	msr	PSP, r0
 8012abe:	f3bf 8f6f 	isb	sy
 8012ac2:	f04f 0000 	mov.w	r0, #0
 8012ac6:	f380 8811 	msr	BASEPRI, r0
 8012aca:	4770      	bx	lr
 8012acc:	f3af 8000 	nop.w

08012ad0 <pxCurrentTCBConst2>:
 8012ad0:	20000d9c 	.word	0x20000d9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012ad4:	bf00      	nop
 8012ad6:	bf00      	nop

08012ad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012ad8:	4808      	ldr	r0, [pc, #32]	@ (8012afc <prvPortStartFirstTask+0x24>)
 8012ada:	6800      	ldr	r0, [r0, #0]
 8012adc:	6800      	ldr	r0, [r0, #0]
 8012ade:	f380 8808 	msr	MSP, r0
 8012ae2:	f04f 0000 	mov.w	r0, #0
 8012ae6:	f380 8814 	msr	CONTROL, r0
 8012aea:	b662      	cpsie	i
 8012aec:	b661      	cpsie	f
 8012aee:	f3bf 8f4f 	dsb	sy
 8012af2:	f3bf 8f6f 	isb	sy
 8012af6:	df00      	svc	0
 8012af8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012afa:	bf00      	nop
 8012afc:	e000ed08 	.word	0xe000ed08

08012b00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b084      	sub	sp, #16
 8012b04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012b06:	4b37      	ldr	r3, [pc, #220]	@ (8012be4 <xPortStartScheduler+0xe4>)
 8012b08:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	781b      	ldrb	r3, [r3, #0]
 8012b0e:	b2db      	uxtb	r3, r3
 8012b10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	22ff      	movs	r2, #255	@ 0xff
 8012b16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	781b      	ldrb	r3, [r3, #0]
 8012b1c:	b2db      	uxtb	r3, r3
 8012b1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012b20:	78fb      	ldrb	r3, [r7, #3]
 8012b22:	b2db      	uxtb	r3, r3
 8012b24:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8012b28:	b2da      	uxtb	r2, r3
 8012b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8012be8 <xPortStartScheduler+0xe8>)
 8012b2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8012bec <xPortStartScheduler+0xec>)
 8012b30:	2207      	movs	r2, #7
 8012b32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012b34:	e009      	b.n	8012b4a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8012b36:	4b2d      	ldr	r3, [pc, #180]	@ (8012bec <xPortStartScheduler+0xec>)
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	3b01      	subs	r3, #1
 8012b3c:	4a2b      	ldr	r2, [pc, #172]	@ (8012bec <xPortStartScheduler+0xec>)
 8012b3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012b40:	78fb      	ldrb	r3, [r7, #3]
 8012b42:	b2db      	uxtb	r3, r3
 8012b44:	005b      	lsls	r3, r3, #1
 8012b46:	b2db      	uxtb	r3, r3
 8012b48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012b4a:	78fb      	ldrb	r3, [r7, #3]
 8012b4c:	b2db      	uxtb	r3, r3
 8012b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012b52:	2b80      	cmp	r3, #128	@ 0x80
 8012b54:	d0ef      	beq.n	8012b36 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012b56:	4b25      	ldr	r3, [pc, #148]	@ (8012bec <xPortStartScheduler+0xec>)
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	f1c3 0307 	rsb	r3, r3, #7
 8012b5e:	2b04      	cmp	r3, #4
 8012b60:	d00d      	beq.n	8012b7e <xPortStartScheduler+0x7e>
	__asm volatile
 8012b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b66:	b672      	cpsid	i
 8012b68:	f383 8811 	msr	BASEPRI, r3
 8012b6c:	f3bf 8f6f 	isb	sy
 8012b70:	f3bf 8f4f 	dsb	sy
 8012b74:	b662      	cpsie	i
 8012b76:	60bb      	str	r3, [r7, #8]
}
 8012b78:	bf00      	nop
 8012b7a:	bf00      	nop
 8012b7c:	e7fd      	b.n	8012b7a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8012bec <xPortStartScheduler+0xec>)
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	021b      	lsls	r3, r3, #8
 8012b84:	4a19      	ldr	r2, [pc, #100]	@ (8012bec <xPortStartScheduler+0xec>)
 8012b86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012b88:	4b18      	ldr	r3, [pc, #96]	@ (8012bec <xPortStartScheduler+0xec>)
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012b90:	4a16      	ldr	r2, [pc, #88]	@ (8012bec <xPortStartScheduler+0xec>)
 8012b92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	b2da      	uxtb	r2, r3
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012b9c:	4b14      	ldr	r3, [pc, #80]	@ (8012bf0 <xPortStartScheduler+0xf0>)
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	4a13      	ldr	r2, [pc, #76]	@ (8012bf0 <xPortStartScheduler+0xf0>)
 8012ba2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012ba6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012ba8:	4b11      	ldr	r3, [pc, #68]	@ (8012bf0 <xPortStartScheduler+0xf0>)
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	4a10      	ldr	r2, [pc, #64]	@ (8012bf0 <xPortStartScheduler+0xf0>)
 8012bae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012bb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012bb4:	f000 f8dc 	bl	8012d70 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8012bf4 <xPortStartScheduler+0xf4>)
 8012bba:	2200      	movs	r2, #0
 8012bbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012bbe:	f000 f8fb 	bl	8012db8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8012bf8 <xPortStartScheduler+0xf8>)
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	4a0c      	ldr	r2, [pc, #48]	@ (8012bf8 <xPortStartScheduler+0xf8>)
 8012bc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8012bcc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012bce:	f7ff ff83 	bl	8012ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012bd2:	f7ff fb7d 	bl	80122d0 <vTaskSwitchContext>
	prvTaskExitError();
 8012bd6:	f7ff ff35 	bl	8012a44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012bda:	2300      	movs	r3, #0
}
 8012bdc:	4618      	mov	r0, r3
 8012bde:	3710      	adds	r7, #16
 8012be0:	46bd      	mov	sp, r7
 8012be2:	bd80      	pop	{r7, pc}
 8012be4:	e000e400 	.word	0xe000e400
 8012be8:	20000ec8 	.word	0x20000ec8
 8012bec:	20000ecc 	.word	0x20000ecc
 8012bf0:	e000ed20 	.word	0xe000ed20
 8012bf4:	2000002c 	.word	0x2000002c
 8012bf8:	e000ef34 	.word	0xe000ef34

08012bfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012bfc:	b480      	push	{r7}
 8012bfe:	b083      	sub	sp, #12
 8012c00:	af00      	add	r7, sp, #0
	__asm volatile
 8012c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c06:	b672      	cpsid	i
 8012c08:	f383 8811 	msr	BASEPRI, r3
 8012c0c:	f3bf 8f6f 	isb	sy
 8012c10:	f3bf 8f4f 	dsb	sy
 8012c14:	b662      	cpsie	i
 8012c16:	607b      	str	r3, [r7, #4]
}
 8012c18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012c1a:	4b11      	ldr	r3, [pc, #68]	@ (8012c60 <vPortEnterCritical+0x64>)
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	3301      	adds	r3, #1
 8012c20:	4a0f      	ldr	r2, [pc, #60]	@ (8012c60 <vPortEnterCritical+0x64>)
 8012c22:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012c24:	4b0e      	ldr	r3, [pc, #56]	@ (8012c60 <vPortEnterCritical+0x64>)
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	2b01      	cmp	r3, #1
 8012c2a:	d112      	bne.n	8012c52 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8012c64 <vPortEnterCritical+0x68>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	b2db      	uxtb	r3, r3
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d00d      	beq.n	8012c52 <vPortEnterCritical+0x56>
	__asm volatile
 8012c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c3a:	b672      	cpsid	i
 8012c3c:	f383 8811 	msr	BASEPRI, r3
 8012c40:	f3bf 8f6f 	isb	sy
 8012c44:	f3bf 8f4f 	dsb	sy
 8012c48:	b662      	cpsie	i
 8012c4a:	603b      	str	r3, [r7, #0]
}
 8012c4c:	bf00      	nop
 8012c4e:	bf00      	nop
 8012c50:	e7fd      	b.n	8012c4e <vPortEnterCritical+0x52>
	}
}
 8012c52:	bf00      	nop
 8012c54:	370c      	adds	r7, #12
 8012c56:	46bd      	mov	sp, r7
 8012c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c5c:	4770      	bx	lr
 8012c5e:	bf00      	nop
 8012c60:	2000002c 	.word	0x2000002c
 8012c64:	e000ed04 	.word	0xe000ed04

08012c68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012c68:	b480      	push	{r7}
 8012c6a:	b083      	sub	sp, #12
 8012c6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012c6e:	4b13      	ldr	r3, [pc, #76]	@ (8012cbc <vPortExitCritical+0x54>)
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d10d      	bne.n	8012c92 <vPortExitCritical+0x2a>
	__asm volatile
 8012c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c7a:	b672      	cpsid	i
 8012c7c:	f383 8811 	msr	BASEPRI, r3
 8012c80:	f3bf 8f6f 	isb	sy
 8012c84:	f3bf 8f4f 	dsb	sy
 8012c88:	b662      	cpsie	i
 8012c8a:	607b      	str	r3, [r7, #4]
}
 8012c8c:	bf00      	nop
 8012c8e:	bf00      	nop
 8012c90:	e7fd      	b.n	8012c8e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8012c92:	4b0a      	ldr	r3, [pc, #40]	@ (8012cbc <vPortExitCritical+0x54>)
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	3b01      	subs	r3, #1
 8012c98:	4a08      	ldr	r2, [pc, #32]	@ (8012cbc <vPortExitCritical+0x54>)
 8012c9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012c9c:	4b07      	ldr	r3, [pc, #28]	@ (8012cbc <vPortExitCritical+0x54>)
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d105      	bne.n	8012cb0 <vPortExitCritical+0x48>
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012ca8:	683b      	ldr	r3, [r7, #0]
 8012caa:	f383 8811 	msr	BASEPRI, r3
}
 8012cae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012cb0:	bf00      	nop
 8012cb2:	370c      	adds	r7, #12
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cba:	4770      	bx	lr
 8012cbc:	2000002c 	.word	0x2000002c

08012cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012cc0:	f3ef 8009 	mrs	r0, PSP
 8012cc4:	f3bf 8f6f 	isb	sy
 8012cc8:	4b15      	ldr	r3, [pc, #84]	@ (8012d20 <pxCurrentTCBConst>)
 8012cca:	681a      	ldr	r2, [r3, #0]
 8012ccc:	f01e 0f10 	tst.w	lr, #16
 8012cd0:	bf08      	it	eq
 8012cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cda:	6010      	str	r0, [r2, #0]
 8012cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012ce0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012ce4:	b672      	cpsid	i
 8012ce6:	f380 8811 	msr	BASEPRI, r0
 8012cea:	f3bf 8f4f 	dsb	sy
 8012cee:	f3bf 8f6f 	isb	sy
 8012cf2:	b662      	cpsie	i
 8012cf4:	f7ff faec 	bl	80122d0 <vTaskSwitchContext>
 8012cf8:	f04f 0000 	mov.w	r0, #0
 8012cfc:	f380 8811 	msr	BASEPRI, r0
 8012d00:	bc09      	pop	{r0, r3}
 8012d02:	6819      	ldr	r1, [r3, #0]
 8012d04:	6808      	ldr	r0, [r1, #0]
 8012d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d0a:	f01e 0f10 	tst.w	lr, #16
 8012d0e:	bf08      	it	eq
 8012d10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012d14:	f380 8809 	msr	PSP, r0
 8012d18:	f3bf 8f6f 	isb	sy
 8012d1c:	4770      	bx	lr
 8012d1e:	bf00      	nop

08012d20 <pxCurrentTCBConst>:
 8012d20:	20000d9c 	.word	0x20000d9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012d24:	bf00      	nop
 8012d26:	bf00      	nop

08012d28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b082      	sub	sp, #8
 8012d2c:	af00      	add	r7, sp, #0
	__asm volatile
 8012d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d32:	b672      	cpsid	i
 8012d34:	f383 8811 	msr	BASEPRI, r3
 8012d38:	f3bf 8f6f 	isb	sy
 8012d3c:	f3bf 8f4f 	dsb	sy
 8012d40:	b662      	cpsie	i
 8012d42:	607b      	str	r3, [r7, #4]
}
 8012d44:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012d46:	f7ff fa07 	bl	8012158 <xTaskIncrementTick>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d003      	beq.n	8012d58 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012d50:	4b06      	ldr	r3, [pc, #24]	@ (8012d6c <SysTick_Handler+0x44>)
 8012d52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012d56:	601a      	str	r2, [r3, #0]
 8012d58:	2300      	movs	r3, #0
 8012d5a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012d5c:	683b      	ldr	r3, [r7, #0]
 8012d5e:	f383 8811 	msr	BASEPRI, r3
}
 8012d62:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012d64:	bf00      	nop
 8012d66:	3708      	adds	r7, #8
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	bd80      	pop	{r7, pc}
 8012d6c:	e000ed04 	.word	0xe000ed04

08012d70 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012d70:	b480      	push	{r7}
 8012d72:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012d74:	4b0b      	ldr	r3, [pc, #44]	@ (8012da4 <vPortSetupTimerInterrupt+0x34>)
 8012d76:	2200      	movs	r2, #0
 8012d78:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8012da8 <vPortSetupTimerInterrupt+0x38>)
 8012d7c:	2200      	movs	r2, #0
 8012d7e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012d80:	4b0a      	ldr	r3, [pc, #40]	@ (8012dac <vPortSetupTimerInterrupt+0x3c>)
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	4a0a      	ldr	r2, [pc, #40]	@ (8012db0 <vPortSetupTimerInterrupt+0x40>)
 8012d86:	fba2 2303 	umull	r2, r3, r2, r3
 8012d8a:	099b      	lsrs	r3, r3, #6
 8012d8c:	4a09      	ldr	r2, [pc, #36]	@ (8012db4 <vPortSetupTimerInterrupt+0x44>)
 8012d8e:	3b01      	subs	r3, #1
 8012d90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012d92:	4b04      	ldr	r3, [pc, #16]	@ (8012da4 <vPortSetupTimerInterrupt+0x34>)
 8012d94:	2207      	movs	r2, #7
 8012d96:	601a      	str	r2, [r3, #0]
}
 8012d98:	bf00      	nop
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da0:	4770      	bx	lr
 8012da2:	bf00      	nop
 8012da4:	e000e010 	.word	0xe000e010
 8012da8:	e000e018 	.word	0xe000e018
 8012dac:	20000000 	.word	0x20000000
 8012db0:	10624dd3 	.word	0x10624dd3
 8012db4:	e000e014 	.word	0xe000e014

08012db8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012db8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012dc8 <vPortEnableVFP+0x10>
 8012dbc:	6801      	ldr	r1, [r0, #0]
 8012dbe:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8012dc2:	6001      	str	r1, [r0, #0]
 8012dc4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012dc6:	bf00      	nop
 8012dc8:	e000ed88 	.word	0xe000ed88

08012dcc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012dcc:	b480      	push	{r7}
 8012dce:	b085      	sub	sp, #20
 8012dd0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012dd2:	f3ef 8305 	mrs	r3, IPSR
 8012dd6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	2b0f      	cmp	r3, #15
 8012ddc:	d917      	bls.n	8012e0e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012dde:	4a1a      	ldr	r2, [pc, #104]	@ (8012e48 <vPortValidateInterruptPriority+0x7c>)
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	4413      	add	r3, r2
 8012de4:	781b      	ldrb	r3, [r3, #0]
 8012de6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012de8:	4b18      	ldr	r3, [pc, #96]	@ (8012e4c <vPortValidateInterruptPriority+0x80>)
 8012dea:	781b      	ldrb	r3, [r3, #0]
 8012dec:	7afa      	ldrb	r2, [r7, #11]
 8012dee:	429a      	cmp	r2, r3
 8012df0:	d20d      	bcs.n	8012e0e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8012df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012df6:	b672      	cpsid	i
 8012df8:	f383 8811 	msr	BASEPRI, r3
 8012dfc:	f3bf 8f6f 	isb	sy
 8012e00:	f3bf 8f4f 	dsb	sy
 8012e04:	b662      	cpsie	i
 8012e06:	607b      	str	r3, [r7, #4]
}
 8012e08:	bf00      	nop
 8012e0a:	bf00      	nop
 8012e0c:	e7fd      	b.n	8012e0a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012e0e:	4b10      	ldr	r3, [pc, #64]	@ (8012e50 <vPortValidateInterruptPriority+0x84>)
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8012e16:	4b0f      	ldr	r3, [pc, #60]	@ (8012e54 <vPortValidateInterruptPriority+0x88>)
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	429a      	cmp	r2, r3
 8012e1c:	d90d      	bls.n	8012e3a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8012e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e22:	b672      	cpsid	i
 8012e24:	f383 8811 	msr	BASEPRI, r3
 8012e28:	f3bf 8f6f 	isb	sy
 8012e2c:	f3bf 8f4f 	dsb	sy
 8012e30:	b662      	cpsie	i
 8012e32:	603b      	str	r3, [r7, #0]
}
 8012e34:	bf00      	nop
 8012e36:	bf00      	nop
 8012e38:	e7fd      	b.n	8012e36 <vPortValidateInterruptPriority+0x6a>
	}
 8012e3a:	bf00      	nop
 8012e3c:	3714      	adds	r7, #20
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e44:	4770      	bx	lr
 8012e46:	bf00      	nop
 8012e48:	e000e3f0 	.word	0xe000e3f0
 8012e4c:	20000ec8 	.word	0x20000ec8
 8012e50:	e000ed0c 	.word	0xe000ed0c
 8012e54:	20000ecc 	.word	0x20000ecc

08012e58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b08a      	sub	sp, #40	@ 0x28
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012e60:	2300      	movs	r3, #0
 8012e62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012e64:	f7ff f8a8 	bl	8011fb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012e68:	4b5f      	ldr	r3, [pc, #380]	@ (8012fe8 <pvPortMalloc+0x190>)
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d101      	bne.n	8012e74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012e70:	f000 f924 	bl	80130bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012e74:	4b5d      	ldr	r3, [pc, #372]	@ (8012fec <pvPortMalloc+0x194>)
 8012e76:	681a      	ldr	r2, [r3, #0]
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	4013      	ands	r3, r2
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	f040 8094 	bne.w	8012faa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d020      	beq.n	8012eca <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8012e88:	2208      	movs	r2, #8
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	4413      	add	r3, r2
 8012e8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	f003 0307 	and.w	r3, r3, #7
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d017      	beq.n	8012eca <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	f023 0307 	bic.w	r3, r3, #7
 8012ea0:	3308      	adds	r3, #8
 8012ea2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	f003 0307 	and.w	r3, r3, #7
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d00d      	beq.n	8012eca <pvPortMalloc+0x72>
	__asm volatile
 8012eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012eb2:	b672      	cpsid	i
 8012eb4:	f383 8811 	msr	BASEPRI, r3
 8012eb8:	f3bf 8f6f 	isb	sy
 8012ebc:	f3bf 8f4f 	dsb	sy
 8012ec0:	b662      	cpsie	i
 8012ec2:	617b      	str	r3, [r7, #20]
}
 8012ec4:	bf00      	nop
 8012ec6:	bf00      	nop
 8012ec8:	e7fd      	b.n	8012ec6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d06c      	beq.n	8012faa <pvPortMalloc+0x152>
 8012ed0:	4b47      	ldr	r3, [pc, #284]	@ (8012ff0 <pvPortMalloc+0x198>)
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	687a      	ldr	r2, [r7, #4]
 8012ed6:	429a      	cmp	r2, r3
 8012ed8:	d867      	bhi.n	8012faa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012eda:	4b46      	ldr	r3, [pc, #280]	@ (8012ff4 <pvPortMalloc+0x19c>)
 8012edc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012ede:	4b45      	ldr	r3, [pc, #276]	@ (8012ff4 <pvPortMalloc+0x19c>)
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012ee4:	e004      	b.n	8012ef0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8012ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ee8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ef2:	685b      	ldr	r3, [r3, #4]
 8012ef4:	687a      	ldr	r2, [r7, #4]
 8012ef6:	429a      	cmp	r2, r3
 8012ef8:	d903      	bls.n	8012f02 <pvPortMalloc+0xaa>
 8012efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d1f1      	bne.n	8012ee6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012f02:	4b39      	ldr	r3, [pc, #228]	@ (8012fe8 <pvPortMalloc+0x190>)
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012f08:	429a      	cmp	r2, r3
 8012f0a:	d04e      	beq.n	8012faa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012f0c:	6a3b      	ldr	r3, [r7, #32]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	2208      	movs	r2, #8
 8012f12:	4413      	add	r3, r2
 8012f14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f18:	681a      	ldr	r2, [r3, #0]
 8012f1a:	6a3b      	ldr	r3, [r7, #32]
 8012f1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f20:	685a      	ldr	r2, [r3, #4]
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	1ad2      	subs	r2, r2, r3
 8012f26:	2308      	movs	r3, #8
 8012f28:	005b      	lsls	r3, r3, #1
 8012f2a:	429a      	cmp	r2, r3
 8012f2c:	d922      	bls.n	8012f74 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	4413      	add	r3, r2
 8012f34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012f36:	69bb      	ldr	r3, [r7, #24]
 8012f38:	f003 0307 	and.w	r3, r3, #7
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d00d      	beq.n	8012f5c <pvPortMalloc+0x104>
	__asm volatile
 8012f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f44:	b672      	cpsid	i
 8012f46:	f383 8811 	msr	BASEPRI, r3
 8012f4a:	f3bf 8f6f 	isb	sy
 8012f4e:	f3bf 8f4f 	dsb	sy
 8012f52:	b662      	cpsie	i
 8012f54:	613b      	str	r3, [r7, #16]
}
 8012f56:	bf00      	nop
 8012f58:	bf00      	nop
 8012f5a:	e7fd      	b.n	8012f58 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f5e:	685a      	ldr	r2, [r3, #4]
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	1ad2      	subs	r2, r2, r3
 8012f64:	69bb      	ldr	r3, [r7, #24]
 8012f66:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f6a:	687a      	ldr	r2, [r7, #4]
 8012f6c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012f6e:	69b8      	ldr	r0, [r7, #24]
 8012f70:	f000 f906 	bl	8013180 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012f74:	4b1e      	ldr	r3, [pc, #120]	@ (8012ff0 <pvPortMalloc+0x198>)
 8012f76:	681a      	ldr	r2, [r3, #0]
 8012f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f7a:	685b      	ldr	r3, [r3, #4]
 8012f7c:	1ad3      	subs	r3, r2, r3
 8012f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8012ff0 <pvPortMalloc+0x198>)
 8012f80:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012f82:	4b1b      	ldr	r3, [pc, #108]	@ (8012ff0 <pvPortMalloc+0x198>)
 8012f84:	681a      	ldr	r2, [r3, #0]
 8012f86:	4b1c      	ldr	r3, [pc, #112]	@ (8012ff8 <pvPortMalloc+0x1a0>)
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	429a      	cmp	r2, r3
 8012f8c:	d203      	bcs.n	8012f96 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012f8e:	4b18      	ldr	r3, [pc, #96]	@ (8012ff0 <pvPortMalloc+0x198>)
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	4a19      	ldr	r2, [pc, #100]	@ (8012ff8 <pvPortMalloc+0x1a0>)
 8012f94:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f98:	685a      	ldr	r2, [r3, #4]
 8012f9a:	4b14      	ldr	r3, [pc, #80]	@ (8012fec <pvPortMalloc+0x194>)
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	431a      	orrs	r2, r3
 8012fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fa2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fa6:	2200      	movs	r2, #0
 8012fa8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012faa:	f7ff f813 	bl	8011fd4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8012fae:	69fb      	ldr	r3, [r7, #28]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d101      	bne.n	8012fb8 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8012fb4:	f7ed fad4 	bl	8000560 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012fb8:	69fb      	ldr	r3, [r7, #28]
 8012fba:	f003 0307 	and.w	r3, r3, #7
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d00d      	beq.n	8012fde <pvPortMalloc+0x186>
	__asm volatile
 8012fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fc6:	b672      	cpsid	i
 8012fc8:	f383 8811 	msr	BASEPRI, r3
 8012fcc:	f3bf 8f6f 	isb	sy
 8012fd0:	f3bf 8f4f 	dsb	sy
 8012fd4:	b662      	cpsie	i
 8012fd6:	60fb      	str	r3, [r7, #12]
}
 8012fd8:	bf00      	nop
 8012fda:	bf00      	nop
 8012fdc:	e7fd      	b.n	8012fda <pvPortMalloc+0x182>
	return pvReturn;
 8012fde:	69fb      	ldr	r3, [r7, #28]
}
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	3728      	adds	r7, #40	@ 0x28
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	bd80      	pop	{r7, pc}
 8012fe8:	20008ed8 	.word	0x20008ed8
 8012fec:	20008ee4 	.word	0x20008ee4
 8012ff0:	20008edc 	.word	0x20008edc
 8012ff4:	20008ed0 	.word	0x20008ed0
 8012ff8:	20008ee0 	.word	0x20008ee0

08012ffc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b086      	sub	sp, #24
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d04e      	beq.n	80130ac <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801300e:	2308      	movs	r3, #8
 8013010:	425b      	negs	r3, r3
 8013012:	697a      	ldr	r2, [r7, #20]
 8013014:	4413      	add	r3, r2
 8013016:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013018:	697b      	ldr	r3, [r7, #20]
 801301a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801301c:	693b      	ldr	r3, [r7, #16]
 801301e:	685a      	ldr	r2, [r3, #4]
 8013020:	4b24      	ldr	r3, [pc, #144]	@ (80130b4 <vPortFree+0xb8>)
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	4013      	ands	r3, r2
 8013026:	2b00      	cmp	r3, #0
 8013028:	d10d      	bne.n	8013046 <vPortFree+0x4a>
	__asm volatile
 801302a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801302e:	b672      	cpsid	i
 8013030:	f383 8811 	msr	BASEPRI, r3
 8013034:	f3bf 8f6f 	isb	sy
 8013038:	f3bf 8f4f 	dsb	sy
 801303c:	b662      	cpsie	i
 801303e:	60fb      	str	r3, [r7, #12]
}
 8013040:	bf00      	nop
 8013042:	bf00      	nop
 8013044:	e7fd      	b.n	8013042 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013046:	693b      	ldr	r3, [r7, #16]
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d00d      	beq.n	801306a <vPortFree+0x6e>
	__asm volatile
 801304e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013052:	b672      	cpsid	i
 8013054:	f383 8811 	msr	BASEPRI, r3
 8013058:	f3bf 8f6f 	isb	sy
 801305c:	f3bf 8f4f 	dsb	sy
 8013060:	b662      	cpsie	i
 8013062:	60bb      	str	r3, [r7, #8]
}
 8013064:	bf00      	nop
 8013066:	bf00      	nop
 8013068:	e7fd      	b.n	8013066 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801306a:	693b      	ldr	r3, [r7, #16]
 801306c:	685a      	ldr	r2, [r3, #4]
 801306e:	4b11      	ldr	r3, [pc, #68]	@ (80130b4 <vPortFree+0xb8>)
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	4013      	ands	r3, r2
 8013074:	2b00      	cmp	r3, #0
 8013076:	d019      	beq.n	80130ac <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013078:	693b      	ldr	r3, [r7, #16]
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d115      	bne.n	80130ac <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013080:	693b      	ldr	r3, [r7, #16]
 8013082:	685a      	ldr	r2, [r3, #4]
 8013084:	4b0b      	ldr	r3, [pc, #44]	@ (80130b4 <vPortFree+0xb8>)
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	43db      	mvns	r3, r3
 801308a:	401a      	ands	r2, r3
 801308c:	693b      	ldr	r3, [r7, #16]
 801308e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013090:	f7fe ff92 	bl	8011fb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013094:	693b      	ldr	r3, [r7, #16]
 8013096:	685a      	ldr	r2, [r3, #4]
 8013098:	4b07      	ldr	r3, [pc, #28]	@ (80130b8 <vPortFree+0xbc>)
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	4413      	add	r3, r2
 801309e:	4a06      	ldr	r2, [pc, #24]	@ (80130b8 <vPortFree+0xbc>)
 80130a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80130a2:	6938      	ldr	r0, [r7, #16]
 80130a4:	f000 f86c 	bl	8013180 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80130a8:	f7fe ff94 	bl	8011fd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80130ac:	bf00      	nop
 80130ae:	3718      	adds	r7, #24
 80130b0:	46bd      	mov	sp, r7
 80130b2:	bd80      	pop	{r7, pc}
 80130b4:	20008ee4 	.word	0x20008ee4
 80130b8:	20008edc 	.word	0x20008edc

080130bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80130bc:	b480      	push	{r7}
 80130be:	b085      	sub	sp, #20
 80130c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80130c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80130c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80130c8:	4b27      	ldr	r3, [pc, #156]	@ (8013168 <prvHeapInit+0xac>)
 80130ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	f003 0307 	and.w	r3, r3, #7
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d00c      	beq.n	80130f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	3307      	adds	r3, #7
 80130da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	f023 0307 	bic.w	r3, r3, #7
 80130e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80130e4:	68ba      	ldr	r2, [r7, #8]
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	1ad3      	subs	r3, r2, r3
 80130ea:	4a1f      	ldr	r2, [pc, #124]	@ (8013168 <prvHeapInit+0xac>)
 80130ec:	4413      	add	r3, r2
 80130ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80130f4:	4a1d      	ldr	r2, [pc, #116]	@ (801316c <prvHeapInit+0xb0>)
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80130fa:	4b1c      	ldr	r3, [pc, #112]	@ (801316c <prvHeapInit+0xb0>)
 80130fc:	2200      	movs	r2, #0
 80130fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	68ba      	ldr	r2, [r7, #8]
 8013104:	4413      	add	r3, r2
 8013106:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013108:	2208      	movs	r2, #8
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	1a9b      	subs	r3, r3, r2
 801310e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	f023 0307 	bic.w	r3, r3, #7
 8013116:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	4a15      	ldr	r2, [pc, #84]	@ (8013170 <prvHeapInit+0xb4>)
 801311c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801311e:	4b14      	ldr	r3, [pc, #80]	@ (8013170 <prvHeapInit+0xb4>)
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	2200      	movs	r2, #0
 8013124:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013126:	4b12      	ldr	r3, [pc, #72]	@ (8013170 <prvHeapInit+0xb4>)
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	2200      	movs	r2, #0
 801312c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013132:	683b      	ldr	r3, [r7, #0]
 8013134:	68fa      	ldr	r2, [r7, #12]
 8013136:	1ad2      	subs	r2, r2, r3
 8013138:	683b      	ldr	r3, [r7, #0]
 801313a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801313c:	4b0c      	ldr	r3, [pc, #48]	@ (8013170 <prvHeapInit+0xb4>)
 801313e:	681a      	ldr	r2, [r3, #0]
 8013140:	683b      	ldr	r3, [r7, #0]
 8013142:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013144:	683b      	ldr	r3, [r7, #0]
 8013146:	685b      	ldr	r3, [r3, #4]
 8013148:	4a0a      	ldr	r2, [pc, #40]	@ (8013174 <prvHeapInit+0xb8>)
 801314a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801314c:	683b      	ldr	r3, [r7, #0]
 801314e:	685b      	ldr	r3, [r3, #4]
 8013150:	4a09      	ldr	r2, [pc, #36]	@ (8013178 <prvHeapInit+0xbc>)
 8013152:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013154:	4b09      	ldr	r3, [pc, #36]	@ (801317c <prvHeapInit+0xc0>)
 8013156:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801315a:	601a      	str	r2, [r3, #0]
}
 801315c:	bf00      	nop
 801315e:	3714      	adds	r7, #20
 8013160:	46bd      	mov	sp, r7
 8013162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013166:	4770      	bx	lr
 8013168:	20000ed0 	.word	0x20000ed0
 801316c:	20008ed0 	.word	0x20008ed0
 8013170:	20008ed8 	.word	0x20008ed8
 8013174:	20008ee0 	.word	0x20008ee0
 8013178:	20008edc 	.word	0x20008edc
 801317c:	20008ee4 	.word	0x20008ee4

08013180 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013180:	b480      	push	{r7}
 8013182:	b085      	sub	sp, #20
 8013184:	af00      	add	r7, sp, #0
 8013186:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013188:	4b28      	ldr	r3, [pc, #160]	@ (801322c <prvInsertBlockIntoFreeList+0xac>)
 801318a:	60fb      	str	r3, [r7, #12]
 801318c:	e002      	b.n	8013194 <prvInsertBlockIntoFreeList+0x14>
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	60fb      	str	r3, [r7, #12]
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	687a      	ldr	r2, [r7, #4]
 801319a:	429a      	cmp	r2, r3
 801319c:	d8f7      	bhi.n	801318e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	685b      	ldr	r3, [r3, #4]
 80131a6:	68ba      	ldr	r2, [r7, #8]
 80131a8:	4413      	add	r3, r2
 80131aa:	687a      	ldr	r2, [r7, #4]
 80131ac:	429a      	cmp	r2, r3
 80131ae:	d108      	bne.n	80131c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	685a      	ldr	r2, [r3, #4]
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	685b      	ldr	r3, [r3, #4]
 80131b8:	441a      	add	r2, r3
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	685b      	ldr	r3, [r3, #4]
 80131ca:	68ba      	ldr	r2, [r7, #8]
 80131cc:	441a      	add	r2, r3
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	429a      	cmp	r2, r3
 80131d4:	d118      	bne.n	8013208 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	681a      	ldr	r2, [r3, #0]
 80131da:	4b15      	ldr	r3, [pc, #84]	@ (8013230 <prvInsertBlockIntoFreeList+0xb0>)
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	429a      	cmp	r2, r3
 80131e0:	d00d      	beq.n	80131fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	685a      	ldr	r2, [r3, #4]
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	685b      	ldr	r3, [r3, #4]
 80131ec:	441a      	add	r2, r3
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	681a      	ldr	r2, [r3, #0]
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	601a      	str	r2, [r3, #0]
 80131fc:	e008      	b.n	8013210 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80131fe:	4b0c      	ldr	r3, [pc, #48]	@ (8013230 <prvInsertBlockIntoFreeList+0xb0>)
 8013200:	681a      	ldr	r2, [r3, #0]
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	601a      	str	r2, [r3, #0]
 8013206:	e003      	b.n	8013210 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	681a      	ldr	r2, [r3, #0]
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013210:	68fa      	ldr	r2, [r7, #12]
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	429a      	cmp	r2, r3
 8013216:	d002      	beq.n	801321e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	687a      	ldr	r2, [r7, #4]
 801321c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801321e:	bf00      	nop
 8013220:	3714      	adds	r7, #20
 8013222:	46bd      	mov	sp, r7
 8013224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013228:	4770      	bx	lr
 801322a:	bf00      	nop
 801322c:	20008ed0 	.word	0x20008ed0
 8013230:	20008ed8 	.word	0x20008ed8

08013234 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8013234:	b580      	push	{r7, lr}
 8013236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8013238:	2201      	movs	r2, #1
 801323a:	490e      	ldr	r1, [pc, #56]	@ (8013274 <MX_USB_HOST_Init+0x40>)
 801323c:	480e      	ldr	r0, [pc, #56]	@ (8013278 <MX_USB_HOST_Init+0x44>)
 801323e:	f7fb fddf 	bl	800ee00 <USBH_Init>
 8013242:	4603      	mov	r3, r0
 8013244:	2b00      	cmp	r3, #0
 8013246:	d001      	beq.n	801324c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8013248:	f7ee fc18 	bl	8001a7c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801324c:	490b      	ldr	r1, [pc, #44]	@ (801327c <MX_USB_HOST_Init+0x48>)
 801324e:	480a      	ldr	r0, [pc, #40]	@ (8013278 <MX_USB_HOST_Init+0x44>)
 8013250:	f7fb fea9 	bl	800efa6 <USBH_RegisterClass>
 8013254:	4603      	mov	r3, r0
 8013256:	2b00      	cmp	r3, #0
 8013258:	d001      	beq.n	801325e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801325a:	f7ee fc0f 	bl	8001a7c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801325e:	4806      	ldr	r0, [pc, #24]	@ (8013278 <MX_USB_HOST_Init+0x44>)
 8013260:	f7fb ff2d 	bl	800f0be <USBH_Start>
 8013264:	4603      	mov	r3, r0
 8013266:	2b00      	cmp	r3, #0
 8013268:	d001      	beq.n	801326e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801326a:	f7ee fc07 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801326e:	bf00      	nop
 8013270:	bd80      	pop	{r7, pc}
 8013272:	bf00      	nop
 8013274:	08013281 	.word	0x08013281
 8013278:	20008ee8 	.word	0x20008ee8
 801327c:	2000000c 	.word	0x2000000c

08013280 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8013280:	b480      	push	{r7}
 8013282:	b083      	sub	sp, #12
 8013284:	af00      	add	r7, sp, #0
 8013286:	6078      	str	r0, [r7, #4]
 8013288:	460b      	mov	r3, r1
 801328a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801328c:	78fb      	ldrb	r3, [r7, #3]
 801328e:	3b01      	subs	r3, #1
 8013290:	2b04      	cmp	r3, #4
 8013292:	d819      	bhi.n	80132c8 <USBH_UserProcess+0x48>
 8013294:	a201      	add	r2, pc, #4	@ (adr r2, 801329c <USBH_UserProcess+0x1c>)
 8013296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801329a:	bf00      	nop
 801329c:	080132c9 	.word	0x080132c9
 80132a0:	080132b9 	.word	0x080132b9
 80132a4:	080132c9 	.word	0x080132c9
 80132a8:	080132c1 	.word	0x080132c1
 80132ac:	080132b1 	.word	0x080132b1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80132b0:	4b09      	ldr	r3, [pc, #36]	@ (80132d8 <USBH_UserProcess+0x58>)
 80132b2:	2203      	movs	r2, #3
 80132b4:	701a      	strb	r2, [r3, #0]
  break;
 80132b6:	e008      	b.n	80132ca <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80132b8:	4b07      	ldr	r3, [pc, #28]	@ (80132d8 <USBH_UserProcess+0x58>)
 80132ba:	2202      	movs	r2, #2
 80132bc:	701a      	strb	r2, [r3, #0]
  break;
 80132be:	e004      	b.n	80132ca <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80132c0:	4b05      	ldr	r3, [pc, #20]	@ (80132d8 <USBH_UserProcess+0x58>)
 80132c2:	2201      	movs	r2, #1
 80132c4:	701a      	strb	r2, [r3, #0]
  break;
 80132c6:	e000      	b.n	80132ca <USBH_UserProcess+0x4a>

  default:
  break;
 80132c8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80132ca:	bf00      	nop
 80132cc:	370c      	adds	r7, #12
 80132ce:	46bd      	mov	sp, r7
 80132d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d4:	4770      	bx	lr
 80132d6:	bf00      	nop
 80132d8:	200092cc 	.word	0x200092cc

080132dc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80132dc:	b580      	push	{r7, lr}
 80132de:	b08a      	sub	sp, #40	@ 0x28
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80132e4:	f107 0314 	add.w	r3, r7, #20
 80132e8:	2200      	movs	r2, #0
 80132ea:	601a      	str	r2, [r3, #0]
 80132ec:	605a      	str	r2, [r3, #4]
 80132ee:	609a      	str	r2, [r3, #8]
 80132f0:	60da      	str	r2, [r3, #12]
 80132f2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80132fc:	d13c      	bne.n	8013378 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80132fe:	4b20      	ldr	r3, [pc, #128]	@ (8013380 <HAL_HCD_MspInit+0xa4>)
 8013300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013302:	4a1f      	ldr	r2, [pc, #124]	@ (8013380 <HAL_HCD_MspInit+0xa4>)
 8013304:	f043 0301 	orr.w	r3, r3, #1
 8013308:	6313      	str	r3, [r2, #48]	@ 0x30
 801330a:	4b1d      	ldr	r3, [pc, #116]	@ (8013380 <HAL_HCD_MspInit+0xa4>)
 801330c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801330e:	f003 0301 	and.w	r3, r3, #1
 8013312:	613b      	str	r3, [r7, #16]
 8013314:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8013316:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 801331a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801331c:	2302      	movs	r3, #2
 801331e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013320:	2300      	movs	r3, #0
 8013322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013324:	2303      	movs	r3, #3
 8013326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8013328:	230a      	movs	r3, #10
 801332a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801332c:	f107 0314 	add.w	r3, r7, #20
 8013330:	4619      	mov	r1, r3
 8013332:	4814      	ldr	r0, [pc, #80]	@ (8013384 <HAL_HCD_MspInit+0xa8>)
 8013334:	f7f1 f8a2 	bl	800447c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013338:	4b11      	ldr	r3, [pc, #68]	@ (8013380 <HAL_HCD_MspInit+0xa4>)
 801333a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801333c:	4a10      	ldr	r2, [pc, #64]	@ (8013380 <HAL_HCD_MspInit+0xa4>)
 801333e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013342:	6353      	str	r3, [r2, #52]	@ 0x34
 8013344:	4b0e      	ldr	r3, [pc, #56]	@ (8013380 <HAL_HCD_MspInit+0xa4>)
 8013346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801334c:	60fb      	str	r3, [r7, #12]
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	4b0b      	ldr	r3, [pc, #44]	@ (8013380 <HAL_HCD_MspInit+0xa4>)
 8013352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013354:	4a0a      	ldr	r2, [pc, #40]	@ (8013380 <HAL_HCD_MspInit+0xa4>)
 8013356:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801335a:	6453      	str	r3, [r2, #68]	@ 0x44
 801335c:	4b08      	ldr	r3, [pc, #32]	@ (8013380 <HAL_HCD_MspInit+0xa4>)
 801335e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013360:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013364:	60bb      	str	r3, [r7, #8]
 8013366:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8013368:	2200      	movs	r2, #0
 801336a:	2105      	movs	r1, #5
 801336c:	2043      	movs	r0, #67	@ 0x43
 801336e:	f7f0 f91b 	bl	80035a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8013372:	2043      	movs	r0, #67	@ 0x43
 8013374:	f7f0 f934 	bl	80035e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013378:	bf00      	nop
 801337a:	3728      	adds	r7, #40	@ 0x28
 801337c:	46bd      	mov	sp, r7
 801337e:	bd80      	pop	{r7, pc}
 8013380:	40023800 	.word	0x40023800
 8013384:	40020000 	.word	0x40020000

08013388 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8013388:	b580      	push	{r7, lr}
 801338a:	b082      	sub	sp, #8
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8013396:	4618      	mov	r0, r3
 8013398:	f7fc fac9 	bl	800f92e <USBH_LL_IncTimer>
}
 801339c:	bf00      	nop
 801339e:	3708      	adds	r7, #8
 80133a0:	46bd      	mov	sp, r7
 80133a2:	bd80      	pop	{r7, pc}

080133a4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b082      	sub	sp, #8
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80133b2:	4618      	mov	r0, r3
 80133b4:	f7fc fb09 	bl	800f9ca <USBH_LL_Connect>
}
 80133b8:	bf00      	nop
 80133ba:	3708      	adds	r7, #8
 80133bc:	46bd      	mov	sp, r7
 80133be:	bd80      	pop	{r7, pc}

080133c0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b082      	sub	sp, #8
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80133ce:	4618      	mov	r0, r3
 80133d0:	f7fc fb16 	bl	800fa00 <USBH_LL_Disconnect>
}
 80133d4:	bf00      	nop
 80133d6:	3708      	adds	r7, #8
 80133d8:	46bd      	mov	sp, r7
 80133da:	bd80      	pop	{r7, pc}

080133dc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b082      	sub	sp, #8
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
 80133e4:	460b      	mov	r3, r1
 80133e6:	70fb      	strb	r3, [r7, #3]
 80133e8:	4613      	mov	r3, r2
 80133ea:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80133f2:	4618      	mov	r0, r3
 80133f4:	f7fc fb6a 	bl	800facc <USBH_LL_NotifyURBChange>
#endif
}
 80133f8:	bf00      	nop
 80133fa:	3708      	adds	r7, #8
 80133fc:	46bd      	mov	sp, r7
 80133fe:	bd80      	pop	{r7, pc}

08013400 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8013400:	b580      	push	{r7, lr}
 8013402:	b082      	sub	sp, #8
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801340e:	4618      	mov	r0, r3
 8013410:	f7fc fab7 	bl	800f982 <USBH_LL_PortEnabled>
}
 8013414:	bf00      	nop
 8013416:	3708      	adds	r7, #8
 8013418:	46bd      	mov	sp, r7
 801341a:	bd80      	pop	{r7, pc}

0801341c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b082      	sub	sp, #8
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801342a:	4618      	mov	r0, r3
 801342c:	f7fc fabb 	bl	800f9a6 <USBH_LL_PortDisabled>
}
 8013430:	bf00      	nop
 8013432:	3708      	adds	r7, #8
 8013434:	46bd      	mov	sp, r7
 8013436:	bd80      	pop	{r7, pc}

08013438 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8013438:	b580      	push	{r7, lr}
 801343a:	b082      	sub	sp, #8
 801343c:	af00      	add	r7, sp, #0
 801343e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8013446:	2b01      	cmp	r3, #1
 8013448:	d12a      	bne.n	80134a0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801344a:	4a18      	ldr	r2, [pc, #96]	@ (80134ac <USBH_LL_Init+0x74>)
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	4a15      	ldr	r2, [pc, #84]	@ (80134ac <USBH_LL_Init+0x74>)
 8013456:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801345a:	4b14      	ldr	r3, [pc, #80]	@ (80134ac <USBH_LL_Init+0x74>)
 801345c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8013460:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8013462:	4b12      	ldr	r3, [pc, #72]	@ (80134ac <USBH_LL_Init+0x74>)
 8013464:	2208      	movs	r2, #8
 8013466:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8013468:	4b10      	ldr	r3, [pc, #64]	@ (80134ac <USBH_LL_Init+0x74>)
 801346a:	2201      	movs	r2, #1
 801346c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801346e:	4b0f      	ldr	r3, [pc, #60]	@ (80134ac <USBH_LL_Init+0x74>)
 8013470:	2200      	movs	r2, #0
 8013472:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8013474:	4b0d      	ldr	r3, [pc, #52]	@ (80134ac <USBH_LL_Init+0x74>)
 8013476:	2202      	movs	r2, #2
 8013478:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801347a:	4b0c      	ldr	r3, [pc, #48]	@ (80134ac <USBH_LL_Init+0x74>)
 801347c:	2200      	movs	r2, #0
 801347e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8013480:	480a      	ldr	r0, [pc, #40]	@ (80134ac <USBH_LL_Init+0x74>)
 8013482:	f7f1 f9d8 	bl	8004836 <HAL_HCD_Init>
 8013486:	4603      	mov	r3, r0
 8013488:	2b00      	cmp	r3, #0
 801348a:	d001      	beq.n	8013490 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801348c:	f7ee faf6 	bl	8001a7c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8013490:	4806      	ldr	r0, [pc, #24]	@ (80134ac <USBH_LL_Init+0x74>)
 8013492:	f7f1 fe39 	bl	8005108 <HAL_HCD_GetCurrentFrame>
 8013496:	4603      	mov	r3, r0
 8013498:	4619      	mov	r1, r3
 801349a:	6878      	ldr	r0, [r7, #4]
 801349c:	f7fc fa38 	bl	800f910 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80134a0:	2300      	movs	r3, #0
}
 80134a2:	4618      	mov	r0, r3
 80134a4:	3708      	adds	r7, #8
 80134a6:	46bd      	mov	sp, r7
 80134a8:	bd80      	pop	{r7, pc}
 80134aa:	bf00      	nop
 80134ac:	200092d0 	.word	0x200092d0

080134b0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80134b0:	b580      	push	{r7, lr}
 80134b2:	b084      	sub	sp, #16
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134b8:	2300      	movs	r3, #0
 80134ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80134bc:	2300      	movs	r3, #0
 80134be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80134c6:	4618      	mov	r0, r3
 80134c8:	f7f1 fda6 	bl	8005018 <HAL_HCD_Start>
 80134cc:	4603      	mov	r3, r0
 80134ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80134d0:	7bfb      	ldrb	r3, [r7, #15]
 80134d2:	4618      	mov	r0, r3
 80134d4:	f000 f95e 	bl	8013794 <USBH_Get_USB_Status>
 80134d8:	4603      	mov	r3, r0
 80134da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80134dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80134de:	4618      	mov	r0, r3
 80134e0:	3710      	adds	r7, #16
 80134e2:	46bd      	mov	sp, r7
 80134e4:	bd80      	pop	{r7, pc}

080134e6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80134e6:	b580      	push	{r7, lr}
 80134e8:	b084      	sub	sp, #16
 80134ea:	af00      	add	r7, sp, #0
 80134ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134ee:	2300      	movs	r3, #0
 80134f0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80134f2:	2300      	movs	r3, #0
 80134f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80134fc:	4618      	mov	r0, r3
 80134fe:	f7f1 fdae 	bl	800505e <HAL_HCD_Stop>
 8013502:	4603      	mov	r3, r0
 8013504:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013506:	7bfb      	ldrb	r3, [r7, #15]
 8013508:	4618      	mov	r0, r3
 801350a:	f000 f943 	bl	8013794 <USBH_Get_USB_Status>
 801350e:	4603      	mov	r3, r0
 8013510:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013512:	7bbb      	ldrb	r3, [r7, #14]
}
 8013514:	4618      	mov	r0, r3
 8013516:	3710      	adds	r7, #16
 8013518:	46bd      	mov	sp, r7
 801351a:	bd80      	pop	{r7, pc}

0801351c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801351c:	b580      	push	{r7, lr}
 801351e:	b084      	sub	sp, #16
 8013520:	af00      	add	r7, sp, #0
 8013522:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8013524:	2301      	movs	r3, #1
 8013526:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801352e:	4618      	mov	r0, r3
 8013530:	f7f1 fdf8 	bl	8005124 <HAL_HCD_GetCurrentSpeed>
 8013534:	4603      	mov	r3, r0
 8013536:	2b02      	cmp	r3, #2
 8013538:	d00c      	beq.n	8013554 <USBH_LL_GetSpeed+0x38>
 801353a:	2b02      	cmp	r3, #2
 801353c:	d80d      	bhi.n	801355a <USBH_LL_GetSpeed+0x3e>
 801353e:	2b00      	cmp	r3, #0
 8013540:	d002      	beq.n	8013548 <USBH_LL_GetSpeed+0x2c>
 8013542:	2b01      	cmp	r3, #1
 8013544:	d003      	beq.n	801354e <USBH_LL_GetSpeed+0x32>
 8013546:	e008      	b.n	801355a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8013548:	2300      	movs	r3, #0
 801354a:	73fb      	strb	r3, [r7, #15]
    break;
 801354c:	e008      	b.n	8013560 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801354e:	2301      	movs	r3, #1
 8013550:	73fb      	strb	r3, [r7, #15]
    break;
 8013552:	e005      	b.n	8013560 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8013554:	2302      	movs	r3, #2
 8013556:	73fb      	strb	r3, [r7, #15]
    break;
 8013558:	e002      	b.n	8013560 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801355a:	2301      	movs	r3, #1
 801355c:	73fb      	strb	r3, [r7, #15]
    break;
 801355e:	bf00      	nop
  }
  return  speed;
 8013560:	7bfb      	ldrb	r3, [r7, #15]
}
 8013562:	4618      	mov	r0, r3
 8013564:	3710      	adds	r7, #16
 8013566:	46bd      	mov	sp, r7
 8013568:	bd80      	pop	{r7, pc}

0801356a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801356a:	b580      	push	{r7, lr}
 801356c:	b084      	sub	sp, #16
 801356e:	af00      	add	r7, sp, #0
 8013570:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013572:	2300      	movs	r3, #0
 8013574:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013576:	2300      	movs	r3, #0
 8013578:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013580:	4618      	mov	r0, r3
 8013582:	f7f1 fd89 	bl	8005098 <HAL_HCD_ResetPort>
 8013586:	4603      	mov	r3, r0
 8013588:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801358a:	7bfb      	ldrb	r3, [r7, #15]
 801358c:	4618      	mov	r0, r3
 801358e:	f000 f901 	bl	8013794 <USBH_Get_USB_Status>
 8013592:	4603      	mov	r3, r0
 8013594:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013596:	7bbb      	ldrb	r3, [r7, #14]
}
 8013598:	4618      	mov	r0, r3
 801359a:	3710      	adds	r7, #16
 801359c:	46bd      	mov	sp, r7
 801359e:	bd80      	pop	{r7, pc}

080135a0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b082      	sub	sp, #8
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	6078      	str	r0, [r7, #4]
 80135a8:	460b      	mov	r3, r1
 80135aa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80135b2:	78fa      	ldrb	r2, [r7, #3]
 80135b4:	4611      	mov	r1, r2
 80135b6:	4618      	mov	r0, r3
 80135b8:	f7f1 fd91 	bl	80050de <HAL_HCD_HC_GetXferCount>
 80135bc:	4603      	mov	r3, r0
}
 80135be:	4618      	mov	r0, r3
 80135c0:	3708      	adds	r7, #8
 80135c2:	46bd      	mov	sp, r7
 80135c4:	bd80      	pop	{r7, pc}

080135c6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80135c6:	b590      	push	{r4, r7, lr}
 80135c8:	b089      	sub	sp, #36	@ 0x24
 80135ca:	af04      	add	r7, sp, #16
 80135cc:	6078      	str	r0, [r7, #4]
 80135ce:	4608      	mov	r0, r1
 80135d0:	4611      	mov	r1, r2
 80135d2:	461a      	mov	r2, r3
 80135d4:	4603      	mov	r3, r0
 80135d6:	70fb      	strb	r3, [r7, #3]
 80135d8:	460b      	mov	r3, r1
 80135da:	70bb      	strb	r3, [r7, #2]
 80135dc:	4613      	mov	r3, r2
 80135de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80135e0:	2300      	movs	r3, #0
 80135e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80135e4:	2300      	movs	r3, #0
 80135e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80135ee:	787c      	ldrb	r4, [r7, #1]
 80135f0:	78ba      	ldrb	r2, [r7, #2]
 80135f2:	78f9      	ldrb	r1, [r7, #3]
 80135f4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80135f6:	9302      	str	r3, [sp, #8]
 80135f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80135fc:	9301      	str	r3, [sp, #4]
 80135fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013602:	9300      	str	r3, [sp, #0]
 8013604:	4623      	mov	r3, r4
 8013606:	f7f1 f97d 	bl	8004904 <HAL_HCD_HC_Init>
 801360a:	4603      	mov	r3, r0
 801360c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801360e:	7bfb      	ldrb	r3, [r7, #15]
 8013610:	4618      	mov	r0, r3
 8013612:	f000 f8bf 	bl	8013794 <USBH_Get_USB_Status>
 8013616:	4603      	mov	r3, r0
 8013618:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801361a:	7bbb      	ldrb	r3, [r7, #14]
}
 801361c:	4618      	mov	r0, r3
 801361e:	3714      	adds	r7, #20
 8013620:	46bd      	mov	sp, r7
 8013622:	bd90      	pop	{r4, r7, pc}

08013624 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013624:	b580      	push	{r7, lr}
 8013626:	b084      	sub	sp, #16
 8013628:	af00      	add	r7, sp, #0
 801362a:	6078      	str	r0, [r7, #4]
 801362c:	460b      	mov	r3, r1
 801362e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013630:	2300      	movs	r3, #0
 8013632:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013634:	2300      	movs	r3, #0
 8013636:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801363e:	78fa      	ldrb	r2, [r7, #3]
 8013640:	4611      	mov	r1, r2
 8013642:	4618      	mov	r0, r3
 8013644:	f7f1 fa16 	bl	8004a74 <HAL_HCD_HC_Halt>
 8013648:	4603      	mov	r3, r0
 801364a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801364c:	7bfb      	ldrb	r3, [r7, #15]
 801364e:	4618      	mov	r0, r3
 8013650:	f000 f8a0 	bl	8013794 <USBH_Get_USB_Status>
 8013654:	4603      	mov	r3, r0
 8013656:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013658:	7bbb      	ldrb	r3, [r7, #14]
}
 801365a:	4618      	mov	r0, r3
 801365c:	3710      	adds	r7, #16
 801365e:	46bd      	mov	sp, r7
 8013660:	bd80      	pop	{r7, pc}

08013662 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8013662:	b590      	push	{r4, r7, lr}
 8013664:	b089      	sub	sp, #36	@ 0x24
 8013666:	af04      	add	r7, sp, #16
 8013668:	6078      	str	r0, [r7, #4]
 801366a:	4608      	mov	r0, r1
 801366c:	4611      	mov	r1, r2
 801366e:	461a      	mov	r2, r3
 8013670:	4603      	mov	r3, r0
 8013672:	70fb      	strb	r3, [r7, #3]
 8013674:	460b      	mov	r3, r1
 8013676:	70bb      	strb	r3, [r7, #2]
 8013678:	4613      	mov	r3, r2
 801367a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801367c:	2300      	movs	r3, #0
 801367e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013680:	2300      	movs	r3, #0
 8013682:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801368a:	787c      	ldrb	r4, [r7, #1]
 801368c:	78ba      	ldrb	r2, [r7, #2]
 801368e:	78f9      	ldrb	r1, [r7, #3]
 8013690:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8013694:	9303      	str	r3, [sp, #12]
 8013696:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8013698:	9302      	str	r3, [sp, #8]
 801369a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801369c:	9301      	str	r3, [sp, #4]
 801369e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80136a2:	9300      	str	r3, [sp, #0]
 80136a4:	4623      	mov	r3, r4
 80136a6:	f7f1 fa09 	bl	8004abc <HAL_HCD_HC_SubmitRequest>
 80136aa:	4603      	mov	r3, r0
 80136ac:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80136ae:	7bfb      	ldrb	r3, [r7, #15]
 80136b0:	4618      	mov	r0, r3
 80136b2:	f000 f86f 	bl	8013794 <USBH_Get_USB_Status>
 80136b6:	4603      	mov	r3, r0
 80136b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80136ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80136bc:	4618      	mov	r0, r3
 80136be:	3714      	adds	r7, #20
 80136c0:	46bd      	mov	sp, r7
 80136c2:	bd90      	pop	{r4, r7, pc}

080136c4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b082      	sub	sp, #8
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
 80136cc:	460b      	mov	r3, r1
 80136ce:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80136d6:	78fa      	ldrb	r2, [r7, #3]
 80136d8:	4611      	mov	r1, r2
 80136da:	4618      	mov	r0, r3
 80136dc:	f7f1 fcea 	bl	80050b4 <HAL_HCD_HC_GetURBState>
 80136e0:	4603      	mov	r3, r0
}
 80136e2:	4618      	mov	r0, r3
 80136e4:	3708      	adds	r7, #8
 80136e6:	46bd      	mov	sp, r7
 80136e8:	bd80      	pop	{r7, pc}

080136ea <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80136ea:	b580      	push	{r7, lr}
 80136ec:	b082      	sub	sp, #8
 80136ee:	af00      	add	r7, sp, #0
 80136f0:	6078      	str	r0, [r7, #4]
 80136f2:	460b      	mov	r3, r1
 80136f4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80136fc:	2b01      	cmp	r3, #1
 80136fe:	d103      	bne.n	8013708 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8013700:	78fb      	ldrb	r3, [r7, #3]
 8013702:	4618      	mov	r0, r3
 8013704:	f000 f872 	bl	80137ec <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8013708:	20c8      	movs	r0, #200	@ 0xc8
 801370a:	f7ef fbd9 	bl	8002ec0 <HAL_Delay>
  return USBH_OK;
 801370e:	2300      	movs	r3, #0
}
 8013710:	4618      	mov	r0, r3
 8013712:	3708      	adds	r7, #8
 8013714:	46bd      	mov	sp, r7
 8013716:	bd80      	pop	{r7, pc}

08013718 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8013718:	b480      	push	{r7}
 801371a:	b085      	sub	sp, #20
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
 8013720:	460b      	mov	r3, r1
 8013722:	70fb      	strb	r3, [r7, #3]
 8013724:	4613      	mov	r3, r2
 8013726:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801372e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8013730:	78fa      	ldrb	r2, [r7, #3]
 8013732:	68f9      	ldr	r1, [r7, #12]
 8013734:	4613      	mov	r3, r2
 8013736:	011b      	lsls	r3, r3, #4
 8013738:	1a9b      	subs	r3, r3, r2
 801373a:	009b      	lsls	r3, r3, #2
 801373c:	440b      	add	r3, r1
 801373e:	3317      	adds	r3, #23
 8013740:	781b      	ldrb	r3, [r3, #0]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d00a      	beq.n	801375c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8013746:	78fa      	ldrb	r2, [r7, #3]
 8013748:	68f9      	ldr	r1, [r7, #12]
 801374a:	4613      	mov	r3, r2
 801374c:	011b      	lsls	r3, r3, #4
 801374e:	1a9b      	subs	r3, r3, r2
 8013750:	009b      	lsls	r3, r3, #2
 8013752:	440b      	add	r3, r1
 8013754:	333c      	adds	r3, #60	@ 0x3c
 8013756:	78ba      	ldrb	r2, [r7, #2]
 8013758:	701a      	strb	r2, [r3, #0]
 801375a:	e009      	b.n	8013770 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801375c:	78fa      	ldrb	r2, [r7, #3]
 801375e:	68f9      	ldr	r1, [r7, #12]
 8013760:	4613      	mov	r3, r2
 8013762:	011b      	lsls	r3, r3, #4
 8013764:	1a9b      	subs	r3, r3, r2
 8013766:	009b      	lsls	r3, r3, #2
 8013768:	440b      	add	r3, r1
 801376a:	333d      	adds	r3, #61	@ 0x3d
 801376c:	78ba      	ldrb	r2, [r7, #2]
 801376e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8013770:	2300      	movs	r3, #0
}
 8013772:	4618      	mov	r0, r3
 8013774:	3714      	adds	r7, #20
 8013776:	46bd      	mov	sp, r7
 8013778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377c:	4770      	bx	lr

0801377e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801377e:	b580      	push	{r7, lr}
 8013780:	b082      	sub	sp, #8
 8013782:	af00      	add	r7, sp, #0
 8013784:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8013786:	6878      	ldr	r0, [r7, #4]
 8013788:	f7ef fb9a 	bl	8002ec0 <HAL_Delay>
}
 801378c:	bf00      	nop
 801378e:	3708      	adds	r7, #8
 8013790:	46bd      	mov	sp, r7
 8013792:	bd80      	pop	{r7, pc}

08013794 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013794:	b480      	push	{r7}
 8013796:	b085      	sub	sp, #20
 8013798:	af00      	add	r7, sp, #0
 801379a:	4603      	mov	r3, r0
 801379c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801379e:	2300      	movs	r3, #0
 80137a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80137a2:	79fb      	ldrb	r3, [r7, #7]
 80137a4:	2b03      	cmp	r3, #3
 80137a6:	d817      	bhi.n	80137d8 <USBH_Get_USB_Status+0x44>
 80137a8:	a201      	add	r2, pc, #4	@ (adr r2, 80137b0 <USBH_Get_USB_Status+0x1c>)
 80137aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137ae:	bf00      	nop
 80137b0:	080137c1 	.word	0x080137c1
 80137b4:	080137c7 	.word	0x080137c7
 80137b8:	080137cd 	.word	0x080137cd
 80137bc:	080137d3 	.word	0x080137d3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80137c0:	2300      	movs	r3, #0
 80137c2:	73fb      	strb	r3, [r7, #15]
    break;
 80137c4:	e00b      	b.n	80137de <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80137c6:	2302      	movs	r3, #2
 80137c8:	73fb      	strb	r3, [r7, #15]
    break;
 80137ca:	e008      	b.n	80137de <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80137cc:	2301      	movs	r3, #1
 80137ce:	73fb      	strb	r3, [r7, #15]
    break;
 80137d0:	e005      	b.n	80137de <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80137d2:	2302      	movs	r3, #2
 80137d4:	73fb      	strb	r3, [r7, #15]
    break;
 80137d6:	e002      	b.n	80137de <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80137d8:	2302      	movs	r3, #2
 80137da:	73fb      	strb	r3, [r7, #15]
    break;
 80137dc:	bf00      	nop
  }
  return usb_status;
 80137de:	7bfb      	ldrb	r3, [r7, #15]
}
 80137e0:	4618      	mov	r0, r3
 80137e2:	3714      	adds	r7, #20
 80137e4:	46bd      	mov	sp, r7
 80137e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ea:	4770      	bx	lr

080137ec <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b084      	sub	sp, #16
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	4603      	mov	r3, r0
 80137f4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80137f6:	79fb      	ldrb	r3, [r7, #7]
 80137f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80137fa:	79fb      	ldrb	r3, [r7, #7]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d102      	bne.n	8013806 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8013800:	2300      	movs	r3, #0
 8013802:	73fb      	strb	r3, [r7, #15]
 8013804:	e001      	b.n	801380a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8013806:	2301      	movs	r3, #1
 8013808:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801380a:	7bfb      	ldrb	r3, [r7, #15]
 801380c:	461a      	mov	r2, r3
 801380e:	2120      	movs	r1, #32
 8013810:	4803      	ldr	r0, [pc, #12]	@ (8013820 <MX_DriverVbusFS+0x34>)
 8013812:	f7f0 fff7 	bl	8004804 <HAL_GPIO_WritePin>
}
 8013816:	bf00      	nop
 8013818:	3710      	adds	r7, #16
 801381a:	46bd      	mov	sp, r7
 801381c:	bd80      	pop	{r7, pc}
 801381e:	bf00      	nop
 8013820:	40020c00 	.word	0x40020c00

08013824 <malloc>:
 8013824:	4b02      	ldr	r3, [pc, #8]	@ (8013830 <malloc+0xc>)
 8013826:	4601      	mov	r1, r0
 8013828:	6818      	ldr	r0, [r3, #0]
 801382a:	f000 b82d 	b.w	8013888 <_malloc_r>
 801382e:	bf00      	nop
 8013830:	20000030 	.word	0x20000030

08013834 <free>:
 8013834:	4b02      	ldr	r3, [pc, #8]	@ (8013840 <free+0xc>)
 8013836:	4601      	mov	r1, r0
 8013838:	6818      	ldr	r0, [r3, #0]
 801383a:	f000 b903 	b.w	8013a44 <_free_r>
 801383e:	bf00      	nop
 8013840:	20000030 	.word	0x20000030

08013844 <sbrk_aligned>:
 8013844:	b570      	push	{r4, r5, r6, lr}
 8013846:	4e0f      	ldr	r6, [pc, #60]	@ (8013884 <sbrk_aligned+0x40>)
 8013848:	460c      	mov	r4, r1
 801384a:	6831      	ldr	r1, [r6, #0]
 801384c:	4605      	mov	r5, r0
 801384e:	b911      	cbnz	r1, 8013856 <sbrk_aligned+0x12>
 8013850:	f000 f8ae 	bl	80139b0 <_sbrk_r>
 8013854:	6030      	str	r0, [r6, #0]
 8013856:	4621      	mov	r1, r4
 8013858:	4628      	mov	r0, r5
 801385a:	f000 f8a9 	bl	80139b0 <_sbrk_r>
 801385e:	1c43      	adds	r3, r0, #1
 8013860:	d103      	bne.n	801386a <sbrk_aligned+0x26>
 8013862:	f04f 34ff 	mov.w	r4, #4294967295
 8013866:	4620      	mov	r0, r4
 8013868:	bd70      	pop	{r4, r5, r6, pc}
 801386a:	1cc4      	adds	r4, r0, #3
 801386c:	f024 0403 	bic.w	r4, r4, #3
 8013870:	42a0      	cmp	r0, r4
 8013872:	d0f8      	beq.n	8013866 <sbrk_aligned+0x22>
 8013874:	1a21      	subs	r1, r4, r0
 8013876:	4628      	mov	r0, r5
 8013878:	f000 f89a 	bl	80139b0 <_sbrk_r>
 801387c:	3001      	adds	r0, #1
 801387e:	d1f2      	bne.n	8013866 <sbrk_aligned+0x22>
 8013880:	e7ef      	b.n	8013862 <sbrk_aligned+0x1e>
 8013882:	bf00      	nop
 8013884:	200096b0 	.word	0x200096b0

08013888 <_malloc_r>:
 8013888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801388c:	1ccd      	adds	r5, r1, #3
 801388e:	f025 0503 	bic.w	r5, r5, #3
 8013892:	3508      	adds	r5, #8
 8013894:	2d0c      	cmp	r5, #12
 8013896:	bf38      	it	cc
 8013898:	250c      	movcc	r5, #12
 801389a:	2d00      	cmp	r5, #0
 801389c:	4606      	mov	r6, r0
 801389e:	db01      	blt.n	80138a4 <_malloc_r+0x1c>
 80138a0:	42a9      	cmp	r1, r5
 80138a2:	d904      	bls.n	80138ae <_malloc_r+0x26>
 80138a4:	230c      	movs	r3, #12
 80138a6:	6033      	str	r3, [r6, #0]
 80138a8:	2000      	movs	r0, #0
 80138aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013984 <_malloc_r+0xfc>
 80138b2:	f000 f869 	bl	8013988 <__malloc_lock>
 80138b6:	f8d8 3000 	ldr.w	r3, [r8]
 80138ba:	461c      	mov	r4, r3
 80138bc:	bb44      	cbnz	r4, 8013910 <_malloc_r+0x88>
 80138be:	4629      	mov	r1, r5
 80138c0:	4630      	mov	r0, r6
 80138c2:	f7ff ffbf 	bl	8013844 <sbrk_aligned>
 80138c6:	1c43      	adds	r3, r0, #1
 80138c8:	4604      	mov	r4, r0
 80138ca:	d158      	bne.n	801397e <_malloc_r+0xf6>
 80138cc:	f8d8 4000 	ldr.w	r4, [r8]
 80138d0:	4627      	mov	r7, r4
 80138d2:	2f00      	cmp	r7, #0
 80138d4:	d143      	bne.n	801395e <_malloc_r+0xd6>
 80138d6:	2c00      	cmp	r4, #0
 80138d8:	d04b      	beq.n	8013972 <_malloc_r+0xea>
 80138da:	6823      	ldr	r3, [r4, #0]
 80138dc:	4639      	mov	r1, r7
 80138de:	4630      	mov	r0, r6
 80138e0:	eb04 0903 	add.w	r9, r4, r3
 80138e4:	f000 f864 	bl	80139b0 <_sbrk_r>
 80138e8:	4581      	cmp	r9, r0
 80138ea:	d142      	bne.n	8013972 <_malloc_r+0xea>
 80138ec:	6821      	ldr	r1, [r4, #0]
 80138ee:	1a6d      	subs	r5, r5, r1
 80138f0:	4629      	mov	r1, r5
 80138f2:	4630      	mov	r0, r6
 80138f4:	f7ff ffa6 	bl	8013844 <sbrk_aligned>
 80138f8:	3001      	adds	r0, #1
 80138fa:	d03a      	beq.n	8013972 <_malloc_r+0xea>
 80138fc:	6823      	ldr	r3, [r4, #0]
 80138fe:	442b      	add	r3, r5
 8013900:	6023      	str	r3, [r4, #0]
 8013902:	f8d8 3000 	ldr.w	r3, [r8]
 8013906:	685a      	ldr	r2, [r3, #4]
 8013908:	bb62      	cbnz	r2, 8013964 <_malloc_r+0xdc>
 801390a:	f8c8 7000 	str.w	r7, [r8]
 801390e:	e00f      	b.n	8013930 <_malloc_r+0xa8>
 8013910:	6822      	ldr	r2, [r4, #0]
 8013912:	1b52      	subs	r2, r2, r5
 8013914:	d420      	bmi.n	8013958 <_malloc_r+0xd0>
 8013916:	2a0b      	cmp	r2, #11
 8013918:	d917      	bls.n	801394a <_malloc_r+0xc2>
 801391a:	1961      	adds	r1, r4, r5
 801391c:	42a3      	cmp	r3, r4
 801391e:	6025      	str	r5, [r4, #0]
 8013920:	bf18      	it	ne
 8013922:	6059      	strne	r1, [r3, #4]
 8013924:	6863      	ldr	r3, [r4, #4]
 8013926:	bf08      	it	eq
 8013928:	f8c8 1000 	streq.w	r1, [r8]
 801392c:	5162      	str	r2, [r4, r5]
 801392e:	604b      	str	r3, [r1, #4]
 8013930:	4630      	mov	r0, r6
 8013932:	f000 f82f 	bl	8013994 <__malloc_unlock>
 8013936:	f104 000b 	add.w	r0, r4, #11
 801393a:	1d23      	adds	r3, r4, #4
 801393c:	f020 0007 	bic.w	r0, r0, #7
 8013940:	1ac2      	subs	r2, r0, r3
 8013942:	bf1c      	itt	ne
 8013944:	1a1b      	subne	r3, r3, r0
 8013946:	50a3      	strne	r3, [r4, r2]
 8013948:	e7af      	b.n	80138aa <_malloc_r+0x22>
 801394a:	6862      	ldr	r2, [r4, #4]
 801394c:	42a3      	cmp	r3, r4
 801394e:	bf0c      	ite	eq
 8013950:	f8c8 2000 	streq.w	r2, [r8]
 8013954:	605a      	strne	r2, [r3, #4]
 8013956:	e7eb      	b.n	8013930 <_malloc_r+0xa8>
 8013958:	4623      	mov	r3, r4
 801395a:	6864      	ldr	r4, [r4, #4]
 801395c:	e7ae      	b.n	80138bc <_malloc_r+0x34>
 801395e:	463c      	mov	r4, r7
 8013960:	687f      	ldr	r7, [r7, #4]
 8013962:	e7b6      	b.n	80138d2 <_malloc_r+0x4a>
 8013964:	461a      	mov	r2, r3
 8013966:	685b      	ldr	r3, [r3, #4]
 8013968:	42a3      	cmp	r3, r4
 801396a:	d1fb      	bne.n	8013964 <_malloc_r+0xdc>
 801396c:	2300      	movs	r3, #0
 801396e:	6053      	str	r3, [r2, #4]
 8013970:	e7de      	b.n	8013930 <_malloc_r+0xa8>
 8013972:	230c      	movs	r3, #12
 8013974:	6033      	str	r3, [r6, #0]
 8013976:	4630      	mov	r0, r6
 8013978:	f000 f80c 	bl	8013994 <__malloc_unlock>
 801397c:	e794      	b.n	80138a8 <_malloc_r+0x20>
 801397e:	6005      	str	r5, [r0, #0]
 8013980:	e7d6      	b.n	8013930 <_malloc_r+0xa8>
 8013982:	bf00      	nop
 8013984:	200096b4 	.word	0x200096b4

08013988 <__malloc_lock>:
 8013988:	4801      	ldr	r0, [pc, #4]	@ (8013990 <__malloc_lock+0x8>)
 801398a:	f000 b84b 	b.w	8013a24 <__retarget_lock_acquire_recursive>
 801398e:	bf00      	nop
 8013990:	200097f4 	.word	0x200097f4

08013994 <__malloc_unlock>:
 8013994:	4801      	ldr	r0, [pc, #4]	@ (801399c <__malloc_unlock+0x8>)
 8013996:	f000 b846 	b.w	8013a26 <__retarget_lock_release_recursive>
 801399a:	bf00      	nop
 801399c:	200097f4 	.word	0x200097f4

080139a0 <memset>:
 80139a0:	4402      	add	r2, r0
 80139a2:	4603      	mov	r3, r0
 80139a4:	4293      	cmp	r3, r2
 80139a6:	d100      	bne.n	80139aa <memset+0xa>
 80139a8:	4770      	bx	lr
 80139aa:	f803 1b01 	strb.w	r1, [r3], #1
 80139ae:	e7f9      	b.n	80139a4 <memset+0x4>

080139b0 <_sbrk_r>:
 80139b0:	b538      	push	{r3, r4, r5, lr}
 80139b2:	4d06      	ldr	r5, [pc, #24]	@ (80139cc <_sbrk_r+0x1c>)
 80139b4:	2300      	movs	r3, #0
 80139b6:	4604      	mov	r4, r0
 80139b8:	4608      	mov	r0, r1
 80139ba:	602b      	str	r3, [r5, #0]
 80139bc:	f7ef f9be 	bl	8002d3c <_sbrk>
 80139c0:	1c43      	adds	r3, r0, #1
 80139c2:	d102      	bne.n	80139ca <_sbrk_r+0x1a>
 80139c4:	682b      	ldr	r3, [r5, #0]
 80139c6:	b103      	cbz	r3, 80139ca <_sbrk_r+0x1a>
 80139c8:	6023      	str	r3, [r4, #0]
 80139ca:	bd38      	pop	{r3, r4, r5, pc}
 80139cc:	200097f0 	.word	0x200097f0

080139d0 <__errno>:
 80139d0:	4b01      	ldr	r3, [pc, #4]	@ (80139d8 <__errno+0x8>)
 80139d2:	6818      	ldr	r0, [r3, #0]
 80139d4:	4770      	bx	lr
 80139d6:	bf00      	nop
 80139d8:	20000030 	.word	0x20000030

080139dc <__libc_init_array>:
 80139dc:	b570      	push	{r4, r5, r6, lr}
 80139de:	4d0d      	ldr	r5, [pc, #52]	@ (8013a14 <__libc_init_array+0x38>)
 80139e0:	4c0d      	ldr	r4, [pc, #52]	@ (8013a18 <__libc_init_array+0x3c>)
 80139e2:	1b64      	subs	r4, r4, r5
 80139e4:	10a4      	asrs	r4, r4, #2
 80139e6:	2600      	movs	r6, #0
 80139e8:	42a6      	cmp	r6, r4
 80139ea:	d109      	bne.n	8013a00 <__libc_init_array+0x24>
 80139ec:	4d0b      	ldr	r5, [pc, #44]	@ (8013a1c <__libc_init_array+0x40>)
 80139ee:	4c0c      	ldr	r4, [pc, #48]	@ (8013a20 <__libc_init_array+0x44>)
 80139f0:	f000 f872 	bl	8013ad8 <_init>
 80139f4:	1b64      	subs	r4, r4, r5
 80139f6:	10a4      	asrs	r4, r4, #2
 80139f8:	2600      	movs	r6, #0
 80139fa:	42a6      	cmp	r6, r4
 80139fc:	d105      	bne.n	8013a0a <__libc_init_array+0x2e>
 80139fe:	bd70      	pop	{r4, r5, r6, pc}
 8013a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8013a04:	4798      	blx	r3
 8013a06:	3601      	adds	r6, #1
 8013a08:	e7ee      	b.n	80139e8 <__libc_init_array+0xc>
 8013a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8013a0e:	4798      	blx	r3
 8013a10:	3601      	adds	r6, #1
 8013a12:	e7f2      	b.n	80139fa <__libc_init_array+0x1e>
 8013a14:	08013ba0 	.word	0x08013ba0
 8013a18:	08013ba0 	.word	0x08013ba0
 8013a1c:	08013ba0 	.word	0x08013ba0
 8013a20:	08013ba4 	.word	0x08013ba4

08013a24 <__retarget_lock_acquire_recursive>:
 8013a24:	4770      	bx	lr

08013a26 <__retarget_lock_release_recursive>:
 8013a26:	4770      	bx	lr

08013a28 <memcpy>:
 8013a28:	440a      	add	r2, r1
 8013a2a:	4291      	cmp	r1, r2
 8013a2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013a30:	d100      	bne.n	8013a34 <memcpy+0xc>
 8013a32:	4770      	bx	lr
 8013a34:	b510      	push	{r4, lr}
 8013a36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013a3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013a3e:	4291      	cmp	r1, r2
 8013a40:	d1f9      	bne.n	8013a36 <memcpy+0xe>
 8013a42:	bd10      	pop	{r4, pc}

08013a44 <_free_r>:
 8013a44:	b538      	push	{r3, r4, r5, lr}
 8013a46:	4605      	mov	r5, r0
 8013a48:	2900      	cmp	r1, #0
 8013a4a:	d041      	beq.n	8013ad0 <_free_r+0x8c>
 8013a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013a50:	1f0c      	subs	r4, r1, #4
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	bfb8      	it	lt
 8013a56:	18e4      	addlt	r4, r4, r3
 8013a58:	f7ff ff96 	bl	8013988 <__malloc_lock>
 8013a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8013ad4 <_free_r+0x90>)
 8013a5e:	6813      	ldr	r3, [r2, #0]
 8013a60:	b933      	cbnz	r3, 8013a70 <_free_r+0x2c>
 8013a62:	6063      	str	r3, [r4, #4]
 8013a64:	6014      	str	r4, [r2, #0]
 8013a66:	4628      	mov	r0, r5
 8013a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013a6c:	f7ff bf92 	b.w	8013994 <__malloc_unlock>
 8013a70:	42a3      	cmp	r3, r4
 8013a72:	d908      	bls.n	8013a86 <_free_r+0x42>
 8013a74:	6820      	ldr	r0, [r4, #0]
 8013a76:	1821      	adds	r1, r4, r0
 8013a78:	428b      	cmp	r3, r1
 8013a7a:	bf01      	itttt	eq
 8013a7c:	6819      	ldreq	r1, [r3, #0]
 8013a7e:	685b      	ldreq	r3, [r3, #4]
 8013a80:	1809      	addeq	r1, r1, r0
 8013a82:	6021      	streq	r1, [r4, #0]
 8013a84:	e7ed      	b.n	8013a62 <_free_r+0x1e>
 8013a86:	461a      	mov	r2, r3
 8013a88:	685b      	ldr	r3, [r3, #4]
 8013a8a:	b10b      	cbz	r3, 8013a90 <_free_r+0x4c>
 8013a8c:	42a3      	cmp	r3, r4
 8013a8e:	d9fa      	bls.n	8013a86 <_free_r+0x42>
 8013a90:	6811      	ldr	r1, [r2, #0]
 8013a92:	1850      	adds	r0, r2, r1
 8013a94:	42a0      	cmp	r0, r4
 8013a96:	d10b      	bne.n	8013ab0 <_free_r+0x6c>
 8013a98:	6820      	ldr	r0, [r4, #0]
 8013a9a:	4401      	add	r1, r0
 8013a9c:	1850      	adds	r0, r2, r1
 8013a9e:	4283      	cmp	r3, r0
 8013aa0:	6011      	str	r1, [r2, #0]
 8013aa2:	d1e0      	bne.n	8013a66 <_free_r+0x22>
 8013aa4:	6818      	ldr	r0, [r3, #0]
 8013aa6:	685b      	ldr	r3, [r3, #4]
 8013aa8:	6053      	str	r3, [r2, #4]
 8013aaa:	4408      	add	r0, r1
 8013aac:	6010      	str	r0, [r2, #0]
 8013aae:	e7da      	b.n	8013a66 <_free_r+0x22>
 8013ab0:	d902      	bls.n	8013ab8 <_free_r+0x74>
 8013ab2:	230c      	movs	r3, #12
 8013ab4:	602b      	str	r3, [r5, #0]
 8013ab6:	e7d6      	b.n	8013a66 <_free_r+0x22>
 8013ab8:	6820      	ldr	r0, [r4, #0]
 8013aba:	1821      	adds	r1, r4, r0
 8013abc:	428b      	cmp	r3, r1
 8013abe:	bf04      	itt	eq
 8013ac0:	6819      	ldreq	r1, [r3, #0]
 8013ac2:	685b      	ldreq	r3, [r3, #4]
 8013ac4:	6063      	str	r3, [r4, #4]
 8013ac6:	bf04      	itt	eq
 8013ac8:	1809      	addeq	r1, r1, r0
 8013aca:	6021      	streq	r1, [r4, #0]
 8013acc:	6054      	str	r4, [r2, #4]
 8013ace:	e7ca      	b.n	8013a66 <_free_r+0x22>
 8013ad0:	bd38      	pop	{r3, r4, r5, pc}
 8013ad2:	bf00      	nop
 8013ad4:	200096b4 	.word	0x200096b4

08013ad8 <_init>:
 8013ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ada:	bf00      	nop
 8013adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ade:	bc08      	pop	{r3}
 8013ae0:	469e      	mov	lr, r3
 8013ae2:	4770      	bx	lr

08013ae4 <_fini>:
 8013ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ae6:	bf00      	nop
 8013ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013aea:	bc08      	pop	{r3}
 8013aec:	469e      	mov	lr, r3
 8013aee:	4770      	bx	lr
